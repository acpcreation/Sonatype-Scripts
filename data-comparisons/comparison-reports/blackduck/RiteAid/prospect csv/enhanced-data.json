{
    "TotalAdvisories": 45,
    "UniqueAdvisories": 31,
    "Advisories": [
        {
            "cve": "CVE-2015-2156",
            "description": "Netty is vulnerable to Information Disclosure.  Multiple methods in multiple files improperly validate cookie names and values. This allows the presence of single-quote and double-quote characters to break tokenization.  A remote attacker can exploit this vulnerability by inducing a victim to send a crafted request containing quote characters in any parameter value that sets a cookie.  If that tainted cookie gets reflected in the response, the attacker can then use Cross-Site Scripting (XSS) to potentially retrieve the entire cookie header, despite the presence of an `HttpOnly` flag.\n\n*Advisory Deviation Notice*\nThe Sonatype security research team discovered that the vulnerability is present in all versions prior to 3.9.7.Final and 3.10.x before 3.10.2.Final, and not in all the versions before 3.9.8.Final and 3.10.x before 3.10.3.Final as the advisory states.\n"
        },
        {
            "cve": "CVE-2016-4970",
            "description": "Netty is vulnerable to Denial of Service (DoS). The `wrap()` function in the `OpenSslEngine` class doesn't properly handle renegotiations, causing the application to hang in an infinite loop. A remote attacker could exploit this vulnerability by sending multiple requests to the application to consume large amounts of CPU cycles, which can result in Denial of Service (DoS).\r\n\r\n*Advisory Deviation Notice*\r\nThe Sonatype security research team discovered that the vulnerability is present in version 4.0.20 until 4.0.37, not in all the versions from 4.0.0 till 4.0.37 as the advisory states."
        },
        {
            "cve": "CVE-2019-20444",
            "description": "The `netty-codec-http` package is vulnerable to HTTP Request Smuggling. The `splitHeader` method in `HttpObjectDecoder.class` does not ensure that headers have colons when processing HTTP requests. As this will lead to requests being interpreted inconsistently, an attacker can exploit this behavior to potentially smuggle HTTP Requests.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is also in 5.0.0.Alpha1 and 5.0.0.Alpha2, not just in versions before 4.1.44 as stated in the advisory.\n"
        },
        {
            "cve": "CVE-2019-20445",
            "description": "The `netty-codec-http` package is vulnerable to HTTP Request Smuggling. The `readHeaders` method in `HttpObjectDecoder.class` accepts HTTP requests that contain multiple `Content-Length` headers or that contain both a `Content-Length` and `Transfer-Encoding` header. A remote attacker can exploit this functionality to potentially hide additional HTTP requests that will be interpreted differently by different parsers.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is in 5.0.0.Alpha1 and 5.0.0.Alpha2, not just in versions before 4.1.44, as stated in the advisory."
        },
        {
            "cve": "sonatype-2020-0029",
            "description": "The `netty-codec` and `netty` packages are vulnerable to Denial of Service (DoS) attacks. The `decode` methods in `JdkZlibDecoder.class`, `JZlibDecoder.class`, `JZlibDecoder.class` and `ZlibDecoder.class` do not limit the eventual size of a compressed buffer after it is decompressed. Consequently, a malicious request can consume much more memory on a server than the size of the request would imply. An attacker can exploit this behavior by sending many such requests, resulting in a DoS situation.\n\n*Note*: CVE-2020-11612 has been assigned to this issue. \n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present in all versions before 4.1.46.Final and versions 5.0.0.Alpha1 through 5.0.0.Alpha2, not just versions 4.1.x before 4.1.46 as the advisory states."
        },
        {
            "cve": "sonatype-2021-1694",
            "description": "The `gson` package is vulnerable Deserialization of Untrusted Data. The serializable `LazilyParsedNumber`, `LinkedHashTreeMap`, and `LinkedTreeMap` classes permit unsafe deserialization due to use of the default `Serializable.readObject()` implementation. A remote attacker can exploit this vulnerability by serializing and supplying any of the aforementioned objects to an affected application. This will result in a Denial of Service (DoS) condition or other unexpected behavior when the malicious object is deserialized.\n\nNote: This vulnerability has been assigned CVE-2022-25647.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in 2.2.3, not in all versions before 2.8.9 as the advisory states."
        },
        {
            "cve": "CVE-2020-26939",
            "description": "The Bouncy Castle Crypto package is vulnerable to Timing Attacks. The `decodeBlock` method in `OAEPEncoding.class`, `decodeBlockOrRandom` and `decodeBlock` methods in `PKCS1Encoding.class`, and `convertOutput` method in `RSACoreEngine.class` do not properly maintain constant time when decoding inputs of various lengths, specifically short inputs for the OAEP Decoder. An attacker can exploit this by observing the difference in time taken to decode inputs of various lengths in order to expose private encryption keys.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the fix for this vulnerability was actually introduced in version 1.61 instead of 1.55 as stated in the advisory."
        },
        {
            "cve": "CVE-2020-36518",
            "description": "The `jackson-databind` package is vulnerable to a Denial of Service (DoS) attack. The `deserialize()` method in the `UntypedObjectDeserializer` and `UntypedObjectDeserializer$Vanilla` classes fails to restrict recursion when deserializing nested untyped or generic objects. A remote attacker who can supply data to be deserialized by an affected application can exploit this vulnerability to cause the JVM to consume all available memory, resulting in a `StackOverflow` exception and ultimately a DoS condition.\n\n*Advisory Deviation Notice*: The Sonatype security research team has discovered that this vulnerability was fixed in versions 2.13.2.1 and 2.12.6.1 and not 2.13.0 as stated in the advisory."
        },
        {
            "cve": "CVE-2019-0232",
            "description": "The CGI Servlet in Apache Tomcat is vulnerable to Remote Code Execution. The `init` and `setupFromRequest` methods in the `CGIServlet.class` do not properly decode any command-line arguments supplied as an input to the CGI Servlet. When running on Windows systems with the `enableCmdLineArguments` option enabled, the component could allow an attacker to execute code remotely by supplying crafted input in a request.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that in the 8.x versions of the component, the vulnerability is present from 8.0.0 until 8.5.39 and not from the 8.5.0 version as stated in the advisory. Additionally, one of the mitigations specified in the advisory (\"Upgrade to Apache Tomcat 7.0.93 or later when released\") is incorrect since version 7.0.93 is vulnerable as well.  7.0.94 contains the fix for 7.0.x."
        },
        {
            "cve": "CVE-2019-17563",
            "description": "Apache Tomcat is vulnerable to Session Fixation. The `matchRequest` and `authenticate` methods in `FormAuthenticator.class` do not properly ensure that the Principal is not cached in the session when caching is set to false. This creates a small window of opportunity in which a remote attacker can execute a session fixation attack against a victim.\n\n*Advisory Deviation Notice:* The Sonatype security research team has discovered that the vulnerability is present in 8.0.X versions as well, not just versions 8.5.0 to 8.5.49 as the advisory states."
        },
        {
            "cve": "CVE-2020-9484",
            "description": "The `tomcat-catalina` package is vulnerable to Remote Code Execution (RCE). The `file()` method in the `FileStore` class fails to enforce the current FileStore directory when creating a file Object, allowing specific configurations of Tomcat instances to attempt to deserialize files outside of the file store. An attacker that knows the FileStore location in addition to having control over the file that is passed into the `FileStore` object as input may craft a request that can trigger arbitrary code execution on Tomcat servers. \n\nThis vulnerability can only be exploited under the following specific circumstances:\n* The Persistence Manager is using a default  `sessionAttributeValueClassNameFilter` value of null, or a value that is permissive enough to allow object inputs to be deserialized by the FileStore object\n\n* The `FileStore` is enabled for the `PersistenceManager`\n\n* The attacker knows the FileStore path\n\n* The attacker controls some other file path on the system. This includes the ability to create arbitrary files.'\n\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is also present in version the 4.x, 5.x, and 6.x branches of Apache Tomcat's Catalina component, not just the 7.x, 8.x, 9.x, and 10.x branches as the advisory states."
        },
        {
            "cve": "CVE-2018-8036",
            "description": "The `Apache PDFBox` is vulnerable to Uncontrolled Resource Consumption ('Resource Exhaustion'). A successful exploit could trigger an infinite loop scenario that may lead to an out-of-memory exception in the AFMParser component, resulting in a DoS condition. \n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability got introduced from the version 1.0.0, not in the versions 1.8.0  as the advisory states.\nReference For affected version:\nhttps://issues.apache.org/jira/browse/PDFBOX-4251?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel"
        },
        {
            "cve": "CVE-2019-17571",
            "description": "The `log4j:log4j` package is vulnerable to Remote Code Execution (RCE) due to Deserialization of Untrusted Data. The `SocketNode` constructor in `SocketNode.class`, as referenced by the `SocketServer.class`, fails to properly verify if the objects being read from the `ObjectInputStream` belong to a list of classes which  are safe for deserialization. An attacker can exploit this vulnerability to deserialize objects of unsafe types, potentially resulting in Remote Code Execution (RCE).\n\nNOTE: Starting with version(s) 2.x, `log4j:log4j` was relocated to `org.apache.logging.log4j:log4j-core`. A variation of this vulnerability exists in `org.apache.logging.log4j:log4j-core` as CVE-2017-5645, in versions up to but excluding 2.8.2.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability actually impacts the `SocketNode` class being referenced by `SocketServer` class and not the `SocketServer` class itself as indicated in the NVD advisory. "
        },
        {
            "cve": "CVE-2021-4104",
            "description": "The `log4j:log4j` package is vulnerable to Deserialization of Untrusted Data. The `lookup()` and `activateOptions()` methods in the `JMSAppender` class allow `JNDI` lookup requests to be made when the `TopicBindingName` and `TopicConnectionFactoryBindingName` specify a trusted host. Lookups made to this host may be used by attackers to request a serialized malicious Java Object that can be deserialized and executed, leading to Remote Code Execution (RCE). \n\nNote that this vulnerability is different from [CVE-2021-44228](https://nvd.nist.gov/vuln/detail/CVE-2021-44228) and requires the attacker to be in control of the third party host that is specified in the configuration, or write access to the Log4j configuration file in order to specify a malicious lookup host directly. This vulnerability also only affects the 1.x.x component of `Log4j` released under the `log4j:log4j` group and artifact IDs.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in all versions of log4j:log4j, not just in the 1.2.x branch as the advisory states. "
        },
        {
            "cve": "CVE-2018-18928",
            "description": "ICU is vulnerable to Integer Overflow or Wraparound. The `bcdToBigDecimal()` method in the `DecimalQuantity_DualStorageBCD.class` and the `toScientificString()` method in the `DecimalQuantity_AbstractBCD.class` do not properly check bounds of a user-supplied input before parsing it. A remote attacker can exploit this behavior by submitting a specially-crafted input which, when parsed, would result in Denial of Service (DoS) or arbitrary code execution.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability also exists in the Java port of the component, and not just in the C/C++ component as the advisory states."
        },
        {
            "cve": "CVE-2018-11771",
            "description": "The Apache Commons Compress package is vulnerable to Denial of Service (DoS). The `readStored()` method in `ZipArchiveInputStream.class` silently returns a -1 on corrupted zip archives and continues to process them.  A remote attacker can exploit this by purposely uploading a corrupted archive that the vulnerable application will process indefinitely.   \n\n*Advisory Deviation Notice: The Sonatype security research team discovered that the root cause of the vulnerability is in 1.0, not in 1.7 as the advisory states."
        },
        {
            "cve": "CVE-2022-26520",
            "description": "The `postgresql` package is vulnerable to Improper Input Validation. The `setupLoggerFromProperties()` method in the `Driver` class sets `loggerLevel` and `loggerFile` properties of the Java logger from parameters extracted from JDBC URLs. A remote attacker who can provide a JDBC URL or its properties can exploit this vulnerability to write to files in arbitrary locations on the affected server.\n\nNote: The Sonatype security research team has determined that, while the project disputes this vulnerability, risk exists for applications that accept JDBC URLs or their properties from untrusted users. Ultimately, the project addressed this issue in version 42.3.3-rc1 by removing the functionality responsible for setting the aforementioned logger properties from JDBC URLs.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version 42.0.0 and therefore does not affect all versions prior to 42.3.3 as stated in the advisory."
        },
        {
            "cve": "CVE-2020-1935",
            "description": "The `tomcat-coyote` package is vulnerable to HTTP Request Smuggling. The `parseHeader` and `skipLine` methods in `Http11InputBuffer.class`, `InternalNioInputBuffer.class`, `InternalAprInputBuffer.class`, and `InternalInputBuffer.class` do not properly parse HTTP request header values in regards to end-of-line (EOL) parsing. An attacker can exploit this when Tomcat is located behind a reverse proxy, using a malicious and invalid Transfer-Encoding header that would then be parsed as valid.\n\n*Advisory Deviation Notice:* The Sonatype security research team has discovered that the vulnerability is present in 8.0.x versions prior to 8.5.0, not just 8.5.x versions as the advisory states."
        },
        {
            "cve": "CVE-2021-33037",
            "description": "The `tomcat-coyote` package is vulnerable to HTTP Request Smuggling attacks. The vulnerable methods and classes fail to properly validate HTTP requests with `Transfer-Encoding` header values when the specified client protocol version is `HTTP/1.0`. This allows attackers to smuggle data inside of HTTP requests when the protocol version is manually set by the client and the running `Tomcat` instance is sitting behind a reverse-proxy. This could result in unexpected behavior for web services utilizing `tomcat-coyote` and could potentially lead to Sensitive Information Disclosure, Data Corruption, or a Denial of Service (Dos) condition.\n\n*Vulnerable File(s) and Function(s)*:\n\norg/apache/coyote/http11/Http11Processor.class\n* addInputFilter()\n* prepareRequest()\n\norg/apache/coyote/http11/AbstractHttp11Processor.class\n* addInputFilter()\n* prepareRequest()\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present in all versions before 8.5.68, not just 8.5.0 until 8.5.68 as the advisory states."
        },
        {
            "cve": "CVE-2018-3831",
            "description": "`elasticsearch` is vulnerable to Information Disclosure. The `renderResponse()` method in the `RestClusterGetSettingsAction` class fails to filter certain settings from the `ClusterGetSettingsResponse` object, and consequently exposes potentially sensitive information via the `/_cluster/settings` API endpoint. A remote authenticated attacker can exploit this vulnerability by sending a request to the affected cluster endpoint. This will result in the exposure of any sensitive information contained therein.\n\n*Advisory Deviation Notice*: The Sonatype security research team has discovered that this vulnerability was introduced in version 0.18.0 and is not present in all versions before 5.6.12 as stated in the advisory."
        },
        {
            "cve": "CVE-2018-1338",
            "description": "The Apache Tika `tika-core` package is vulnerable to Denial of Service (DoS) attacks. The `readUE7()` function in the `EndianUtils` class, used by the `BPGParser` class,  fails to validate the length of the incoming stream when parsing input. A remote attacker can trigger this vulnerability by crafting a malicious file that exploits this issue. The attacker can then entice a victim into submitting the file for processing. This will result in a DoS when the application attempts to process the file.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that this vulnerability was introduced in version 1.7-rc1 and is not present in all versions prior to 1.18 as stated in the advisory."
        },
        {
            "cve": "CVE-2021-31812",
            "description": "The Apache `pdfbox` package is vulnerable to a Denial of Service (DoS) attack. The `parseXref()` method in the `COSParser` class, while parsing cross reference tables (Xref), fails to account for skipped whitespace characters when determining the current loop position. A remote attacker can leverage this vulnerability to cause an infinite loop by supplying a PDF file that contains Xref data that exploit this issue.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version 1.7.0 and not 2.0.x as stated in the advisory."
        },
        {
            "cve": "CVE-2021-40690",
            "description": "The `xmlsec` package is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor. The `resolveReferentKeyInfo()` and `validateReference()` methods in the `KeyInfoReferenceResolver` class do not properly pass the `secureValidation` property when creating a `KeyInfo` from a `KeyInfoReference` element. A remote attacker can exploit this behavior to extract any local `.xml` files during an XPath transform using the `RetrievalMethod` element. This would result in the attacker gaining access to otherwise restricted information on an application using this package to implement XML security standards.\n\n                *Advisory Deviation Notice:* Due to the attacker only being able to access XML files by exploiting this vulnerability, the Sonatype Security Research team lowered the Confidentiality impact to 'Low'."
        },
        {
            "cve": "CVE-2020-9489",
            "description": "The `tika-parsers` package is vulnerable to Denial of Service. The `ICNSParser.class`, `ID3v2Frame.class`, `MP4Parser.class`, `PDFParserConfig.class` and `OneNoteParser.class` classes improperly handle the input they receive and cause null pointer exceptions, memory writing out of the boundaries of the buffer or infinite loops. An attacker could take advantage of this behavior and craft a special payload for a vulnerable parser to crash the application.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present in version 0.7 until 1.24, not just in 1.24 as the advisory states.\n\n*Vulnerable File(s) and Function(s)*:\n\norg/apache/tika/parser/image/ICNSParser.class\n* parse()\n\norg/apache/tika/parser/mp3/ID3v2Frame.class\n* readFully()\n\norg/apache/tika/parser/mp4/MP4Parser.class\n* parse()\n\nMETA-INF/services/org.apache.tika.parser.Parser\n\norg/apache/tika/parser/pdf/PDFParserConfig.class\n* Serializable()"
        },
        {
            "cve": "CVE-2019-12415",
            "description": "The `org.apache.poi:poi-ooxml` package is vulnerable to XML eXternal Entity (XXE) Reference attacks. The `isValid` method in `XSSFExportToXml.class` does not properly validate `SchemaFactory` objects when parsing Excel documents. An attacker can use a crafted document to read arbitrary files on the vulnerable filesystem via XXE processing.\n\n*Advisory Deviation Notice:* The Sonatype security research team has discovered that the vulnerability was introduced in version `3.5-FINAL` of the package and not in the initial version, as the advisory states.\n"
        },
        {
            "cve": "CVE-2021-37714",
            "description": "The `jsoup` is vulnerable due to Uncaught Exception. The `appendTagName` function in the `Token.class` incorrectly processes user input that contains unexpected characters in variable amounts. An attacker could leverage this behavior to crash the application by sending malformed input to the application, which may include multiple null characters.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present from version 1.6.0 before 1.14.2, not all prior versions to 1.14.2 as the advisory states."
        },
        {
            "cve": "CVE-2018-10237",
            "description": "Guava is vulnerable to Denial of Service (DoS). When untrusted input is supplied to the `AtomicDoubleArray` and `CompoundOrdering` classes, it is possible for an attacker to specify a large integer number as part of that untrusted input.  This untrusted integer `n` is used to allocate an array of length `n`.  Thus with large values of `n`, it is possible to cause an application to run out of memory.\n\nAdvisory Deviation Notice: The Sonatype security research team discovered that the fix for this vulnerability was actually introduced in version 23.6.1 for 23.6.x instead of 24.1.1 as stated in https://nvd.nist.gov/vuln/detail/CVE-2018-10237"
        },
        {
            "cve": "CVE-2016-1000344",
            "description": "BouncyCastle uses an insecure encryption method when encrypting data using the Diffie-Hellman key exchange algorithm.  The `engineInit` method in the `IESCipher` class and `configure` method in the `DH` class implement the ECB mode for encryption, which may result in information about the clear text being leaked into the encrypted cipher text.  An attacker with access to the encrypted data can exploit this vulnerability by analyzing the encrypted data for patterns that reveal information about the clear text.  \n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present in version 1.48 until 1.55, not 1.55 and earlier as the advisory states."
        },
        {
            "cve": "CVE-2016-1000352",
            "description": "BouncyCastle uses an insecure encryption method when encrypting data using the elliptic curve key exchange algorithm.  The `engineInit` method in the `IESCipher` class and `configure` method in the `EC` class implement the ECB mode for encryption, which may result in information about the clear text being leaked into the encrypted cipher text.  An attacker with access to the encrypted data can exploit this vulnerability by analyzing the encrypted data for patterns that reveal information about the clear text.  \n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present in version 1.48 until 1.55, not 1.55 and earlier as the advisory states."
        },
        {
            "cve": "CVE-2020-7961",
            "description": "The `portal-impl` package is vulnerable to Deserialization of Untrusted Data. The `_createDefaultParameterValue` and `_prepareParameters` methods in `JSONWebServiceActionImpl.class` allows users to instantiate arbitrary classes. A remote attacker can leverage this behavior to execute code in a malicious manner.\n\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the fix for this vulnerability was only introduced in version 7.2.1 instead of 7.2.1, 7.1.3, 7.0.6 and 6.2.5 as stated in the advisory."
        },
        {
            "cve": "CVE-2021-44228",
            "description": "The `log4j-core` package is vulnerable to Deserialization of Untrusted data. The vulnerable methods allow the `JNDI` Java interface to be used to request resources from arbitrary URIs using the `LDAP` and `LDAPS` protocols. This leads to Java objects contained within the resource to be deserialized and processed. Applications that use the `log4j-core` library to log events and utilize application data in log messages may inadvertently allow user input to be included inside their log messages. Remote attackers can leverage this behavior to fetch a malicious resource under their control. This would lead to malicious Java code being deserialized and executed in the context of the vulnerable application and may lead to Remote Code Execution (RCE).\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in `org.apache.logging.log4j:log4j-core`, and is not in `org.apache.logging.log4j:log4j-api` as the GitHub advisory states. The research team has also discovered that the vulnerable code was introduced in version 2.0-beta9 and not all versions before 2.15.0 are vulnerable as the GitHub advisory states. The 1.x branch is not affected by this vulnerability.\n\n*Vulnerable File(s) and Function(s)*:\n\norg/apache/logging/log4j/core/net/JndiManager.class\n* lookup()\n\norg/apache/logging/log4j/core/appender/mom/JmsAppender$Builder.class\n* build()"
        }
    ],
    "TotalWorkarounds": 43,
    "Workarounds": [
        {
            "cve": "CVE-2021-21290",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by following the workarounds provided by the project:\n\n>>>Specify your own java.io.tmpdir when you start the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.\n\nReference: [https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2](https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "sonatype-2020-0026",
            "remediation": "There is no non-vulnerable upgrade path for this component/package. We recommend investigating alternative components or a potential mitigating control. \n\nPer the vendor documentation, \"if you create SslHandler for the client side and want proper security, we advice that you configure the SSLEngine (see SSLParameters.setEndpointIdentificationAlgorithm(String)):\"\n\n ```\nSSLEngine sslEngine = sslHandler.engine();\n SSLParameters sslParameters = sslEngine.getSSLParameters();\n // only available since Java 7\n sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n sslEngine.setSSLParameters(sslParameters);\n```\nReference: [https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-](https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-)"
        },
        {
            "cve": "CVE-2017-17485",
            "remediation": "*Update*: As of version 2.10.0, Jackson now provides a safe default typing solution that fully mitigates this vulnerability.\n\nReference: [https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2](https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2)\n\nIn order to mitigate this vulnerability, we recommend upgrading to at least version 2.10.0 and changing any usages of `enableDefaultTyping()` to `activateDefaultTyping()`.\n\nAlternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling default typing.  Instead, you will need to implement your own:\n\n>It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers.\n\nReference: [https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n\nExamples of implementing your own typing can be found by looking at [Spring Security's fix](https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439) or [this Stack Overflow article](https://stackoverflow.com/questions/12353774/how-to-customize-jackson-type-information-mechanism)."
        },
        {
            "cve": "CVE-2018-5968",
            "remediation": "*Update*: As of version 2.10.0, Jackson now provides a safe default typing solution that fully mitigates this vulnerability.\n\nReference: [https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2](https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2)\n\nIn order to mitigate this vulnerability, we recommend upgrading to at least version 2.10.0 and changing any usages of `enableDefaultTyping()` to `activateDefaultTyping()`.\n\nAlternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling default typing.  Instead, you will need to implement your own:\n\n>It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers.\n\nReference: [https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n\nExamples of implementing your own typing can be found by looking at [Spring Security's fix](https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439) or [this Stack Overflow article](https://stackoverflow.com/questions/12353774/how-to-customize-jackson-type-information-mechanism)."
        },
        {
            "cve": "CVE-2018-11784",
            "remediation": "\nWorkaround:\n>Use mapperDirectoryRedirectEnabled=\"true\" and mapperContextRootRedirectEnabled=\"true\" on the Context to ensure that redirects are issued by the Mapper rather than the default Servlet. See the Context configuration documentation for further important details.\n\nReference: [http://mail-archives.us.apache.org/mod_mbox/www-announce/201810.mbox/%3C4cf697b0-db03-9eab-f2aa-54c2026d0e88@apache.org%3E](http://mail-archives.us.apache.org/mod_mbox/www-announce/201810.mbox/%3C4cf697b0-db03-9eab-f2aa-54c2026d0e88@apache.org%3E)"
        },
        {
            "cve": "CVE-2018-1304",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue.  If upgrading is not a viable option, this vulnerability can be mitigated by ensuring that all security constraints set to an empty string are instead specifically mapped to the root directory (\"/\")."
        },
        {
            "cve": "CVE-2019-0221",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. If upgrading is not a viable option, this vulnerability can be mitigated by disabling the SSI functionality."
        },
        {
            "cve": "CVE-2019-0232",
            "remediation": "\nUntil a fixed version is installed, the vulnerability can be mitigated by setting the CGI Servlet initialization parameter `enableCmdLineArguments` to false.\n\nReference: [http://mail-archives.apache.org/mod_mbox/www-announce/201904.mbox/%3C13d878ec-5d49-c348-48d4-25a6c81b9605@apache.org%3E](http://mail-archives.apache.org/mod_mbox/www-announce/201904.mbox/%3C13d878ec-5d49-c348-48d4-25a6c81b9605@apache.org%3E)\n\nNOTE: For 7.0.x, the advisory mentions upgrading to 7.0.93 which appears to be a typographical error as 7.0.93 is not a fixed version.  7.0.94 has been released and this contains the fix."
        },
        {
            "cve": "CVE-2016-1000027",
            "remediation": "There is no non-vulnerable upgrade path for this component/package. We recommend investigating alternative components or a potential mitigating control.\n\nA warning has been provided in the official [Javadocs](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.html) of the `HttpInvokerServiceExporter` class and support for several serialization-based remoting technologies including this class has been deprecated from 5.3.0 onwards:\n\n>WARNING: Be aware of vulnerabilities due to unsafe Java deserialization: Manipulated input streams could lead to unwanted code execution on the server during the deserialization step. As a consequence, do not expose HTTP invoker endpoints to untrusted clients but rather just between your own services. In general, we strongly recommend any other message format (e.g. JSON) instead.\n\nThe developer's general advice also states:\n>Do not use Java serialization for external endpoints, in particular not for unauthorized ones. HTTP invoker is not a well-kept secret (or an \"oversight\") but rather the typical case of how a Spring application would expose serialization endpoints to begin with... he has a point that we should make this case all across our documentation, including the javadoc. But I don't really see a CVE case here, just a documentation improvement.\n>\n>Pivotal will enhance their documentation for the 4.2.6 and 3.2.17 releases.\n\nReference: [https://www.tenable.com/security/research/tra-2016-20](https://www.tenable.com/security/research/tra-2016-20)"
        },
        {
            "cve": "CVE-2018-11040",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Since the fixed versions only deprecate the vulnerable functionality, we also recommend discontinuing usage of the `MappingJackson2JsonView` class.\n\nNote:\n> Applications that do require JSONP support will need to explicitly configure the jsonpParameterNames property of MappingJacksonJsonView following the upgrade. It is recommended that applications switch to using CORS instead of JSONP to enable cross-domain requests. JSONP support in the Spring Framework is deprecated as of 5.0.7 and 4.3.18 and will be removed in 5.1.\n\nReference: [https://pivotal.io/security/cve-2018-11040](https://pivotal.io/security/cve-2018-11040)"
        },
        {
            "cve": "CVE-2022-23305",
            "remediation": "There is no non-vulnerable upgrade path for `log4j` 1.x. We recommend upgrading to `log4j` 2.x, which introduced a `JDBCAppender` that makes use of prepared statements and parameterization to protect against SQL Injection. Alternatively, this vulnerability can be mitigated in `log4j` 1.x by removing all usages of the `JDBCAppender` from the application's configuration. \n\nReference: [https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y](https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y)"
        },
        {
            "cve": "CVE-2022-23307",
            "remediation": "There is no non-vulnerable upgrade path for for `log4j` 1.x. We recommend upgrading to `log4j` 2.x and Apache Chainsaw 2.1.0. Alternatively, do not configure Chainsaw to read serialized log events. Use a different receiver, such as `XMLSocketReceiver`.\n\nReference:\n[https://www.mail-archive.com/announce@apache.org/msg07042.html](https://www.mail-archive.com/announce@apache.org/msg07042.html)\n[https://lists.apache.org/thread/rx0hpjow5csq05r93cyvntj9ry19tm9y](https://lists.apache.org/thread/rx0hpjow5csq05r93cyvntj9ry19tm9y)"
        },
        {
            "cve": "CVE-2015-0254",
            "remediation": "\nNote for the fixed version(s):\n```\nThis version uses JAXP's FEATURE_SECURE_PROCESSING to restrict XML processing. Depending on the Java runtime version in use, additional configuration may be required:\nJava8: External entity access is automatically disabled if a SecurityManager is active.\nJava7: JAXP properties may need to be used to disable external access. See http://docs.oracle.com/javase/tutorial/jaxp/properties/properties.html\nJava6 and earlier: A new system property org.apache.taglibs.standard.xml.accessExternalEntity\nmay be used to specify the protocols that can be used to access external entities. This defaults\nto \"all\" if no SecurityManager is present and to \"\" (thereby disabling access) if\na SecurityManager is detected.\n```\nReference: [http://mail-archives.apache.org/mod_mbox/tomcat-taglibs-user/201502.mbox/%3C82207A16-6348-4DEE-877E-F7B87292576A%40apache.org%3E](http://mail-archives.apache.org/mod_mbox/tomcat-taglibs-user/201502.mbox/%3C82207A16-6348-4DEE-877E-F7B87292576A%40apache.org%3E)"
        },
        {
            "cve": "CVE-2021-33813",
            "remediation": "If upgrading is not a viable option the project has also provided a workaround. \n```\nAs a workaround, to avoid external entities being expanded, one can call builder.setExpandEntities(false)\n```\nReference: [https://github.com/advisories/GHSA-2363-cqg2-863c](https://github.com/advisories/GHSA-2363-cqg2-863c)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2016-3092",
            "remediation": "\n**Workaround:**\n\n> 1\\. All users of Apache Struts should replace the copy of Commons\n>\n> 2\\. System administrators should restrict the permitted maximum size of HTTP request header values (For example, Apache Httpd provides a LimitRequestFieldSize directive and Apache Tomcat provides a maxHttpHeaderSize attribute in their respective configuration files). A maximum header value size of 2048 bytes would block all dangerous request.\n>\n> Example:\n> File upload requests contain a so-called boundary in the Content-Type header:\n>\n> ```\n> Content-Type: multipart/mixed;\n> boundary=gc0p4Jq0M2Yt08jU534c0p\n> ```\n>\n> The boundary may be chosen by the request sender. In the case of previous versions of Apache Commons Fileupload the boundary becomes dangerous if its size is close to 4096 bytes.\n\nReference: [http://mail-archives.apache.org/mod_mbox/www-announce/201606.mbox/%3C45A20804-ABFF-4FED-A297-69AC95AB9A3F@apache.org%3E](http://mail-archives.apache.org/mod_mbox/www-announce/201606.mbox/%3C45A20804-ABFF-4FED-A297-69AC95AB9A3F@apache.org%3E)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2020-1938",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling the AJP connector via the `conf/server.xml` configuration file.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2022-22965",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. \n\nThe Spring project has [released guidance on applying a workaround](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement) for those who are unable to upgrade.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "sonatype-2022-1764",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. \n\nThe Spring project has [released guidance on applying a workaround](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement) for those who are unable to upgrade.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-21290",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by following the workarounds provided by the project:\n\n>>>Specify your own java.io.tmpdir when you start the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.\n\nReference: [https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2](https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "sonatype-2020-0026",
            "remediation": "There is no non-vulnerable upgrade path for this component/package. We recommend investigating alternative components or a potential mitigating control. \n\nPer the vendor documentation, \"if you create SslHandler for the client side and want proper security, we advice that you configure the SSLEngine (see SSLParameters.setEndpointIdentificationAlgorithm(String)):\"\n\n ```\nSSLEngine sslEngine = sslHandler.engine();\n SSLParameters sslParameters = sslEngine.getSSLParameters();\n // only available since Java 7\n sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n sslEngine.setSSLParameters(sslParameters);\n```\nReference: [https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-](https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-)"
        },
        {
            "cve": "CVE-2020-26217",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue and implementing XStream's Security Framework with an `allow-list`.  \n\nAlternatively, a workaround has been provided at: [https://github.com/x-stream/xstream/security/advisories/GHSA-mw36-7c6c-q4q2](https://github.com/x-stream/xstream/security/advisories/GHSA-mw36-7c6c-q4q2)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2020-26258",
            "remediation": "\nMitigation: Follow the `Workaround` instructions in this [reference](https://x-stream.github.io/CVE-2020-26258.html#workaround) depending on the version of `xstream` utilized and define a default deny list with the `jdk.nashorn.internal.objects.NativeString` string and `.*\\\\.ReadAllStream\\\\$FileStream` regular expression option to disable the feature. We also recommend following the advice made by the project developers to define a whitelist with the security framework as discussed [here](https://x-stream.github.io/security.html#framework).\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control.\n\n*References*: \n\n[https://x-stream.github.io/CVE-2020-26259.html](https://x-stream.github.io/CVE-2020-26259.html)\n\n[https://x-stream.github.io/security.html#framework](https://x-stream.github.io/security.html#framework)"
        },
        {
            "cve": "CVE-2020-26259",
            "remediation": "\nMitigation: Follow the `Workaround` instructions in this [reference](https://x-stream.github.io/CVE-2020-26259.html#workaround) depending on the version of `xstream` utilized and define a default deny list with the `jdk.nashorn.internal.objects.NativeString` string and `.*\\\\.ReadAllStream\\\\$FileStream` regular expression option to disable the feature. We also recommend following the advice made by the project developers to define a whitelist with the security framework as discussed [here](https://x-stream.github.io/security.html#framework).\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control.\n\n*References*: \n\n[https://x-stream.github.io/CVE-2020-26259.html](https://x-stream.github.io/CVE-2020-26259.html)\n\n[https://x-stream.github.io/security.html#framework](https://x-stream.github.io/security.html#framework)"
        },
        {
            "cve": "CVE-2021-21341",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided the following workaround:\n\n>As recommended, use XStream's security framework to implement a whitelist for the allowed types. This is possible since XStream 1.4.7 and it is the default since XStream 1.4.18.\n>\n>Users of XStream 1.4.15 should add these lines and additionally the lines for version 1.4.16 and 1.4.17:\n>```\n>xstream.denyTypes(new String[]{ \"sun.awt.datatransfer.DataTransferer$IndexOrderComparator\", \"com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator\" });\n>xstream.denyTypesByRegExp(new String[]{ \".*\\\\$ServiceNameIterator\", \"(javax|sun.swing)\\\\..*LazyValue\",\"javafx\\\\.collections\\\\.ObservableList\\\\$.*\", \".*\\\\.bcel\\\\..*\\\\.util\\\\.ClassLoader\" });\n>xstream.denyTypeHierarchy(java.io.InputStream.class );\n>xstream.denyTypeHierarchy(java.nio.channels.Channel.class );\n>xstream.denyTypeHierarchy(javax.activation.DataSource.class );\n>xstream.denyTypeHierarchy(javax.sql.rowset.BaseRowSet.class );\n>```\n\nReference: [https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-21342",
            "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-21343",
            "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-21344",
            "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-21345",
            "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-21346",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Furthermore, as a good general security practice and possible workaround if using XStream version 1.4.7 and above, we recommend setting up an allow list, as opposed to the default deny list, per the [developer's instructions](https://x-stream.github.io/security.html#framework).\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-21347",
            "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-21348",
            "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-21349",
            "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-21350",
            "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-21351",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided the following workaround:\n\n>As recommended, use XStream's security framework to implement a whitelist for the allowed types. This is possible since XStream 1.4.7 and it is the default since XStream 1.4.18.\n>\n>Users of XStream 1.4.15 should add these lines and additionally the lines for version 1.4.16 and 1.4.17:\n>```\n>xstream.denyTypes(new String[]{ \"sun.awt.datatransfer.DataTransferer$IndexOrderComparator\", \"com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator\" });\n>xstream.denyTypesByRegExp(new String[]{ \".*\\\\$ServiceNameIterator\", \"(javax|sun.swing)\\\\..*LazyValue\",\"javafx\\\\.collections\\\\.ObservableList\\\\$.*\", \".*\\\\.bcel\\\\..*\\\\.util\\\\.ClassLoader\" });\n>xstream.denyTypeHierarchy(java.io.InputStream.class );\n>xstream.denyTypeHierarchy(java.nio.channels.Channel.class );\n>xstream.denyTypeHierarchy(javax.activation.DataSource.class );\n>xstream.denyTypeHierarchy(javax.sql.rowset.BaseRowSet.class );\n>```\n\nReference: [https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-43859",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided the following workaround(s):\n\n>If your object graph does not use [the above] referenced elements at all, you may simply set the `NO_REFERENCE` mode:\n>\n>```\n>XStream xstream = new XStream();\n>xstream.setMode(XStream.NO_REFERENCES);\n>```\n>If your object graph contains neither a Hashtable, HashMap nor a HashSet (or one of the linked variants of it) then you can use the security framework to deny the usage of these types:\n>\n>```\n>XStream xstream = new XStream();\n>xstream.denyTypes(new Class[]{\n> java.util.HashMap.class, java.util.HashSet.class, java.util.Hashtable.class, java.util.LinkedHashMap.class, java.util.LinkedHashSet.class\n>});\n>```\n>Unfortunately these types are very common. If you only use `HashMap` or `HashSet` and your XML refers these only as default map or set, you may additionally change the default implementation of `java.util.Map` and `java.util.Set` at unmarshalling time:\n>\n>```\n>xstream.addDefaultImplementation(java.util.TreeMap.class, java.util.Map.class);\n>xstream.addDefaultImplementation(java.util.TreeSet.class, java.util.Set.class);\n>```\n>However, this implies that your application does not care about the implementation of the map and all elements are comparable.\n\nReference: [https://github.com/x-stream/xstream/security/advisories/GHSA-rmr5-cpv2-vgjf](https://github.com/x-stream/xstream/security/advisories/GHSA-rmr5-cpv2-vgjf)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2018-11040",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Since the fixed versions only deprecate the vulnerable functionality, we also recommend discontinuing usage of the `MappingJackson2JsonView` class.\n\nNote:\n> Applications that do require JSONP support will need to explicitly configure the jsonpParameterNames property of MappingJacksonJsonView following the upgrade. It is recommended that applications switch to using CORS instead of JSONP to enable cross-domain requests. JSONP support in the Spring Framework is deprecated as of 5.0.7 and 4.3.18 and will be removed in 5.1.\n\nReference: [https://pivotal.io/security/cve-2018-11040](https://pivotal.io/security/cve-2018-11040)"
        },
        {
            "cve": "CVE-2017-3523",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue and ensuring the `autoDeserialize` flag is not set.\nIf upgrading in not a viable option an workaround has been included in the original advisory:\n```\nThis vulnerability can be mitigated on older versions by ensuring the flags\n\"autoDeserialize\" and \"useServerPrepStmts\" are not set.\n```\nReference:[https://www.computest.nl/advisories/CT-2017-0425_MySQL-Connector-J.txt](https://www.computest.nl/advisories/CT-2017-0425_MySQL-Connector-J.txt)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2020-25638",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling SQL comments:\n\n>An upgrade is recommended, but if you are using a very old version which makes it difficult to upgrade to the latest supported versions (series 5.4 and 5.3 at time of writing this), you can disable SQL comments by setting:<br><br>\n`hibernate.use_sql_comments=false` <br><br>\nThis also is the default, so if you didn't set the use_sql_comments at all you are not affected.\n\nReference: [https://hibernate.atlassian.net/browse/HHH-14225](https://hibernate.atlassian.net/browse/HHH-14225)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2017-7525",
            "remediation": "*Update*: As of version 2.10.0, Jackson now provides a safe default typing solution that fully mitigates this vulnerability.\n\nReference: [https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2](https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2)\n\nIn order to mitigate this vulnerability, we recommend upgrading to at least version 2.10.0 and changing any usages of `enableDefaultTyping()` to `activateDefaultTyping()`.\n\nAlternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling default typing. Instead, you will need to implement your own:\n\n>It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers.\n\nReference: [https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n\nExamples of implementing your own typing can be found by looking at [Spring Security's fix](https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439) or [this Stack Overflow article](https://stackoverflow.com/questions/12353774/how-to-customize-jackson-type-information-mechanism)."
        },
        {
            "cve": "CVE-2021-21290",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by following the workarounds provided by the project:\n\n>>>Specify your own java.io.tmpdir when you start the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.\n\nReference: [https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2](https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-44832",
            "remediation": "\n*Mitigating controls from project advisory:*\n\n```\n* Upgrade to Log4j 2.3.2 (for Java 6), 2.12.4 (for Java 7), or 2.17.1 (for Java 8 and later).\n\n* In prior releases confirm that if the JDBC Appender is being used it is not configured to use any protocol other than Java.\n\n* Note that only the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted by this vulnerability.\n\n* Also note that Apache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net and Log4cxx are not impacted by this.\n```\n\nReference: [https://logging.apache.org/log4j/2.x/security.html](https://logging.apache.org/log4j/2.x/security.html)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-45105",
            "remediation": "\nMitigating controls from the project advisory:\n```\nUpgrade to Log4j 2.3.1 (for Java 6), 2.12.3 (for Java 7), or 2.17.0 (for Java 8 and later).\n\nAlternatively, this infinite recursion issue can be mitigated in configuration:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like ${ctx:loginId} or $${ctx:loginId} with Thread Context Map patterns (%X, %mdc, or %MDC).\n* Otherwise, in the configuration, remove references to Context Lookups like ${ctx:loginId} or $${ctx:loginId} where they originate from sources external to the application such as HTTP headers or user input.\n```\n\nReference: [https://logging.apache.org/log4j/2.x/security.html](https://logging.apache.org/log4j/2.x/security.html)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "sonatype-2020-0026",
            "remediation": "There is no non-vulnerable upgrade path for this component/package. We recommend investigating alternative components or a potential mitigating control. \n\nPer the vendor documentation, \"if you create SslHandler for the client side and want proper security, we advice that you configure the SSLEngine (see SSLParameters.setEndpointIdentificationAlgorithm(String)):\"\n\n ```\nSSLEngine sslEngine = sslHandler.engine();\n SSLParameters sslParameters = sslEngine.getSSLParameters();\n // only available since Java 7\n sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n sslEngine.setSSLParameters(sslParameters);\n```\nReference: [https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-](https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-)"
        }
    ]
}