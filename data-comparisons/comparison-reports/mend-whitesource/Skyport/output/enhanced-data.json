{"TotalDescriptions": 418, "Descriptions": [{"displayName": "getobject : 0.1.0", "cve": "CVE-2020-28282", "description": "Prototype pollution vulnerability in 'getobject' version 0.1.0 allows an attacker to cause a denial of service and may lead to remote code execution."}, {"displayName": "commons-fileupload : commons-fileupload : 1.3.3", "cve": "CVE-2023-24998", "description": "Apache Commons FileUpload before 1.5 does not limit the number of request parts to be processed resulting in the possibility of an attacker triggering a DoS with a malicious upload or series of uploads.\n\n\n\n\nNote that, like all of the file upload limits, the\n          new configuration option (FileUploadBase#setFileCountMax) is not\n          enabled by default and must be explicitly configured.\n\n\n"}, {"displayName": "webpack-dev-middleware : 3.7.3", "cve": "CVE-2024-29180", "description": "Prior to versions 7.1.0, 6.1.2, and 5.3.4, the webpack-dev-middleware development middleware for devpack does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine. The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory `memfs` filesystem. If `writeToDisk` configuration option is set to `true`, the physical filesystem is used. The `getFilenameFromUrl` method is used to parse URL and build the local file path. The public path prefix is stripped from the URL, and the `unsecaped` path suffix is appended to the `outputPath`. As the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use `%2e` and `%2f` sequences to perform path traversal attack.\n\nDevelopers using `webpack-dev-server` or `webpack-dev-middleware` are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content. If the development server is listening on a public IP address (or `0.0.0.0`), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port). If the server allows access from third-party domains, an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files. Starting with fixed versions 7.1.0, 6.1.2, and 5.3.4, the URL is unescaped and normalized before any further processing."}, {"displayName": "com.squareup.okio : okio-jvm : 3.0.0", "cve": "CVE-2023-3635", "description": "GzipSource does not handle an exception that might be raised when parsing a malformed gzip buffer. This may lead to denial of service of the Okio client when handling a crafted GZIP archive, by using the GzipSource class.\n\n"}, {"displayName": "org.springframework : spring-aop : 1.2.8", "cve": "CVE-2009-1190", "description": "Algorithmic complexity vulnerability in the java.util.regex.Pattern.compile method in Sun Java Development Kit (JDK) before 1.6, when used with spring.jar in SpringSource Spring Framework 1.1.0 through 2.5.6 and 3.0.0.M1 through 3.0.0.M2 and dm Server 1.0.0 through 1.0.2, allows remote attackers to cause a denial of service (CPU consumption) via serializable data with a long regex string containing multiple optional groups, a related issue to CVE-2004-2540."}, {"displayName": "org.eclipse.jetty : jetty-servlet : 9.3.21.v20170918", "cve": "CVE-2018-12536", "description": "In Eclipse Jetty Server, all 9.x versions, on webapps deployed using default Error Handling, when an intentionally bad query arrives that doesn't match a dynamic url-pattern, and is eventually handled by the DefaultServlet's static file serving, the bad characters can trigger a java.nio.file.InvalidPathException which includes the full path to the base resource directory that the DefaultServlet and/or webapp is using. If this InvalidPathException is then handled by the default Error Handler, the InvalidPathException message is included in the error response, revealing the full server path to the requesting system."}, {"displayName": "org.eclipse.jetty : jetty-servlet : 9.3.21.v20170918", "cve": "CVE-2019-10241", "description": "In Eclipse Jetty version 9.2.26 and older, 9.3.25 and older, and 9.4.15 and older, the server is vulnerable to XSS conditions if a remote client USES a specially formatted URL against the DefaultServlet or ResourceHandler that is configured for showing a Listing of directory contents."}, {"displayName": "org.hibernate : hibernate-core : 5.3.4.Final", "cve": "CVE-2019-14900", "description": "A flaw was found in Hibernate ORM in versions before 5.3.18, 5.4.18 and 5.5.0.Beta1. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SELECT or GROUP BY parts of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks."}, {"displayName": "org.hibernate : hibernate-core : 5.3.4.Final", "cve": "CVE-2020-25638", "description": "A flaw was found in hibernate-core in versions prior to and including 5.4.23.Final. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SQL comments of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks. The highest threat from this vulnerability is to data confidentiality and integrity."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.10.0", "cve": "CVE-2020-25649", "description": "A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.10.0", "cve": "CVE-2020-36518", "description": "jackson-databind before 2.13.0 allows a Java StackOverflow exception and denial of service via a large depth of nested objects."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.10.0", "cve": "CVE-2022-42003", "description": "In FasterXML jackson-databind before versions 2.13.4.1 and 2.12.17.1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.10.0", "cve": "CVE-2022-42004", "description": "In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization."}, {"displayName": "grunt-template-jasmine-requirejs : 0.2.3", "cve": "CVE-2024-38998", "description": "jrburke requirejs v2.3.6 was discovered to contain a prototype pollution via the function config. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties."}, {"displayName": "typescript : 4.0.3", "cve": "CVE-2021-1639", "description": "Visual Studio Code Remote Code Execution Vulnerability"}, {"displayName": "io.netty : netty-codec : 4.1.70.Final", "cve": "CVE-2022-41915", "description": "Netty project is an event-driven asynchronous network application framework. Starting in version 4.1.83.Final and prior to 4.1.86.Final, when calling `DefaultHttpHeadesr.set` with an _iterator_ of values, header value validation was not performed, allowing malicious header values in the iterator to perform HTTP Response Splitting. This issue has been patched in version 4.1.86.Final. Integrators can work around the issue by changing the `DefaultHttpHeaders.set(CharSequence, Iterator<?>)` call, into a `remove()` call, and call `add()` in a loop over the iterator of values."}, {"displayName": "ch.qos.logback : logback-core : 1.2.12", "cve": "CVE-2023-6378", "description": "A serialization vulnerability in logback receiver component part of \nlogback version 1.4.11 allows an attacker to mount a Denial-Of-Service \nattack by sending poisoned data.\n\n"}, {"displayName": "org.springframework : spring-messaging : 4.3.11.RELEASE", "cve": "CVE-2018-1275", "description": "Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.16 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack. This CVE addresses the partial fix for CVE-2018-1270 in the 4.3.x branch of the Spring Framework."}, {"displayName": "org.springframework : spring-messaging : 4.3.11.RELEASE", "cve": "CVE-2022-22971", "description": "In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, application with a STOMP over WebSocket endpoint is vulnerable to a denial of service attack by an authenticated user."}, {"displayName": "loader-utils : 1.2.3", "cve": "CVE-2022-37599", "description": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the resourcePath variable in interpolateName.js."}, {"displayName": "loader-utils : 1.2.3", "cve": "CVE-2022-37601", "description": "Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils via the name variable in parseQuery.js. This affects all versions prior to 1.4.1 and 2.0.3."}, {"displayName": "loader-utils : 1.2.3", "cve": "CVE-2022-37603", "description": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js."}, {"displayName": "com.nimbusds : nimbus-jose-jwt : 9.31", "cve": "CVE-2023-52428", "description": "In Connect2id Nimbus JOSE+JWT before 9.37.2, an attacker can cause a denial of service (resource consumption) via a large JWE p2c header value (aka iteration count) for the PasswordBasedDecrypter (PBKDF2) component."}, {"displayName": "org.apache.poi : poi-ooxml : 3.8", "cve": "CVE-2014-3529", "description": "The OPC SAX setup in Apache POI before 3.10.1 allows remote attackers to read arbitrary files via an OpenXML file containing an XML external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue."}, {"displayName": "org.apache.poi : poi-ooxml : 3.8", "cve": "CVE-2014-3574", "description": "Apache POI before 3.10.1 and 3.11.x before 3.11-beta2 allows remote attackers to cause a denial of service (CPU consumption and crash) via a crafted OOXML file, aka an XML Entity Expansion (XEE) attack."}, {"displayName": "org.apache.poi : poi-ooxml : 3.8", "cve": "CVE-2017-5644", "description": "Apache POI in versions prior to release 3.15 allows remote attackers to cause a denial of service (CPU consumption) via a specially crafted OOXML file, aka an XML Entity Expansion (XEE) attack."}, {"displayName": "org.apache.poi : poi-ooxml : 3.8", "cve": "CVE-2019-12415", "description": "In Apache POI up to 4.1.0, when using the tool XSSFExportToXml to convert user-provided Microsoft Excel documents, a specially crafted document can allow an attacker to read files from the local filesystem or from internal network resources via XML External Entity (XXE) Processing."}, {"displayName": "org.springframework : spring-web : 1.2.8", "cve": "CVE-2011-2730", "description": "VMware SpringSource Spring Framework before 2.5.6.SEC03, 2.5.7.SR023, and 3.x before 3.0.6, when a container supports Expression Language (EL), evaluates EL expressions in tags twice, which allows remote attackers to obtain sensitive information via a (1) name attribute in a (a) spring:hasBindErrors tag; (2) path attribute in a (b) spring:bind or (c) spring:nestedpath tag; (3) arguments, (4) code, (5) text, (6) var, (7) scope, or (8) message attribute in a (d) spring:message or (e) spring:theme tag; or (9) var, (10) scope, or (11) value attribute in a (f) spring:transform tag, aka \"Expression Language Injection.\""}, {"displayName": "org.springframework : spring-web : 1.2.8", "cve": "CVE-2013-6430", "description": "The JavaScriptUtils.javaScriptEscape method in web/util/JavaScriptUtils.java in Spring MVC in Spring Framework before 3.2.2 does not properly escape certain characters, which allows remote attackers to conduct cross-site scripting (XSS) attacks via a (1) line separator or (2) paragraph separator Unicode character or (3) left or (4) right angle bracket."}, {"displayName": "mysql : mysql-connector-java : 5.1.37", "cve": "CVE-2017-3523", "description": "Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 5.1.40 and earlier. Difficult to exploit vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. While the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.5 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H)."}, {"displayName": "mysql : mysql-connector-java : 5.1.37", "cve": "CVE-2017-3586", "description": "Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 5.1.41 and earlier. Easily \"exploitable\" vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. While the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Connectors accessible data as well as unauthorized read access to a subset of MySQL Connectors accessible data. CVSS 3.0 Base Score 6.4 (Confidentiality and Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N)."}, {"displayName": "mysql : mysql-connector-java : 5.1.37", "cve": "CVE-2017-3589", "description": "Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 5.1.41 and earlier. Easily \"exploitable\" vulnerability allows low privileged attacker with logon to the infrastructure where MySQL Connectors executes to compromise MySQL Connectors. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Connectors accessible data. CVSS 3.0 Base Score 3.3 (Integrity impacts). CVSS Vector: (CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N)."}, {"displayName": "mysql : mysql-connector-java : 5.1.37", "cve": "CVE-2018-3258", "description": "Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 8.0.12 and prior. Easily exploitable vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.8 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)."}, {"displayName": "mysql : mysql-connector-java : 5.1.37", "cve": "CVE-2019-2692", "description": "Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 8.0.15 and prior. Difficult to exploit vulnerability allows high privileged attacker with logon to the infrastructure where MySQL Connectors executes to compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 6.3 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:H/I:H/A:H)."}, {"displayName": "mysql : mysql-connector-java : 5.1.37", "cve": "CVE-2020-2934", "description": "Vulnerability in the MySQL Connectors product of Oracle MySQL (component: Connector/J). Supported versions that are affected are 8.0.19 and prior and 5.1.48 and prior. Difficult to exploit vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Connectors accessible data as well as unauthorized read access to a subset of MySQL Connectors accessible data and unauthorized ability to cause a partial denial of service (partial DOS) of MySQL Connectors. CVSS 3.0 Base Score 5.0 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L)."}, {"displayName": "mysql : mysql-connector-java : 5.1.37", "cve": "CVE-2022-21363", "description": "Vulnerability in the MySQL Connectors product of Oracle MySQL (component: Connector/J). Supported versions that are affected are 8.0.27 and prior. Difficult to exploit vulnerability allows high privileged attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.1 Base Score 6.6 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H)."}, {"displayName": "org.yaml : snakeyaml : 1.33", "cve": "CVE-2022-1471", "description": "SnakeYaml's Constructor() class does not restrict types which can be instantiated during deserialization.\u00a0Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml's SafeConsturctor when parsing untrusted content to restrict deserialization. We recommend upgrading to version 2.0 and beyond.\n"}, {"displayName": "org.apache.httpcomponents : httpclient : 4.5.4", "cve": "CVE-2020-13956", "description": "Apache HttpClient versions prior to version 4.5.13 and 5.0.3 can misinterpret malformed authority component in request URIs passed to the library as java.net.URI object and pick the wrong target host for request execution."}, {"displayName": "org.mybatis : mybatis : 3.4.4", "cve": "CVE-2020-26945", "description": "MyBatis before 3.5.6 mishandles deserialization of object streams."}, {"displayName": "path-to-regexp : 6.2.2", "cve": "CVE-2024-45296", "description": "path-to-regexp turns path strings into a regular expressions. In certain cases, path-to-regexp will output a regular expression that can be exploited to cause poor performance. Because JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and lead to a DoS. The bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (.). For users of 0.1, upgrade to 0.1.10. All other users should upgrade to 8.0.0."}, {"displayName": "node-forge : 0.10.0", "cve": "CVE-2022-0122", "description": "forge is vulnerable to URL Redirection to Untrusted Site"}, {"displayName": "node-forge : 0.10.0", "cve": "CVE-2022-24771", "description": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."}, {"displayName": "node-forge : 0.10.0", "cve": "CVE-2022-24772", "description": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."}, {"displayName": "node-forge : 0.10.0", "cve": "CVE-2022-24773", "description": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not properly check `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."}, {"displayName": "micromatch : 4.0.7", "cve": "CVE-2024-4067", "description": "The NPM package `micromatch` prior to 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persists. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching. This issue was fixed in version 4.0.8."}, {"displayName": "org.codehaus.castor : castor : 1.2", "cve": "CVE-2014-3004", "description": "The default configuration for the Xerces SAX Parser in Castor before 1.3.3 allows context-dependent attackers to conduct XML External Entity (XXE) attacks via a crafted XML document."}, {"displayName": "org.apache.camel : camel-spring : 2.20.0", "cve": "CVE-2020-11971", "description": "Apache Camel's JMX is vulnerable to Rebind Flaw. Apache Camel 2.22.x, 2.23.x, 2.24.x, 2.25.x, 3.0.0 up to 3.1.0 is affected. Users should upgrade to 3.2.0."}, {"displayName": "org.yaml : snakeyaml : 1.15", "cve": "CVE-2017-18640", "description": "The Alias feature in SnakeYAML before 1.26 allows entity expansion during a load operation, a related issue to CVE-2003-1564."}, {"displayName": "org.yaml : snakeyaml : 1.15", "cve": "CVE-2022-1471", "description": "SnakeYaml's Constructor() class does not restrict types which can be instantiated during deserialization.\u00a0Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml's SafeConsturctor when parsing untrusted content to restrict deserialization. We recommend upgrading to version 2.0 and beyond.\n"}, {"displayName": "org.yaml : snakeyaml : 1.15", "cve": "CVE-2022-25857", "description": "The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections."}, {"displayName": "org.yaml : snakeyaml : 1.15", "cve": "CVE-2022-38749", "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."}, {"displayName": "org.yaml : snakeyaml : 1.15", "cve": "CVE-2022-38750", "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."}, {"displayName": "org.yaml : snakeyaml : 1.15", "cve": "CVE-2022-38751", "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."}, {"displayName": "org.yaml : snakeyaml : 1.15", "cve": "CVE-2022-38752", "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow."}, {"displayName": "org.yaml : snakeyaml : 1.15", "cve": "CVE-2022-41854", "description": "Those using Snakeyaml to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack."}, {"displayName": "io.netty : netty-codec-http : 4.0.52.Final", "cve": "CVE-2019-16869", "description": "Netty before 4.1.42.Final mishandles whitespace before the colon in HTTP headers (such as a \"Transfer-Encoding : chunked\" line), which leads to HTTP request smuggling."}, {"displayName": "io.netty : netty-codec-http : 4.0.52.Final", "cve": "CVE-2019-20444", "description": "HttpObjectDecoder.java in Netty before 4.1.44 allows an HTTP header that lacks a colon, which might be interpreted as a separate header with an incorrect syntax, or might be interpreted as an \"invalid fold.\""}, {"displayName": "io.netty : netty-codec-http : 4.0.52.Final", "cve": "CVE-2019-20445", "description": "HttpObjectDecoder.java in Netty before 4.1.44 allows a Content-Length header to be accompanied by a second Content-Length header, or by a Transfer-Encoding header."}, {"displayName": "io.netty : netty-codec-http : 4.0.52.Final", "cve": "CVE-2020-7238", "description": "Netty 4.1.43.Final allows HTTP Request Smuggling because it mishandles Transfer-Encoding whitespace (such as a [space]Transfer-Encoding:chunked line) and a later Content-Length header. This issue exists because of an incomplete fix for CVE-2019-16869."}, {"displayName": "io.netty : netty-codec-http : 4.0.52.Final", "cve": "CVE-2021-21290", "description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty before version 4.1.59.Final there is a vulnerability on Unix-like systems involving an insecure temp file. When netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. On unix-like systems, the temporary directory is shared between all user. As such, writing to this directory using APIs that do not explicitly set the file/directory permissions can lead to information disclosure. Of note, this does not impact modern MacOS Operating Systems. The method \"File.createTempFile\" on unix-like systems creates a random file, but, by default will create this file with the permissions \"-rw-r--r--\". Thus, if sensitive information is written to this file, other local users can read this information. This is the case in netty's \"AbstractDiskHttpData\" is vulnerable. This has been fixed in version 4.1.59.Final. As a workaround, one may specify your own \"java.io.tmpdir\" when you start the JVM or use \"DefaultHttpDataFactory.setBaseDir(...)\" to set the directory to something that is only readable by the current user."}, {"displayName": "io.netty : netty-codec-http : 4.0.52.Final", "cve": "CVE-2021-21295", "description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty (io.netty:netty-codec-http2) before version 4.1.60.Final there is a vulnerability that enables request smuggling. If a Content-Length header is present in the original HTTP/2 request, the field is not validated by `Http2MultiplexHandler` as it is propagated up. This is fine as long as the request is not proxied through as HTTP/1.1. If the request comes in as an HTTP/2 stream, gets converted into the HTTP/1.1 domain objects (`HttpRequest`, `HttpContent`, etc.) via `Http2StreamFrameToHttpObjectCodec `and then sent up to the child channel's pipeline and proxied through a remote peer as HTTP/1.1 this may result in request smuggling. In a proxy case, users may assume the content-length is validated somehow, which is not the case. If the request is forwarded to a backend channel that is a HTTP/1.1 connection, the Content-Length now has meaning and needs to be checked. An attacker can smuggle requests inside the body as it gets downgraded from HTTP/2 to HTTP/1.1. For an example attack refer to the linked GitHub Advisory. Users are only affected if all of this is true: `HTTP2MultiplexCodec` or `Http2FrameCodec` is used, `Http2StreamFrameToHttpObjectCodec` is used to convert to HTTP/1.1 objects, and these HTTP/1.1 objects are forwarded to another remote peer. This has been patched in 4.1.60.Final As a workaround, the user can do the validation by themselves by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`."}, {"displayName": "io.netty : netty-codec-http : 4.0.52.Final", "cve": "CVE-2021-43797", "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. Netty prior to version 4.1.71.Final skips control chars when they are present at the beginning / end of the header name. It should instead fail fast as these are not allowed by the spec and could lead to HTTP request smuggling. Failing to do the validation might cause netty to \"sanitize\" header names before it forward these to another remote system when used as proxy. This remote system can't see the invalid usage anymore, and therefore does not do the validation itself. Users should upgrade to version 4.1.71.Final."}, {"displayName": "io.netty : netty-codec-http : 4.0.52.Final", "cve": "CVE-2024-29025", "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final."}, {"displayName": "google-closure-compiler : 20150901.0.0", "cve": "CVE-2018-10237", "description": "Unbounded memory allocation in Google Guava 11.0 through 24.x before 24.1.1 allows remote attackers to conduct denial of service attacks against servers that depend on this library and deserialize attacker-provided data, because the AtomicDoubleArray class (when serialized with Java serialization) and the CompoundOrdering class (when serialized with GWT serialization) perform eager allocation without appropriate checks on what a client has sent and whether the data size is reasonable."}, {"displayName": "google-closure-compiler : 20150901.0.0", "cve": "CVE-2021-22569", "description": "An issue in protobuf-java allowed the interleaving of com.google.protobuf.UnknownFieldSet fields in such a way that would be processed out of order. A small malicious payload can occupy the parser for several minutes by creating large numbers of short-lived objects that cause frequent, repeated pauses. We recommend upgrading libraries beyond the vulnerable versions."}, {"displayName": "google-closure-compiler : 20150901.0.0", "cve": "CVE-2022-3509", "description": "A parsing issue similar to CVE-2022-3171, but with textformat in protobuf-java core and lite versions prior to 3.21.7, 3.20.3, 3.19.6 and 3.16.3 can lead to a denial of service attack. Inputs containing multiple instances of non-repeated embedded messages with repeated or unknown fields causes objects to be converted back-n-forth between mutable and immutable forms, resulting in potentially long garbage collection pauses. We recommend updating to the versions mentioned above."}, {"displayName": "google-closure-compiler : 20150901.0.0", "cve": "CVE-2023-2976", "description": "Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class.\n\nEven though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.\n\n"}, {"displayName": "axios : 0.19.2", "cve": "CVE-2020-28168", "description": "Axios NPM package 0.21.0 contains a Server-Side Request Forgery (SSRF) vulnerability where an attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address."}, {"displayName": "axios : 0.19.2", "cve": "CVE-2021-3749", "description": "axios is vulnerable to Inefficient Regular Expression Complexity"}, {"displayName": "axios : 0.19.2", "cve": "CVE-2023-45857", "description": "An issue discovered in Axios 1.5.1 inadvertently reveals the confidential XSRF-TOKEN stored in cookies by including it in the HTTP header X-XSRF-TOKEN for every request made to any host allowing attackers to view sensitive information."}, {"displayName": "net.sf.jasperreports : jasperreports : 5.2.0", "cve": "CVE-2017-14941", "description": "Jaspersoft JasperReports 4.7 suffers from a saved credential disclosure vulnerability, which allows a remote authenticated user to retrieve stored Data Source passwords by accessing flow.html and reading the HTML source code of the page reached in an Edit action for a Data Source connector."}, {"displayName": "net.sf.jasperreports : jasperreports : 5.2.0", "cve": "CVE-2017-5528", "description": "Multiple JasperReports Server components contain vulnerabilities which may allow authorized users to perform cross-site scripting (XSS) and cross-site request forgery (CSRF) attacks.  The impact of this vulnerability includes the theoretical disclosure of sensitive information.  Affects TIBCO JasperReports Server (versions 6.1.1 and below, 6.2.0, 6.2.1, and 6.3.0), TIBCO JasperReports Server Community Edition (versions 6.3.0 and below), TIBCO JasperReports Server for ActiveMatrix BPM (versions 6.2.0 and below), TIBCO Jaspersoft for AWS with Multi-Tenancy (versions 6.2.0 and below), and TIBCO Jaspersoft Reporting and Analytics for AWS (versions 6.2.0 and below)."}, {"displayName": "net.sf.jasperreports : jasperreports : 5.2.0", "cve": "CVE-2017-5529", "description": "JasperReports library components contain an information disclosure vulnerability. This vulnerability includes the theoretical disclosure of any accessible information from the host file system. Affects TIBCO JasperReports Library Community Edition (versions 6.4.0 and below), TIBCO JasperReports Library for ActiveMatrix BPM (versions 6.2.0 and below), TIBCO JasperReports Professional (versions 6.2.1 and below, and 6.3.0), TIBCO JasperReports Server (versions 6.1.1 and below, 6.2.0, 6.2.1, 6.3.0), TIBCO JasperReports Server Community Edition (versions 6.3.0 and below), TIBCO JasperReports Server for ActiveMatrix BPM (versions 6.2.0 and below), TIBCO Jaspersoft for AWS with Multi-Tenancy (versions 6.3.0 and below), TIBCO Jaspersoft Reporting and Analytics for AWS (versions 6.3.0 and below), and TIBCO Jaspersoft Studio for ActiveMatrix BPM (versions 6.2.0 and below)."}, {"displayName": "net.sf.jasperreports : jasperreports : 5.2.0", "cve": "CVE-2018-18808", "description": "The domain management component of TIBCO Software Inc.'s TIBCO JasperReports Server, TIBCO JasperReports Server Community Edition, TIBCO JasperReports Server for ActiveMatrix BPM, TIBCO Jaspersoft for AWS with Multi-Tenancy, and TIBCO Jaspersoft Reporting and Analytics for AWS contains a race-condition vulnerability that may allow any users with domain save privileges to gain superuser privileges. Affected releases are TIBCO Software Inc.'s TIBCO JasperReports Server: versions up to and including 6.3.4; 6.4.0; 6.4.1; 6.4.2; 6.4.3; 7.1.0, TIBCO JasperReports Server Community Edition: versions up to and including 7.1.0, TIBCO JasperReports Server for ActiveMatrix BPM: versions up to and including 6.4.3, TIBCO Jaspersoft for AWS with Multi-Tenancy: versions up to and including 7.1.0, and TIBCO Jaspersoft Reporting and Analytics for AWS: versions up to and including 7.1.0."}, {"displayName": "net.sf.jasperreports : jasperreports : 5.2.0", "cve": "CVE-2018-18809", "description": "The default server implementation of TIBCO Software Inc.'s TIBCO JasperReports Library, TIBCO JasperReports Library Community Edition, TIBCO JasperReports Library for ActiveMatrix BPM, TIBCO JasperReports Server, TIBCO JasperReports Server Community Edition, TIBCO JasperReports Server for ActiveMatrix BPM, TIBCO Jaspersoft for AWS with Multi-Tenancy, and TIBCO Jaspersoft Reporting and Analytics for AWS contains a directory-traversal vulnerability that may theoretically allow web server users to access contents of the host system. Affected releases are TIBCO Software Inc.'s TIBCO JasperReports Library: versions up to and including 6.3.4; 6.4.1; 6.4.2; 6.4.21; 7.1.0; 7.2.0, TIBCO JasperReports Library Community Edition: versions up to and including 6.7.0, TIBCO JasperReports Library for ActiveMatrix BPM: versions up to and including 6.4.21, TIBCO JasperReports Server: versions up to and including 6.3.4; 6.4.0; 6.4.1; 6.4.2; 6.4.3; 7.1.0, TIBCO JasperReports Server Community Edition: versions up to and including 6.4.3; 7.1.0, TIBCO JasperReports Server for ActiveMatrix BPM: versions up to and including 6.4.3, TIBCO Jaspersoft for AWS with Multi-Tenancy: versions up to and including 7.1.0, TIBCO Jaspersoft Reporting and Analytics for AWS: versions up to and including 7.1.0."}, {"displayName": "net.sf.jasperreports : jasperreports : 5.2.0", "cve": "CVE-2018-5429", "description": "A vulnerability in the report scripting component of TIBCO Software Inc.'s TIBCO JasperReports Server, TIBCO JasperReports Server Community Edition, TIBCO JasperReports Server for ActiveMatrix BPM, TIBCO JasperReports Library, TIBCO JasperReports Library Community Edition, TIBCO JasperReports Library for ActiveMatrix BPM, TIBCO Jaspersoft for AWS with Multi-Tenancy, TIBCO Jaspersoft Reporting and Analytics for AWS, TIBCO Jaspersoft Studio, TIBCO Jaspersoft Studio Community Edition, and TIBCO Jaspersoft Studio for ActiveMatrix BPM may allow analytic reports that contain scripting to perform arbitrary code execution. Affected releases include TIBCO Software Inc.'s TIBCO JasperReports Server: versions up to and including 6.2.4; 6.3.0; 6.3.2;6.3.3; 6.4.0; 6.4.2, TIBCO JasperReports Server Community Edition: versions up to and including 6.4.2, TIBCO JasperReports Server for ActiveMatrix BPM: versions up to and including 6.4.2, TIBCO JasperReports Library: versions up to and including 6.2.4; 6.3.0; 6.3.2; 6.3.3; 6.4.0; 6.4.1; 6.4.2, TIBCO JasperReports Library Community Edition: versions up to and including 6.4.3, TIBCO JasperReports Library for ActiveMatrix BPM: versions up to and including 6.4.2, TIBCO Jaspersoft for AWS with Multi-Tenancy: versions up to and including 6.4.2, TIBCO Jaspersoft Reporting and Analytics for AWS: versions up to and including 6.4.2, TIBCO Jaspersoft Studio: versions up to and including 6.2.4; 6.3.0; 6.3.2; 6.3.3; 6.4.0; 6.4.2, TIBCO Jaspersoft Studio Community Edition: versions up to and including 6.4.3, TIBCO Jaspersoft Studio for ActiveMatrix BPM: versions up to and including 6.4.2."}, {"displayName": "org.springframework : spring-context : 4.3.11.RELEASE", "cve": "CVE-2022-22968", "description": "In Spring Framework versions 5.3.0 - 5.3.18, 5.2.0 - 5.2.20, and older unsupported versions, the patterns for disallowedFields on a DataBinder are case sensitive which means a field is not effectively protected unless it is listed with both upper and lower case for the first character of the field, including upper and lower case for the first character of all nested fields within the property path."}, {"displayName": "org.webjars : jquery : 2.1.4", "cve": "CVE-2019-11358", "description": "jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution. If an unsanitized source object contained an enumerable __proto__ property, it could extend the native Object.prototype."}, {"displayName": "org.webjars : jquery : 2.1.4", "cve": "CVE-2020-11023", "description": "In jQuery versions greater than or equal to 1.0.3 and before 3.5.0, passing HTML containing <option> elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. This problem is patched in jQuery 3.5.0."}, {"displayName": "org.webjars : jquery : 2.1.4", "cve": "CVE-2020-23064", "description": "Rejected reason: DO NOT USE THIS CANDIDATE NUMBER. ConsultIDs: CVE-2020-11023. Reason: This candidate is a duplicate of CVE-2020-11023. Notes: All CVE users should reference CVE-2020-11023 instead of this candidate. All references and descriptions in this candidate have been removed to prevent accidental usage."}, {"displayName": "org.apache.camel : camel-mail : 2.20.0", "cve": "CVE-2018-8041", "description": "Apache Camel's Mail 2.20.0 through 2.20.3, 2.21.0 through 2.21.1 and 2.22.0 is vulnerable to path traversal."}, {"displayName": "babel-traverse : 6.26.0", "cve": "CVE-2023-45133", "description": "Babel is a compiler for writingJavaScript. In `@babel/traverse` prior to versions 7.23.2 and 8.0.0-alpha.4 and all versions of `babel-traverse`, using Babel to compile code that was specifically crafted by an attacker can lead to arbitrary code execution during compilation, when using plugins that rely on the `path.evaluate()`or `path.evaluateTruthy()` internal Babel methods. Known affected plugins are `@babel/plugin-transform-runtime`; `@babel/preset-env` when using its `useBuiltIns` option; and any \"polyfill provider\" plugin that depends on `@babel/helper-define-polyfill-provider`, such as `babel-plugin-polyfill-corejs3`, `babel-plugin-polyfill-corejs2`, `babel-plugin-polyfill-es-shims`, `babel-plugin-polyfill-regenerator`. No other plugins under the `@babel/` namespace are impacted, but third-party plugins might be. Users that only compile trusted code are not impacted. The vulnerability has been fixed in `@babel/traverse@7.23.2` and `@babel/traverse@8.0.0-alpha.4`. Those who cannot upgrade `@babel/traverse` and are using one of the affected packages mentioned above should upgrade them to their latest version to avoid triggering the vulnerable code path in affected `@babel/traverse` versions: `@babel/plugin-transform-runtime` v7.23.2, `@babel/preset-env` v7.23.2, `@babel/helper-define-polyfill-provider` v0.4.3, `babel-plugin-polyfill-corejs2` v0.4.6, `babel-plugin-polyfill-corejs3` v0.8.5, `babel-plugin-polyfill-es-shims` v0.10.0, `babel-plugin-polyfill-regenerator` v0.5.3."}, {"displayName": "org.codehaus.groovy : groovy-all : 2.4.3", "cve": "CVE-2015-3253", "description": "The MethodClosure class in runtime/MethodClosure.java in Apache Groovy 1.7.0 through 2.4.3 allows remote attackers to execute arbitrary code or cause a denial of service via a crafted serialized object."}, {"displayName": "org.codehaus.groovy : groovy-all : 2.4.3", "cve": "CVE-2020-17521", "description": "Apache Groovy provides extension methods to aid with creating temporary directories. Prior to this fix, Groovy's implementation of those extension methods was using a now superseded Java JDK method call that is potentially not secure on some operating systems in some contexts. Users not using the extension methods mentioned in the advisory are not affected, but may wish to read the advisory for further details. Versions Affected: 2.0 to 2.4.20, 2.5.0 to 2.5.13, 3.0.0 to 3.0.6, and 4.0.0-alpha-1. Fixed in versions 2.4.21, 2.5.14, 3.0.7, 4.0.0-alpha-2."}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2019-16869", "description": "Netty before 4.1.42.Final mishandles whitespace before the colon in HTTP headers (such as a \"Transfer-Encoding : chunked\" line), which leads to HTTP request smuggling."}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2019-20444", "description": "HttpObjectDecoder.java in Netty before 4.1.44 allows an HTTP header that lacks a colon, which might be interpreted as a separate header with an incorrect syntax, or might be interpreted as an \"invalid fold.\""}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2019-20445", "description": "HttpObjectDecoder.java in Netty before 4.1.44 allows a Content-Length header to be accompanied by a second Content-Length header, or by a Transfer-Encoding header."}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2019-9512", "description": "Some HTTP/2 implementations are vulnerable to ping floods, potentially leading to a denial of service. The attacker sends continual pings to an HTTP/2 peer, causing the peer to build an internal queue of responses. Depending on how efficiently this data is queued, this can consume excess CPU, memory, or both."}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2019-9515", "description": "Some HTTP/2 implementations are vulnerable to a settings flood, potentially leading to a denial of service. The attacker sends a stream of SETTINGS frames to the peer. Since the RFC requires that the peer reply with one acknowledgement per SETTINGS frame, an empty SETTINGS frame is almost equivalent in behavior to a ping. Depending on how efficiently this data is queued, this can consume excess CPU, memory, or both."}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2019-9518", "description": "Some HTTP/2 implementations are vulnerable to a flood of empty frames, potentially leading to a denial of service. The attacker sends a stream of frames with an empty payload and without the end-of-stream flag. These frames can be DATA, HEADERS, CONTINUATION and/or PUSH_PROMISE. The peer spends time processing each frame disproportionate to attack bandwidth. This can consume excess CPU."}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2020-7238", "description": "Netty 4.1.43.Final allows HTTP Request Smuggling because it mishandles Transfer-Encoding whitespace (such as a [space]Transfer-Encoding:chunked line) and a later Content-Length header. This issue exists because of an incomplete fix for CVE-2019-16869."}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2021-21290", "description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty before version 4.1.59.Final there is a vulnerability on Unix-like systems involving an insecure temp file. When netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. On unix-like systems, the temporary directory is shared between all user. As such, writing to this directory using APIs that do not explicitly set the file/directory permissions can lead to information disclosure. Of note, this does not impact modern MacOS Operating Systems. The method \"File.createTempFile\" on unix-like systems creates a random file, but, by default will create this file with the permissions \"-rw-r--r--\". Thus, if sensitive information is written to this file, other local users can read this information. This is the case in netty's \"AbstractDiskHttpData\" is vulnerable. This has been fixed in version 4.1.59.Final. As a workaround, one may specify your own \"java.io.tmpdir\" when you start the JVM or use \"DefaultHttpDataFactory.setBaseDir(...)\" to set the directory to something that is only readable by the current user."}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2021-21295", "description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty (io.netty:netty-codec-http2) before version 4.1.60.Final there is a vulnerability that enables request smuggling. If a Content-Length header is present in the original HTTP/2 request, the field is not validated by `Http2MultiplexHandler` as it is propagated up. This is fine as long as the request is not proxied through as HTTP/1.1. If the request comes in as an HTTP/2 stream, gets converted into the HTTP/1.1 domain objects (`HttpRequest`, `HttpContent`, etc.) via `Http2StreamFrameToHttpObjectCodec `and then sent up to the child channel's pipeline and proxied through a remote peer as HTTP/1.1 this may result in request smuggling. In a proxy case, users may assume the content-length is validated somehow, which is not the case. If the request is forwarded to a backend channel that is a HTTP/1.1 connection, the Content-Length now has meaning and needs to be checked. An attacker can smuggle requests inside the body as it gets downgraded from HTTP/2 to HTTP/1.1. For an example attack refer to the linked GitHub Advisory. Users are only affected if all of this is true: `HTTP2MultiplexCodec` or `Http2FrameCodec` is used, `Http2StreamFrameToHttpObjectCodec` is used to convert to HTTP/1.1 objects, and these HTTP/1.1 objects are forwarded to another remote peer. This has been patched in 4.1.60.Final As a workaround, the user can do the validation by themselves by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`."}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2021-37136", "description": "The Bzip2 decompression decoder function doesn't allow setting size restrictions on the decompressed output data (which affects the allocation size used during decompression). All users of Bzip2Decoder are affected. The malicious input can trigger an OOME and so a DoS attack"}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2021-37137", "description": "The Snappy frame decoder function doesn't restrict the chunk length which may lead to excessive memory usage. Beside this it also may buffer reserved skippable chunks until the whole chunk was received which may lead to excessive memory usage as well. This vulnerability can be triggered by supplying malicious input that decompresses to a very big size (via a network stream or a file) or by sending a huge skippable chunk."}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2021-43797", "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. Netty prior to version 4.1.71.Final skips control chars when they are present at the beginning / end of the header name. It should instead fail fast as these are not allowed by the spec and could lead to HTTP request smuggling. Failing to do the validation might cause netty to \"sanitize\" header names before it forward these to another remote system when used as proxy. This remote system can't see the invalid usage anymore, and therefore does not do the validation itself. Users should upgrade to version 4.1.71.Final."}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2022-41881", "description": "Netty project is an event-driven asynchronous network application framework. In versions prior to 4.1.86.Final, a StackOverflowError can be raised when parsing a malformed crafted message due to an infinite recursion. This issue is patched in version 4.1.86.Final. There is no workaround, except using a custom HaProxyMessageDecoder."}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2022-41915", "description": "Netty project is an event-driven asynchronous network application framework. Starting in version 4.1.83.Final and prior to 4.1.86.Final, when calling `DefaultHttpHeadesr.set` with an _iterator_ of values, header value validation was not performed, allowing malicious header values in the iterator to perform HTTP Response Splitting. This issue has been patched in version 4.1.86.Final. Integrators can work around the issue by changing the `DefaultHttpHeaders.set(CharSequence, Iterator<?>)` call, into a `remove()` call, and call `add()` in a loop over the iterator of values."}, {"displayName": "io.netty : netty-all : 4.1.16.Final", "cve": "CVE-2024-29025", "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final."}, {"displayName": "ejs : 2.7.4", "cve": "CVE-2022-29078", "description": "The ejs (aka Embedded JavaScript templates) package 3.1.6 for Node.js allows server-side template injection in settings[view options][outputFunctionName]. This is parsed as an internal option, and overwrites the outputFunctionName option with an arbitrary OS command (which is executed upon template compilation)."}, {"displayName": "ejs : 2.7.4", "cve": "CVE-2024-33883", "description": "The ejs (aka Embedded JavaScript templates) package before 3.1.10 for Node.js lacks certain pollution protection."}, {"displayName": "org.bouncycastle : bcprov-jdk18on : 1.73", "cve": "CVE-2023-33201", "description": "Bouncy Castle For Java before 1.74 is affected by an LDAP injection vulnerability. The vulnerability only affects applications that use an LDAP CertStore from Bouncy Castle to validate X.509 certificates. During the certificate validation process, Bouncy Castle inserts the certificate's Subject Name into an LDAP search filter without any escaping, which leads to an LDAP injection vulnerability."}, {"displayName": "org.bouncycastle : bcprov-jdk18on : 1.73", "cve": "CVE-2024-29857", "description": "An issue was discovered in ECCurve.java and ECCurve.cs in Bouncy Castle Java (BC Java) before 1.78, BC Java LTS before 2.73.6, BC-FJA before 1.0.2.5, and BC C# .Net before 2.3.1. Importing an EC certificate with crafted F2m parameters can lead to excessive CPU consumption during the evaluation of the curve parameters."}, {"displayName": "org.bouncycastle : bcprov-jdk18on : 1.73", "cve": "CVE-2024-30171", "description": "An issue was discovered in Bouncy Castle Java TLS API and JSSE Provider before 1.78. Timing-based leakage may occur in RSA based handshakes because of exception processing."}, {"displayName": "org.bouncycastle : bcprov-jdk18on : 1.73", "cve": "CVE-2024-30172", "description": "An issue was discovered in Bouncy Castle Java Cryptography APIs before 1.78. An Ed25519 verification code infinite loop can occur via a crafted signature and public key."}, {"displayName": "org.springframework : spring-beans : 3.2.18.RELEASE", "cve": "CVE-2022-22965", "description": "A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it."}, {"displayName": "com.squareup.okhttp : okhttp : 2.5.0", "cve": "CVE-2016-2402", "description": "OkHttp before 2.7.4 and 3.x before 3.1.2 allows man-in-the-middle attackers to bypass certificate pinning by sending a certificate chain with a certificate from a non-pinned trusted CA and the pinned certificate."}, {"displayName": "com.squareup.okhttp : okhttp : 2.5.0", "cve": "CVE-2021-0341", "description": "In verifyHostName of OkHostnameVerifier.java, there is a possible way to accept a certificate for the wrong domain due to improperly used crypto. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-8.1 Android-9 Android-10 Android-11Android ID: A-171980069"}, {"displayName": "i18n 0.6.0", "cve": "CVE-2013-4492", "description": "Cross-site scripting (XSS) vulnerability in exceptions.rb in the i18n gem before 0.6.6 for Ruby allows remote attackers to inject arbitrary web script or HTML via a crafted I18n::MissingTranslationData.new call."}, {"displayName": "i18n 0.6.0", "cve": "CVE-2014-10077", "description": "Hash#slice in lib/i18n/core_ext/hash.rb in the i18n gem before 0.8.0 for Ruby allows remote attackers to cause a denial of service (application crash) via a call in a situation where :some_key is present in keep_keys but not present in the hash."}, {"displayName": "org.apache.xmlgraphics : batik-script : 1.7", "cve": "CVE-2022-42890", "description": "A vulnerability in Batik of Apache XML Graphics allows an attacker to run Java code from untrusted SVG via JavaScript. This issue affects Apache XML Graphics prior to 1.16. Users are recommended to upgrade to version 1.16."}, {"displayName": "org.apache.xmlgraphics : batik-script : 1.7", "cve": "CVE-2022-44730", "description": "Server-Side Request Forgery (SSRF) vulnerability in Apache Software Foundation Apache XML Graphics Batik.This issue affects Apache XML Graphics Batik: 1.16.\n\nA malicious SVG can probe user profile / data and send it directly as parameter to a URL.\n\n"}, {"displayName": "org.apache.commons : commons-compress : 1.21", "cve": "CVE-2024-25710", "description": "Loop with Unreachable Exit Condition ('Infinite Loop') vulnerability in Apache Commons Compress.This issue affects Apache Commons Compress: from 1.3 through 1.25.0.\n\nUsers are recommended to upgrade to version 1.26.0 which fixes the issue.\n\n"}, {"displayName": "org.apache.commons : commons-compress : 1.21", "cve": "CVE-2024-26308", "description": "Allocation of Resources Without Limits or Throttling vulnerability in Apache Commons Compress.This issue affects Apache Commons Compress: from 1.21 before 1.26.\n\nUsers are recommended to upgrade to version 1.26, which fixes the issue.\n\n"}, {"displayName": "ag-grid-community : 28.2.1", "cve": "CVE-2024-38996", "description": "ag-grid-community v31.3.2 and ag-grid-enterprise v31.3.2 were discovered to contain a prototype pollution via the _.mergeDeep function. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties."}, {"displayName": "org.json : json : 20210307", "cve": "CVE-2022-45688", "description": "A stack overflow in the XML.toJSONObject component of hutool-json v5.8.10 allows attackers to cause a Denial of Service (DoS) via crafted JSON or XML data."}, {"displayName": "org.json : json : 20210307", "cve": "CVE-2023-5072", "description": "Denial of Service  in JSON-Java versions up to and including 20230618. \u00a0A bug in the parser means that an input string of modest size can lead to indefinite amounts of memory being used."}, {"displayName": "rake 0.9.2.2", "cve": "CVE-2020-8130", "description": "There is an OS command injection vulnerability in Ruby Rake < 12.3.3 in Rake::FileList when supplying a filename that begins with the pipe character `|`."}, {"displayName": "org.quartz-scheduler : quartz : 1.8.6", "cve": "CVE-2019-13990", "description": "initDocumentParser in xml/XMLSchedulingDataProcessor.java in Terracotta Quartz Scheduler through 2.3.0 allows XXE attacks via a job description."}, {"displayName": "org.apache.poi : poi : 3.8", "cve": "CVE-2017-12626", "description": "Apache POI in versions prior to release 3.17 are vulnerable to Denial of Service Attacks: 1) Infinite Loops while parsing crafted WMF, EMF, MSG and macros (POI bugs 61338 and 61294), and 2) Out of Memory Exceptions while parsing crafted DOC, PPT and XLS (POI bugs 52372 and 61295)."}, {"displayName": "org.eclipse.jetty : jetty-server : 9.3.21.v20170918", "cve": "CVE-2018-12536", "description": "In Eclipse Jetty Server, all 9.x versions, on webapps deployed using default Error Handling, when an intentionally bad query arrives that doesn't match a dynamic url-pattern, and is eventually handled by the DefaultServlet's static file serving, the bad characters can trigger a java.nio.file.InvalidPathException which includes the full path to the base resource directory that the DefaultServlet and/or webapp is using. If this InvalidPathException is then handled by the default Error Handler, the InvalidPathException message is included in the error response, revealing the full server path to the requesting system."}, {"displayName": "org.eclipse.jetty : jetty-server : 9.3.21.v20170918", "cve": "CVE-2019-10241", "description": "In Eclipse Jetty version 9.2.26 and older, 9.3.25 and older, and 9.4.15 and older, the server is vulnerable to XSS conditions if a remote client USES a specially formatted URL against the DefaultServlet or ResourceHandler that is configured for showing a Listing of directory contents."}, {"displayName": "org.eclipse.jetty : jetty-server : 9.3.21.v20170918", "cve": "CVE-2019-10247", "description": "In Eclipse Jetty version 7.x, 8.x, 9.2.27 and older, 9.3.26 and older, and 9.4.16 and older, the server running on any OS and Jetty version combination will reveal the configured fully qualified directory base resource location on the output of the 404 error for not finding a Context that matches the requested path. The default server behavior on jetty-distribution and jetty-home will include at the end of the Handler tree a DefaultHandler, which is responsible for reporting this 404 error, it presents the various configured contexts as HTML for users to click through to. This produced HTML includes output that contains the configured fully qualified directory base resource location for each context."}, {"displayName": "org.eclipse.jetty : jetty-server : 9.3.21.v20170918", "cve": "CVE-2023-26048", "description": "Jetty is a java based web server and servlet engine. In affected versions servlets with multipart support (e.g. annotated with `@MultipartConfig`) that call `HttpServletRequest.getParameter()` or `HttpServletRequest.getParts()` may cause `OutOfMemoryError` when the client sends a multipart request with a part that has a name but no filename and very large content. This happens even with the default settings of `fileSizeThreshold=0` which should stream the whole part content to disk. An attacker client may send a large multipart request and cause the server to throw `OutOfMemoryError`. However, the server may be able to recover after the `OutOfMemoryError` and continue its service -- although it may take some time. This issue has been patched in versions 9.4.51, 10.0.14, and 11.0.14. Users are advised to upgrade. Users unable to upgrade may set the multipart parameter `maxRequestSize` which must be set to a non-negative value, so the whole multipart content is limited (although still read into memory)."}, {"displayName": "org.eclipse.jetty : jetty-server : 9.3.21.v20170918", "cve": "CVE-2023-26049", "description": "Jetty is a java based web server and servlet engine. Nonstandard cookie parsing in Jetty may allow an attacker to smuggle cookies within other cookies, or otherwise perform unintended behavior by tampering with the cookie parsing mechanism. If Jetty sees a cookie VALUE that starts with `\"` (double quote), it will continue to read the cookie string until it sees a closing quote -- even if a semicolon is encountered. So, a cookie header such as: `DISPLAY_LANGUAGE=\"b; JSESSIONID=1337; c=d\"` will be parsed as one cookie, with the name DISPLAY_LANGUAGE and a value of b; JSESSIONID=1337; c=d instead of 3 separate cookies. This has security implications because if, say, JSESSIONID is an HttpOnly cookie, and the DISPLAY_LANGUAGE cookie value is rendered on the page, an attacker can smuggle the JSESSIONID cookie into the DISPLAY_LANGUAGE cookie and thereby exfiltrate it. This is significant when an intermediary is enacting some policy based on cookies, so a smuggled cookie can bypass that policy yet still be seen by the Jetty server or its logging system. This issue has been addressed in versions 9.4.51, 10.0.14, 11.0.14, and 12.0.0.beta0 and users are advised to upgrade. There are no known workarounds for this issue."}, {"displayName": "commons-beanutils : commons-beanutils : 1.7.0", "cve": "CVE-2014-0114", "description": "Apache Commons BeanUtils, as distributed in lib/commons-beanutils-1.8.0.jar in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutils through 1.9.2, does not suppress the class property, which allows remote attackers to \"manipulate\" the ClassLoader and execute arbitrary code via the class parameter, as demonstrated by the passing of this parameter to the getClass method of the ActionForm object in Struts 1."}, {"displayName": "org.springframework : spring-beans : 4.3.11.RELEASE", "cve": "CVE-2022-22965", "description": "A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it."}, {"displayName": "braces : 2.3.2", "cve": "CVE-2024-4068", "description": "The NPM package `braces`, versions prior to 3.0.3, fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib/parse.js,` if a malicious user sends \"imbalanced braces\" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash."}, {"displayName": "log4j : log4j : 1.2.17", "cve": "CVE-2019-17571", "description": "Included in Log4j 1.2 is a SocketServer class that is vulnerable to deserialization of untrusted data which can be exploited to remotely execute arbitrary code when combined with a deserialization gadget when listening to untrusted network traffic for log data. This affects Log4j versions up to 1.2 up to 1.2.17."}, {"displayName": "log4j : log4j : 1.2.17", "cve": "CVE-2021-4104", "description": "JMSAppender in Log4j 1.2 is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration. The attacker can provide TopicBindingName and TopicConnectionFactoryBindingName configurations causing JMSAppender to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-44228. Note this issue only affects Log4j 1.2 when specifically configured to use JMSAppender, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions."}, {"displayName": "log4j : log4j : 1.2.17", "cve": "CVE-2022-23302", "description": "JMSSink in all versions of Log4j 1.x is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration or if the configuration references an LDAP service the attacker has access to. The attacker can provide a TopicConnectionFactoryBindingName configuration causing JMSSink to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-4104. Note this issue only affects Log4j 1.x when specifically configured to use JMSSink, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions."}, {"displayName": "log4j : log4j : 1.2.17", "cve": "CVE-2022-23305", "description": "By design, the JDBCAppender in Log4j 1.2.x accepts an SQL statement as a configuration parameter where the values to be inserted are converters from PatternLayout. The message converter, %m, is likely to always be included. This allows attackers to manipulate the SQL by entering crafted strings into input fields or headers of an application that are logged allowing unintended SQL queries to be executed. Note this issue only affects Log4j 1.x when specifically configured to use the JDBCAppender, which is not the default. Beginning in version 2.0-beta8, the JDBCAppender was re-introduced with proper support for parameterized SQL queries and further customization over the columns written to in logs. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions."}, {"displayName": "log4j : log4j : 1.2.17", "cve": "CVE-2022-23307", "description": "CVE-2020-9493 identified a deserialization issue that was present in Apache Chainsaw. Prior to Chainsaw V2.0 Chainsaw was a component of Apache Log4j 1.2.x where the same issue exists."}, {"displayName": "log4j : log4j : 1.2.17", "cve": "CVE-2023-26464", "description": "** UNSUPPORTED WHEN ASSIGNED **\n\nWhen using the Chainsaw or SocketAppender components with Log4j 1.x on JRE less than 1.7, an attacker that manages to cause a logging entry involving a specially-crafted (ie, deeply nested) \nhashmap or hashtable (depending on which logging component is in use) to be processed could exhaust the available memory in the virtual machine and achieve Denial of Service when the object is deserialized.\n\nThis issue affects Apache Log4j before 2. Affected users are recommended to update to Log4j 2.x.\n\nNOTE: This vulnerability only affects products that are no longer supported by the maintainer.\n\n\n\n\n"}, {"displayName": "org.apache.tomcat.embed : tomcat-embed-core : 9.0.74", "cve": "CVE-2023-34981", "description": "A regression in the fix for bug 66512 in Apache Tomcat 11.0.0-M5, 10.1.8, 9.0.74 and 8.5.88 meant that, if a response did not include any HTTP headers no AJP SEND_HEADERS messare woudl be sent for the response which in turn meant that at least one AJP proxy (mod_proxy_ajp) would use the response headers from the previous request leading to an information leak."}, {"displayName": "org.apache.tomcat.embed : tomcat-embed-core : 9.0.74", "cve": "CVE-2023-41080", "description": "URL Redirection to Untrusted Site ('Open Redirect') vulnerability in FORM authentication feature Apache Tomcat.This issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.0-M10, from 10.1.0-M1 through 10.0.12, from 9.0.0-M1 through 9.0.79 and from 8.5.0 through 8.5.92.\n\nThe vulnerability is limited to the ROOT (default) web application."}, {"displayName": "org.apache.tomcat.embed : tomcat-embed-core : 9.0.74", "cve": "CVE-2023-42794", "description": "Incomplete Cleanup vulnerability in Apache Tomcat.\n\nThe internal fork of Commons FileUpload packaged with Apache Tomcat 9.0.70 through 9.0.80 and 8.5.85 through 8.5.93 included an unreleased, \nin progress refactoring that exposed a potential denial of service on \nWindows if a web application opened a stream for an uploaded file but \nfailed to close the stream. The file would never be deleted from disk \ncreating the possibility of an eventual denial of service due to the \ndisk being full.\n\nUsers are recommended to upgrade to version 9.0.81 onwards or 8.5.94 onwards, which fixes the issue.\n\n"}, {"displayName": "org.apache.tomcat.embed : tomcat-embed-core : 9.0.74", "cve": "CVE-2023-42795", "description": "Incomplete Cleanup vulnerability in Apache Tomcat.When recycling various internal objects in Apache Tomcat from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.80 and from 8.5.0 through 8.5.93, an error could \ncause Tomcat to skip some parts of the recycling process leading to \ninformation leaking from the current request/response to the next.\n\nUsers are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fixes the issue.\n\n"}, {"displayName": "org.apache.tomcat.embed : tomcat-embed-core : 9.0.74", "cve": "CVE-2023-45648", "description": "Improper Input Validation vulnerability in Apache Tomcat.Tomcat\u00a0from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.81 and from 8.5.0 through 8.5.93 did not correctly parse HTTP trailer headers. A specially \ncrafted, invalid trailer header could cause Tomcat to treat a single \nrequest as multiple requests leading to the possibility of request \nsmuggling when behind a reverse proxy.\n\nUsers are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fix the issue.\n\n"}, {"displayName": "org.apache.tomcat.embed : tomcat-embed-core : 9.0.74", "cve": "CVE-2023-46589", "description": "Improper Input Validation vulnerability in Apache Tomcat.Tomcat from 11.0.0-M1 through 11.0.0-M10, from 10.1.0-M1 through 10.1.15, from 9.0.0-M1 through 9.0.82 and from 8.5.0 through 8.5.95 did not correctly parse HTTP trailer headers. A trailer header that exceeded the header size limit could cause Tomcat to treat a single \nrequest as multiple requests leading to the possibility of request \nsmuggling when behind a reverse proxy.\n\nUsers are recommended to upgrade to version 11.0.0-M11\u00a0onwards, 10.1.16 onwards, 9.0.83 onwards or 8.5.96 onwards, which fix the issue.\n\n"}, {"displayName": "org.apache.tomcat.embed : tomcat-embed-core : 9.0.74", "cve": "CVE-2024-24549", "description": "Denial of Service due to improper input validation vulnerability for HTTP/2 requests in Apache Tomcat. When processing an HTTP/2 request, if the request exceeded any of the configured limits for headers, the associated HTTP/2 stream was not reset until after all of the headers had been processed.This issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.0-M16, from 10.1.0-M1 through 10.1.18, from 9.0.0-M1 through 9.0.85, from 8.5.0 through 8.5.98.\n\nUsers are recommended to upgrade to version 11.0.0-M17, 10.1.19, 9.0.86 or 8.5.99 which fix the issue.\n\n"}, {"displayName": "org.apache.tomcat.embed : tomcat-embed-core : 9.0.74", "cve": "CVE-2024-34750", "description": "Improper Handling of Exceptional Conditions, Uncontrolled Resource Consumption vulnerability in Apache Tomcat. When processing an HTTP/2 stream, Tomcat did not handle some cases of excessive HTTP headers correctly. This led to a miscounting of active HTTP/2 streams which in turn led to the use of an incorrect infinite timeout which allowed connections to remain open which should have been closed.\n\nThis issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.0-M20, from 10.1.0-M1 through 10.1.24, from 9.0.0-M1 through 9.0.89.\n\nUsers are recommended to upgrade to version 11.0.0-M21, 10.1.25 or 9.0.90, which fixes the issue.\n\n"}, {"displayName": "xalan : xalan : 2.6.0", "cve": "CVE-2014-0107", "description": "The TransformerFactory in Apache Xalan-Java before 2.7.2 does not properly restrict access to certain properties when FEATURE_SECURE_PROCESSING is enabled, which allows remote attackers to bypass expected restrictions and load arbitrary classes or access external resources via a crafted (1) xalan:content-header, (2) xalan:entities, (3) xslt:content-header, or (4) xslt:entities property, or a Java property that is bound to the XSLT 1.0 system-property function."}, {"displayName": "xalan : xalan : 2.6.0", "cve": "CVE-2022-34169", "description": "The Apache Xalan Java XSLT library is vulnerable to an integer truncation issue when processing malicious XSLT stylesheets. This can be used to corrupt Java class files generated by the internal XSLTC compiler and execute arbitrary Java bytecode. Users are recommended to update to version 2.7.3 or later. Note: Java runtimes (such as OpenJDK) include repackaged copies of Xalan."}, {"displayName": "dom4j : dom4j : 1.6.1", "cve": "CVE-2018-1000632", "description": "dom4j version prior to version 2.1.1 contains a CWE-91: XML Injection vulnerability in Class: Element. Methods: addElement, addAttribute that can result in an attacker tampering with XML documents through XML injection. This attack appear to be exploitable via an attacker specifying attributes or elements in the XML document. This vulnerability appears to have been fixed in 2.1.1 or later."}, {"displayName": "dom4j : dom4j : 1.6.1", "cve": "CVE-2020-10683", "description": "dom4j before 2.0.3 and 2.1.x before 2.1.3 allows external DTDs and External Entities by default, which might enable XXE attacks. However, there is popular external documentation from OWASP showing how to enable the safe, non-default behavior in any application that uses dom4j."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.5.1", "cve": "CVE-2017-7525", "description": "A deserialization flaw was discovered in the jackson-databind, versions before 2.6.7.1, 2.7.9.1 and 2.8.9, which could allow an unauthenticated user to perform code execution by sending the maliciously crafted input to the readValue method of the ObjectMapper."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.5.1", "cve": "CVE-2020-36518", "description": "jackson-databind before 2.13.0 allows a Java StackOverflow exception and denial of service via a large depth of nested objects."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.5.1", "cve": "CVE-2022-42003", "description": "In FasterXML jackson-databind before versions 2.13.4.1 and 2.12.17.1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.5.1", "cve": "CVE-2022-42004", "description": "In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization."}, {"displayName": "com.google.guava : guava : 31.1-jre", "cve": "CVE-2023-2976", "description": "Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class.\n\nEven though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.\n\n"}, {"displayName": "components-jqueryui : 1.12.1", "cve": "CVE-2021-41182", "description": "jQuery-UI is the official jQuery user interface library. Prior to version 1.13.0, accepting the value of the `altField` option of the Datepicker widget from untrusted sources may execute untrusted code. The issue is fixed in jQuery UI 1.13.0. Any string value passed to the `altField` option is now treated as a CSS selector. A workaround is to not accept the value of the `altField` option from untrusted sources."}, {"displayName": "components-jqueryui : 1.12.1", "cve": "CVE-2021-41183", "description": "jQuery-UI is the official jQuery user interface library. Prior to version 1.13.0, accepting the value of various `*Text` options of the Datepicker widget from untrusted sources may execute untrusted code. The issue is fixed in jQuery UI 1.13.0. The values passed to various `*Text` options are now always treated as pure text, not HTML. A workaround is to not accept the value of the `*Text` options from untrusted sources."}, {"displayName": "components-jqueryui : 1.12.1", "cve": "CVE-2021-41184", "description": "jQuery-UI is the official jQuery user interface library. Prior to version 1.13.0, accepting the value of the `of` option of the `.position()` util from untrusted sources may execute untrusted code. The issue is fixed in jQuery UI 1.13.0. Any string value passed to the `of` option is now treated as a CSS selector. A workaround is to not accept the value of the `of` option from untrusted sources."}, {"displayName": "components-jqueryui : 1.12.1", "cve": "CVE-2022-31160", "description": "jQuery UI is a curated set of user interface interactions, effects, widgets, and themes built on top of jQuery. Versions prior to 1.13.2 are potentially vulnerable to cross-site scripting. Initializing a checkboxradio widget on an input enclosed within a label makes that parent label contents considered as the input label. Calling `.checkboxradio( \"refresh\" )` on such a widget and the initial HTML contained encoded HTML entities will make them erroneously get decoded. This can lead to potentially executing JavaScript code. The bug has been patched in jQuery UI 1.13.2. To remediate the issue, someone who can change the initial HTML can wrap all the non-input contents of the `label` in a `span`."}, {"displayName": "postcss : 6.0.23", "cve": "CVE-2021-23368", "description": "The package postcss from 7.0.0 and before 8.2.10 are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing."}, {"displayName": "postcss : 6.0.23", "cve": "CVE-2021-23382", "description": "The package postcss before 8.2.13 are vulnerable to Regular Expression Denial of Service (ReDoS) via getAnnotationURL() and loadAnnotation() in lib/previous-map.js. The vulnerable regexes are caused mainly by the sub-pattern \\/\\*\\s* sourceMappingURL=(.*)."}, {"displayName": "postcss : 6.0.23", "cve": "CVE-2023-44270", "description": "An issue was discovered in PostCSS before 8.4.31. The vulnerability affects linters using PostCSS to parse external untrusted CSS. An attacker can prepare CSS in such a way that it will contains parts parsed by PostCSS as a CSS comment. After processing by PostCSS, it will be included in the PostCSS output in CSS nodes (rules, properties) despite being included in a comment."}, {"displayName": "org.springframework : spring-expression : 5.3.27", "cve": "CVE-2024-38808", "description": "In Spring Framework versions 5.3.0 - 5.3.38 and older unsupported versions, it is possible for a user to provide a specially crafted Spring Expression Language (SpEL) expression that may cause a denial of service (DoS) condition.\n\nSpecifically, an application is vulnerable when the following is true:\n\n  *  The application evaluates user-supplied SpEL expressions."}, {"displayName": "org.jsoup : jsoup : 1.8.3", "cve": "CVE-2021-37714", "description": "jsoup is a Java library for working with HTML. Those using jsoup versions prior to 1.14.2 to parse untrusted HTML or XML may be vulnerable to DOS attacks. If the parser is run on user supplied input, an attacker may supply content that causes the parser to get stuck (loop indefinitely until cancelled), to complete more slowly than usual, or to throw an unexpected exception. This effect may support a denial of service attack. The issue is patched in version 1.14.2. There are a few available workarounds. Users may rate limit input parsing, limit the size of inputs based on system resources, and/or implement thread watchdogs to cap and timeout parse runtimes."}, {"displayName": "org.jsoup : jsoup : 1.8.3", "cve": "CVE-2022-36033", "description": "jsoup is a Java HTML parser, built for HTML editing, cleaning, scraping, and cross-site scripting (XSS) safety. jsoup may incorrectly sanitize HTML including `javascript:` URL expressions, which could allow XSS attacks when a reader subsequently clicks that link. If the non-default `SafeList.preserveRelativeLinks` option is enabled, HTML including `javascript:` URLs that have been crafted with control characters will not be sanitized. If the site that this HTML is published on does not set a Content Security Policy, an XSS attack is then possible. This issue is patched in jsoup 1.15.3. Users should upgrade to this version. Additionally, as the unsanitized input may have been persisted, old content should be cleaned again using the updated version. To remediate this issue without immediately upgrading: - disable `SafeList.preserveRelativeLinks`, which will rewrite input URLs as absolute URLs - ensure an appropriate [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) is defined. (This should be used regardless of upgrading, as a defence-in-depth best practice.)"}, {"displayName": "send : 0.18.0", "cve": "CVE-2024-43799", "description": "Send is a library for streaming files from the file system as a http response. Send passes untrusted user input to SendStream.redirect() which executes untrusted code. This issue is patched in send 0.19.0."}, {"displayName": "org.apache.qpid : proton-j : 0.16.0", "cve": "CVE-2018-17187", "description": "The Apache Qpid Proton-J transport includes an optional wrapper layer to perform TLS, enabled by use of the 'transport.ssl(...)' methods. Unless a verification mode was explicitly configured, client and server modes previously defaulted as documented to not verifying a peer certificate, with options to configure this explicitly or select a certificate verification mode with or without hostname verification being performed. The latter hostname verifying mode was not implemented in Apache Qpid Proton-J versions 0.3 to 0.29.0, with attempts to use it resulting in an exception. This left only the option to verify the certificate is trusted, leaving such a client vulnerable to Man In The Middle (MITM) attack. Uses of the Proton-J protocol engine which do not utilise the optional transport TLS wrapper are not impacted, e.g. usage within Qpid JMS. Uses of Proton-J utilising the optional transport TLS wrapper layer that wish to enable hostname verification must be upgraded to version 0.30.0 or later and utilise the VerifyMode#VERIFY_PEER_NAME configuration, which is now the default for client mode usage unless configured otherwise."}, {"displayName": "ejs : 3.1.10", "cve": "CVE-2023-29827", "description": "ejs v3.1.9 is vulnerable to server-side template injection. If the ejs file is controllable, template injection can be implemented through the configuration settings of the closeDelimiter parameter. NOTE: this is disputed by the vendor because the render function is not intended to be used with untrusted input."}, {"displayName": "rack 1.4.1", "cve": "CVE-2012-6109", "description": "lib/rack/multipart.rb in Rack before 1.1.4, 1.2.x before 1.2.6, 1.3.x before 1.3.7, and 1.4.x before 1.4.2 uses an incorrect regular expression, which allows remote attackers to cause a denial of service (infinite loop) via a crafted Content-Disposion header."}, {"displayName": "rack 1.4.1", "cve": "CVE-2013-0183", "description": "multipart/parser.rb in Rack 1.3.x before 1.3.8 and 1.4.x before 1.4.3 allows remote attackers to cause a denial of service (memory consumption and out-of-memory error) via a long string in a Multipart HTTP packet."}, {"displayName": "rack 1.4.1", "cve": "CVE-2018-16471", "description": "There is a possible XSS vulnerability in Rack before 2.0.6 and 1.6.11. Carefully crafted requests can impact the data returned by the `scheme` method on `Rack::Request`. Applications that expect the scheme to be limited to 'http' or 'https' and do not escape the return value could be vulnerable to an XSS attack. Note that applications using the normal escaping mechanisms provided by Rails may not impacted, but applications that bypass the escaping mechanisms, or do not use them may be vulnerable."}, {"displayName": "rack 1.4.1", "cve": "CVE-2019-16782", "description": "There's a possible information leak / session hijack vulnerability in Rack (RubyGem rack). This vulnerability is patched in versions 1.6.12 and 2.0.8. Attackers may be able to find and hijack sessions by using timing attacks targeting the session id. Session ids are usually stored and indexed in a database that uses some kind of scheme for speeding up lookups of that session id. By carefully measuring the amount of time it takes to look up a session, an attacker may be able to find a valid session id and hijack the session. The session id itself may be generated randomly, but the way the session is indexed by the backing store does not use a secure comparison."}, {"displayName": "rack 1.4.1", "cve": "CVE-2020-8161", "description": "A directory traversal vulnerability exists in rack < 2.2.0 that allows an attacker perform directory traversal vulnerability in the Rack::Directory app that is bundled with Rack which could result in information disclosure."}, {"displayName": "rack 1.4.1", "cve": "CVE-2020-8184", "description": "A reliance on cookies without validation/integrity check security vulnerability exists in rack < 2.2.3, rack < 2.1.4 that makes it is possible for an attacker to forge a secure or host-only cookie prefix."}, {"displayName": "rack 1.4.1", "cve": "CVE-2022-30122", "description": "A possible denial of service vulnerability exists in Rack <2.0.9.1, <2.1.4.1 and <2.2.3.1 in the multipart parsing component of Rack."}, {"displayName": "rack 1.4.1", "cve": "CVE-2022-30123", "description": "A sequence injection vulnerability exists in Rack <2.0.9.1, <2.1.4.1 and <2.2.3.1 which could allow is a possible shell escape in the Lint and CommonLogger components of Rack."}, {"displayName": "rack 1.4.1", "cve": "CVE-2022-44570", "description": "A denial of service vulnerability in the Range header parsing component of Rack >= 1.5.0. A Carefully crafted input can cause the Range header parsing component in Rack to take an unexpected amount of time, possibly resulting in a denial of service attack vector. Any applications that deal with Range requests (such as streaming applications, or applications that serve files) may be impacted."}, {"displayName": "rack 1.4.1", "cve": "CVE-2022-44571", "description": "There is a denial of service vulnerability in the Content-Disposition parsingcomponent of Rack fixed in 2.0.9.2, 2.1.4.2, 2.2.4.1, 3.0.0.1. This could allow an attacker to craft an input that can cause Content-Disposition header parsing in Rackto take an unexpected amount of time, possibly resulting in a denial ofservice attack vector. This header is used typically used in multipartparsing. Any applications that parse multipart posts using Rack (virtuallyall Rails applications) are impacted."}, {"displayName": "rack 1.4.1", "cve": "CVE-2023-27530", "description": "A DoS vulnerability exists in Rack <v3.0.4.2, <v2.2.6.3, <v2.1.4.3 and <v2.0.9.3 within in the Multipart MIME parsing code in which could allow an attacker to craft requests that can be abuse to cause multipart parsing to take longer than expected."}, {"displayName": "rack 1.4.1", "cve": "CVE-2023-27539", "description": "rack - Regular Expression Denial of Service (ReDoS)"}, {"displayName": "rack 1.4.1", "cve": "CVE-2024-25126", "description": "Rack is a modular Ruby web server interface. Carefully crafted content type headers can cause Rack\u2019s media type parser to take much longer than expected, leading to a possible denial of service vulnerability (ReDos 2nd degree polynomial). This vulnerability is patched in 3.0.9.1 and 2.2.8.1."}, {"displayName": "rack 1.4.1", "cve": "CVE-2024-26141", "description": "Rack is a modular Ruby web server interface. Carefully crafted Range headers can cause a server to respond with an unexpectedly large response. Responding with such large responses could lead to a denial of service issue. Vulnerable applications will use the `Rack::File` middleware or the `Rack::Utils.byte_ranges` methods (this includes Rails applications). The vulnerability is fixed in 3.0.9.1 and 2.2.8.1."}, {"displayName": "rack 1.4.1", "cve": "CVE-2024-39316", "description": "Rack is a modular Ruby web server interface. Starting in version 3.1.0 and prior to version 3.1.5, Regular Expression Denial of Service (ReDoS) vulnerability exists in the `Rack::Request::Helpers` module when parsing HTTP Accept headers. This vulnerability can be exploited by an attacker sending specially crafted `Accept-Encoding` or `Accept-Language` headers, causing the server to spend excessive time processing the request and leading to a Denial of Service (DoS). The fix for CVE-2024-26146 was not applied to the main branch and thus while the issue was fixed for the Rack v3.0 release series, it was not fixed in the v3.1 release series until v3.1.5. Users of versions on the 3.1 branch should upgrade to version 3.1.5 to receive the fix."}, {"displayName": "activesupport 3.2.3", "cve": "CVE-2010-3299", "description": "The encrypt/decrypt functions in Ruby on Rails 2.3 are vulnerable to padding oracle attacks."}, {"displayName": "activesupport 3.2.3", "cve": "CVE-2012-3464", "description": "Cross-site scripting (XSS) vulnerability in activesupport/lib/active_support/core_ext/string/output_safety.rb in Ruby on Rails before 3.0.17, 3.1.x before 3.1.8, and 3.2.x before 3.2.8 might allow remote attackers to inject arbitrary web script or HTML via vectors involving a ' (quote) character."}, {"displayName": "activesupport 3.2.3", "cve": "CVE-2013-0156", "description": "active_support/core_ext/hash/conversions.rb in Ruby on Rails before 2.3.15, 3.0.x before 3.0.19, 3.1.x before 3.1.10, and 3.2.x before 3.2.11 does not properly restrict casts of string values, which allows remote attackers to conduct object-injection attacks and execute arbitrary code, or cause a denial of service (memory and CPU consumption) involving nested XML entity references, by leveraging Action Pack support for (1) YAML type conversion or (2) Symbol type conversion."}, {"displayName": "activesupport 3.2.3", "cve": "CVE-2015-3227", "description": "The (1) jdom.rb and (2) rexml.rb components in Active Support in Ruby on Rails before 4.1.11 and 4.2.x before 4.2.2, when JDOM or REXML is enabled, allow remote attackers to cause a denial of service (SystemStackError) via a large XML document depth."}, {"displayName": "activesupport 3.2.3", "cve": "CVE-2023-22796", "description": "A regular expression based DoS vulnerability in Active Support <6.1.7.1 and <7.0.4.1. A specially crafted string passed to the underscore method can cause the regular expression engine to enter a state of catastrophic backtracking. This can cause the process to use large amounts of CPU and memory, leading to a possible DoS vulnerability."}, {"displayName": "activesupport 3.2.3", "cve": "CVE-2023-28120", "description": "activesupport - Cross-Site Scripting (XSS)"}, {"displayName": "org.codehaus.jettison : jettison : 1.3.8", "cve": "CVE-2022-40149", "description": "Those using Jettison to parse untrusted XML or JSON data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack."}, {"displayName": "org.codehaus.jettison : jettison : 1.3.8", "cve": "CVE-2022-40150", "description": "Those using Jettison to parse untrusted XML or JSON data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by Out of memory. This effect may support a denial of service attack."}, {"displayName": "org.codehaus.jettison : jettison : 1.3.8", "cve": "CVE-2022-45685", "description": "A stack overflow in Jettison before v1.5.2 allows attackers to cause a Denial of Service (DoS) via crafted JSON data."}, {"displayName": "org.codehaus.jettison : jettison : 1.3.8", "cve": "CVE-2022-45693", "description": "Jettison before v1.5.2 was discovered to contain a stack overflow via the map parameter. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted string."}, {"displayName": "org.codehaus.jettison : jettison : 1.3.8", "cve": "CVE-2023-1436", "description": "An infinite recursion is triggered in Jettison when constructing a JSONArray from a Collection that contains a self-reference in one of its elements. This leads to a StackOverflowError exception being thrown.\n\n"}, {"displayName": "underscore : 1.7.0", "cve": "CVE-2021-23358", "description": "The package underscore from 1.13.0-0 and before 1.13.0-2, from 1.3.2 and before 1.12.1 are vulnerable to Arbitrary Code Injection via the template function, particularly when a variable property is passed as an argument as it is not sanitized."}, {"displayName": "org.webjars : jquery-ui : 1.11.4", "cve": "CVE-2021-41182", "description": "jQuery-UI is the official jQuery user interface library. Prior to version 1.13.0, accepting the value of the `altField` option of the Datepicker widget from untrusted sources may execute untrusted code. The issue is fixed in jQuery UI 1.13.0. Any string value passed to the `altField` option is now treated as a CSS selector. A workaround is to not accept the value of the `altField` option from untrusted sources."}, {"displayName": "org.webjars : jquery-ui : 1.11.4", "cve": "CVE-2021-41183", "description": "jQuery-UI is the official jQuery user interface library. Prior to version 1.13.0, accepting the value of various `*Text` options of the Datepicker widget from untrusted sources may execute untrusted code. The issue is fixed in jQuery UI 1.13.0. The values passed to various `*Text` options are now always treated as pure text, not HTML. A workaround is to not accept the value of the `*Text` options from untrusted sources."}, {"displayName": "org.webjars : jquery-ui : 1.11.4", "cve": "CVE-2021-41184", "description": "jQuery-UI is the official jQuery user interface library. Prior to version 1.13.0, accepting the value of the `of` option of the `.position()` util from untrusted sources may execute untrusted code. The issue is fixed in jQuery UI 1.13.0. Any string value passed to the `of` option is now treated as a CSS selector. A workaround is to not accept the value of the `of` option from untrusted sources."}, {"displayName": "body-parser : 1.20.2", "cve": "CVE-2024-45590", "description": "body-parser is Node.js body parsing middleware. body-parser <1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service. This issue is patched in 1.20.3."}, {"displayName": "async : 2.6.4", "cve": "CVE-2024-39249", "description": "Async <= 2.6.4 and <= 3.2.5 are vulnerable to ReDoS (Regular Expression Denial of Service) while parsing function in autoinject function. NOTE: this is disputed by the supplier because there is no realistic threat model: regular expressions are not used with untrusted input."}, {"displayName": "micromatch : 3.1.10", "cve": "CVE-2024-4067", "description": "The NPM package `micromatch` prior to 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persists. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching. This issue was fixed in version 4.0.8."}, {"displayName": "org.apache.xmlgraphics : batik-dom : 1.7", "cve": "CVE-2015-0250", "description": "XML external entity (XXE) vulnerability in the SVG to (1) PNG and (2) JPG conversion classes in Apache Batik 1.x before 1.8 allows remote attackers to read arbitrary files or cause a denial of service via a crafted SVG file."}, {"displayName": "org.apache.xmlgraphics : batik-dom : 1.7", "cve": "CVE-2017-5662", "description": "In Apache Batik before 1.9, files lying on the filesystem of the server which uses batik can be revealed to arbitrary users who send maliciously formed SVG files. The file types that can be shown depend on the user context in which the exploitable application is running. If the user is root a full compromise of the server - including confidential or sensitive files - would be possible. XXE can also be used to attack the availability of the server via denial of service as the references within a xml document can trivially trigger an amplification attack."}, {"displayName": "org.apache.xmlgraphics : batik-dom : 1.7", "cve": "CVE-2018-8013", "description": "In Apache Batik 1.x before 1.10, when deserializing subclass of `AbstractDocument`, the class takes a string from the inputStream as the class name which then use it to call the no-arg constructor of the class. Fix was to check the class type before calling newInstance in deserialization."}, {"displayName": "underscore.string : 2.3.3", "cve": "CVE-2019-11358", "description": "jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution. If an unsanitized source object contained an enumerable __proto__ property, it could extend the native Object.prototype."}, {"displayName": "underscore.string : 2.3.3", "cve": "CVE-2020-11023", "description": "In jQuery versions greater than or equal to 1.0.3 and before 3.5.0, passing HTML containing <option> elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. This problem is patched in jQuery 3.5.0."}, {"displayName": "underscore.string : 2.3.3", "cve": "CVE-2020-23064", "description": "Rejected reason: DO NOT USE THIS CANDIDATE NUMBER. ConsultIDs: CVE-2020-11023. Reason: This candidate is a duplicate of CVE-2020-11023. Notes: All CVE users should reference CVE-2020-11023 instead of this candidate. All references and descriptions in this candidate have been removed to prevent accidental usage."}, {"displayName": "underscore.string : 2.3.3", "cve": "CVE-2020-7656", "description": "jquery prior to 1.9.0 allows Cross-site Scripting attacks via the load method. The load method fails to recognize and remove \"<script>\" HTML tags that contain a whitespace character, i.e: \"</script >\", which results in the enclosed script logic to be executed."}, {"displayName": "org.eclipse.jetty : jetty-http : 9.3.21.v20170918", "cve": "CVE-2017-7657", "description": "In Eclipse Jetty, versions 9.2.x and older, 9.3.x (all configurations), and 9.4.x (non-default configuration with RFC2616 compliance enabled), transfer-encoding chunks are handled poorly. The chunk length parsing was vulnerable to an integer overflow. Thus a large chunk size could be interpreted as a smaller chunk size and content sent as chunk body could be interpreted as a pipelined request. If Jetty was deployed behind an intermediary that imposed some authorization and that intermediary allowed arbitrarily large chunks to be passed on unchanged, then this flaw could be used to bypass the authorization imposed by the intermediary as the fake pipelined request would not be interpreted by the intermediary as a request."}, {"displayName": "org.eclipse.jetty : jetty-http : 9.3.21.v20170918", "cve": "CVE-2017-7658", "description": "In Eclipse Jetty Server, versions 9.2.x and older, 9.3.x (all non HTTP/1.x configurations), and 9.4.x (all HTTP/1.x configurations), when presented with two content-lengths headers, Jetty ignored the second. When presented with a content-length and a chunked encoding header, the content-length was ignored (as per RFC 2616). If an intermediary decided on the shorter length, but still passed on the longer body, then body content could be interpreted by Jetty as a pipelined request. If the intermediary was imposing authorization, the fake pipelined request would bypass that authorization."}, {"displayName": "org.eclipse.jetty : jetty-http : 9.3.21.v20170918", "cve": "CVE-2022-2047", "description": "In Eclipse Jetty versions 9.4.0 thru 9.4.46, and 10.0.0 thru 10.0.9, and 11.0.0 thru 11.0.9 versions, the parsing of the authority segment of an http scheme URI, the Jetty HttpURI class improperly detects an invalid input as a hostname. This can lead to failures in a Proxy scenario."}, {"displayName": "org.eclipse.jetty : jetty-http : 9.3.21.v20170918", "cve": "CVE-2023-40167", "description": "Jetty is a Java based web server and servlet engine. Prior to versions 9.4.52, 10.0.16, 11.0.16, and 12.0.1, Jetty accepts the `+` character proceeding the content-length value in a HTTP/1 header field.  This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses.  There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response. Versions 9.4.52, 10.0.16, 11.0.16, and 12.0.1 contain a patch for this issue. There is no workaround as there is no known exploit scenario."}, {"displayName": "ajv : 5.5.2", "cve": "CVE-2020-15366", "description": "An issue was discovered in ajv.validate() in Ajv (aka Another JSON Schema Validator) 6.12.2. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)"}, {"displayName": "follow-redirects : 1.5.10", "cve": "CVE-2022-0155", "description": "follow-redirects is vulnerable to Exposure of Private Personal Information to an Unauthorized Actor"}, {"displayName": "follow-redirects : 1.5.10", "cve": "CVE-2022-0536", "description": "Improper Removal of Sensitive Information Before Storage or Transfer in NPM follow-redirects prior to 1.14.8.\n\n"}, {"displayName": "follow-redirects : 1.5.10", "cve": "CVE-2023-26159", "description": "Versions of the package follow-redirects before 1.15.4 are vulnerable to Improper Input Validation due to the improper handling of URLs by the url.parse() function. When new URL() throws an error, it can be manipulated to misinterpret the hostname. An attacker could exploit this weakness to redirect traffic to a malicious site, potentially leading to information disclosure, phishing attacks, or other security breaches."}, {"displayName": "follow-redirects : 1.5.10", "cve": "CVE-2024-28849", "description": "follow-redirects is an open source, drop-in replacement for Node's `http` and `https` modules that automatically follows redirects. In affected versions follow-redirects only clears authorization header during cross-domain redirect, but keep the proxy-authentication header which contains credentials too. This vulnerability may lead to credentials leak, but has been addressed in version 1.15.6. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"displayName": "xerces : xercesImpl : 2.9.1", "cve": "CVE-2009-2625", "description": "XMLScanner.java in Apache Xerces2 Java, as used in Sun Java Runtime Environment (JRE) in JDK and JRE 6 before Update 15 and JDK and JRE 5.0 before Update 20, and in other products, allows remote attackers to cause a denial of service (infinite loop and application hang) via malformed XML input, as demonstrated by the Codenomicon XML fuzzing framework."}, {"displayName": "xerces : xercesImpl : 2.9.1", "cve": "CVE-2012-0881", "description": "Apache Xerces2 Java Parser before 2.12.0 allows remote attackers to cause a denial of service (CPU consumption) via a crafted message to an XML service, which triggers hash table collisions."}, {"displayName": "xerces : xercesImpl : 2.9.1", "cve": "CVE-2013-4002", "description": "XMLscanner.java in Apache Xerces2 Java Parser before 2.12.0, as used in the Java Runtime Environment (JRE) in IBM Java 5.0 before 5.0 SR16-FP3, 6 before 6 SR14, 6.0.1 before 6.0.1 SR6, and 7 before 7 SR5 as well as Oracle Java SE 7u40 and earlier, Java SE 6u60 and earlier, Java SE 5.0u51 and earlier, JRockit R28.2.8 and earlier, JRockit R27.7.6 and earlier, Java SE Embedded 7u40 and earlier, and possibly other products allows remote attackers to cause a denial of service via vectors related to XML attribute names."}, {"displayName": "xerces : xercesImpl : 2.9.1", "cve": "CVE-2022-23437", "description": "There's a vulnerability within the Apache Xerces Java (XercesJ) XML parser when handling specially crafted XML document payloads. This causes, the XercesJ XML parser to wait in an infinite loop, which may sometimes consume system resources for prolonged duration. This vulnerability is present within XercesJ version 2.12.1 and the previous versions."}, {"displayName": "net.minidev : json-smart : 2.4.8", "cve": "CVE-2023-1370", "description": "[Json-smart](https://netplex.github.io/json-smart/) is a performance focused, JSON processor lib.\n\nWhen reaching a \u2018[\u2018 or \u2018{\u2018 character in the JSON input, the code parses an array or an object respectively.\n\nIt was discovered that the code does not have any limit to the nesting of such arrays or objects. Since the parsing of nested arrays and objects is done recursively, nesting too many of them can cause a stack exhaustion (stack overflow) and crash the software.\n\n"}, {"displayName": "ansi-html : 0.0.7", "cve": "CVE-2021-23424", "description": "This affects all versions of package ansi-html. If an attacker provides a malicious string, it will get stuck processing the input for an extremely long time."}, {"displayName": "org.hsqldb : hsqldb : 2.2.8", "cve": "CVE-2022-41853", "description": "Those using java.sql.Statement or java.sql.PreparedStatement in hsqldb (HyperSQL DataBase) to process untrusted input may be vulnerable to a remote code execution attack. By default it is allowed to call any static method of any Java class in the classpath resulting in code execution. The issue can be prevented by updating to 2.7.1 or by setting the system property \"hsqldb.method_class_names\" to classes which are allowed to be called. For example, System.setProperty(\"hsqldb.method_class_names\", \"abc\") or Java argument -Dhsqldb.method_class_names=\"abc\" can be used. From version 2.7.1 all classes by default are not accessible except those in java.lang.Math and need to be manually enabled."}, {"displayName": "org.apache.xmlbeans : xmlbeans : 2.3.0", "cve": "CVE-2021-23926", "description": "The XML parsers used by XMLBeans up to version 2.6.0 did not set the properties needed to protect the user from malicious XML input. Vulnerabilities include possibilities for XML Entity Expansion attacks. Affects XMLBeans up to and including v2.6.0."}, {"displayName": "io.netty : netty-handler : 4.1.63.Final", "cve": "CVE-2023-34462", "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. The `SniHandler` can allocate up to 16MB of heap for each channel during the TLS handshake. When the handler or the channel does not have an idle timeout, it can be used to make a TCP server using the `SniHandler` to allocate 16MB of heap. The `SniHandler` class is a handler that waits for the TLS handshake to configure a `SslHandler` according to the indicated server name by the `ClientHello` record. For this matter it allocates a `ByteBuf` using the value defined in the `ClientHello` record. Normally the value of the packet should be smaller than the handshake packet but there are not checks done here and the way the code is written, it is possible to craft a packet that makes the `SslClientHelloHandler`. This vulnerability has been fixed in version 4.1.94.Final."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2015-6644", "description": "Bouncy Castle in Android before 5.1.1 LMY49F and 6.0 before 2016-01-01 allows attackers to obtain sensitive information via a crafted application, aka internal bug 24106146."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2016-1000338", "description": "In Bouncy Castle JCE Provider version 1.55 and earlier the DSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of 'invisible' data into a signed structure."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2016-1000339", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier the primary engine class used for AES was AESFastEngine. Due to the highly table driven approach used in the algorithm it turns out that if the data channel on the CPU can be monitored the lookup table accesses are sufficient to leak information on the AES key being used. There was also a leak in AESEngine although it was substantially less. AESEngine has been modified to remove any signs of leakage (testing carried out on Intel X86-64) and is now the primary AES class for the BC JCE provider from 1.56. Use of AESFastEngine is now only recommended where otherwise deemed appropriate."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2016-1000340", "description": "In the Bouncy Castle JCE Provider versions 1.51 to 1.55, a carry propagation bug was introduced in the implementation of squaring for several raw math classes have been fixed (org.bouncycastle.math.raw.Nat???). These classes are used by our custom elliptic curve implementations (org.bouncycastle.math.ec.custom.**), so there was the possibility of rare (in general usage) spurious calculations for elliptic curve scalar multiplications. Such errors would have been detected with high probability by the output validation for our scalar multipliers."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2016-1000341", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier DSA signature generation is vulnerable to timing attack. Where timings can be closely observed for the generation of signatures, the lack of blinding in 1.55, or earlier, may allow an attacker to gain information about the signature's k value and ultimately the private value as well."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2016-1000342", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier ECDSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of 'invisible' data into a signed structure."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2016-1000343", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier the DSA key pair generator generates a weak private key if used with default values. If the JCA key pair generator is not explicitly initialised with DSA parameters, 1.55 and earlier generates a private value assuming a 1024 bit key size. In earlier releases this can be dealt with by explicitly passing parameters to the key pair generator."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2016-1000344", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2016-1000345", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES/ECIES CBC mode vulnerable to padding oracle attack. For BC 1.55 and older, in an environment where timings can be easily observed, it is possible with enough observations to identify when the decryption is failing due to padding."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2016-1000346", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier the other party DH public key is not fully validated. This can cause issues as invalid keys can be used to reveal details about the other party's private key where static Diffie-Hellman is in use. As of release 1.56 the key parameters are checked on agreement calculation."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2016-1000352", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier the ECIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2020-0187", "description": "In engineSetMode of BaseBlockCipher.java, there is a possible incorrect cryptographic algorithm chosen due to an incomplete comparison. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10Android ID: A-148517383"}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2020-15522", "description": "Bouncy Castle BC Java before 1.66, BC C# .NET before 1.8.7, BC-FJA before 1.0.1.2, 1.0.2.1, and BC-FNA before 1.0.1.1 have a timing issue within the EC math library that can expose information about the private key when an attacker is able to observe timing information for the generation of multiple deterministic ECDSA signatures."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2020-26939", "description": "In Legion of the Bouncy Castle BC before 1.61 and BC-FJA before 1.0.1.2, attackers can obtain sensitive information about a private exponent because of Observable Differences in Behavior to Error Inputs. This occurs in org.bouncycastle.crypto.encodings.OAEPEncoding. Sending invalid ciphertext that decrypts to a short payload in the OAEP Decoder could result in the throwing of an early exception, potentially leaking some information about the private exponent of the RSA private key performing the encryption."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2023-33201", "description": "Bouncy Castle For Java before 1.74 is affected by an LDAP injection vulnerability. The vulnerability only affects applications that use an LDAP CertStore from Bouncy Castle to validate X.509 certificates. During the certificate validation process, Bouncy Castle inserts the certificate's Subject Name into an LDAP search filter without any escaping, which leads to an LDAP injection vulnerability."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2023-33202", "description": "Bouncy Castle for Java before 1.73 contains a potential Denial of Service (DoS) issue within the Bouncy Castle org.bouncycastle.openssl.PEMParser class. This class parses OpenSSL PEM encoded streams containing X.509 certificates, PKCS8 encoded keys, and PKCS7 objects. Parsing a file that has crafted ASN.1 data through the PEMParser causes an OutOfMemoryError, which can enable a denial of service attack. (For users of the FIPS Java API: BC-FJA 1.0.2.3 and earlier are affected; BC-FJA 1.0.2.4 is fixed.)"}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2024-29857", "description": "An issue was discovered in ECCurve.java and ECCurve.cs in Bouncy Castle Java (BC Java) before 1.78, BC Java LTS before 2.73.6, BC-FJA before 1.0.2.5, and BC C# .Net before 2.3.1. Importing an EC certificate with crafted F2m parameters can lead to excessive CPU consumption during the evaluation of the curve parameters."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.52", "cve": "CVE-2024-30171", "description": "An issue was discovered in Bouncy Castle Java TLS API and JSSE Provider before 1.78. Timing-based leakage may occur in RSA based handshakes because of exception processing."}, {"displayName": "com.google.protobuf : protobuf-java : 2.6.0", "cve": "CVE-2021-22569", "description": "An issue in protobuf-java allowed the interleaving of com.google.protobuf.UnknownFieldSet fields in such a way that would be processed out of order. A small malicious payload can occupy the parser for several minutes by creating large numbers of short-lived objects that cause frequent, repeated pauses. We recommend upgrading libraries beyond the vulnerable versions."}, {"displayName": "com.google.protobuf : protobuf-java : 2.6.0", "cve": "CVE-2022-3509", "description": "A parsing issue similar to CVE-2022-3171, but with textformat in protobuf-java core and lite versions prior to 3.21.7, 3.20.3, 3.19.6 and 3.16.3 can lead to a denial of service attack. Inputs containing multiple instances of non-repeated embedded messages with repeated or unknown fields causes objects to be converted back-n-forth between mutable and immutable forms, resulting in potentially long garbage collection pauses. We recommend updating to the versions mentioned above."}, {"displayName": "com.lowagie : itext : 2.1.7", "cve": "CVE-2017-9096", "description": "The XML parsers in iText before 5.5.12 and 7.x before 7.0.3 do not disable external entities, which might allow remote attackers to conduct XML external entity (XXE) attacks via a crafted PDF."}, {"displayName": "com.google.guava : guava : 20.0", "cve": "CVE-2018-10237", "description": "Unbounded memory allocation in Google Guava 11.0 through 24.x before 24.1.1 allows remote attackers to conduct denial of service attacks against servers that depend on this library and deserialize attacker-provided data, because the AtomicDoubleArray class (when serialized with Java serialization) and the CompoundOrdering class (when serialized with GWT serialization) perform eager allocation without appropriate checks on what a client has sent and whether the data size is reasonable."}, {"displayName": "com.google.guava : guava : 20.0", "cve": "CVE-2023-2976", "description": "Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class.\n\nEven though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.\n\n"}, {"displayName": "webpack : 4.47.0", "cve": "CVE-2023-28154", "description": "Webpack 5 before 5.76.0 does not avoid cross-realm object access. ImportParserPlugin.js mishandles the magic comment feature. An attacker who controls a property of an untrusted object can obtain access to the real global object."}, {"displayName": "org.springframework : spring-webmvc : 5.3.27", "cve": "CVE-2024-38816", "description": "Applications serving static resources through the functional web frameworks WebMvc.fn or WebFlux.fn are vulnerable to path traversal attacks. An attacker can craft malicious HTTP requests and obtain any file on the file system that is also accessible to the process in which the Spring application is running.\n\nSpecifically, an application is vulnerable when both of the following are true:\n\n  *  the web application uses RouterFunctions\u00a0to serve static resources\n  *  resource handling is explicitly configured with a FileSystemResource\u00a0location\n\n\nHowever, malicious requests are blocked and rejected when any of the following is true:\n\n  *  the  Spring Security HTTP Firewall https://docs.spring.io/spring-security/reference/servlet/exploits/firewall.html \u00a0is in use\n  *  the application runs on Tomcat or Jetty"}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.9.10.4", "cve": "CVE-2020-14060", "description": "FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to oadd.org.apache.xalan.lib.sql.JNDIConnectionPool (aka apache/drill)."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.9.10.4", "cve": "CVE-2020-14061", "description": "FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to oracle.jms.AQjmsQueueConnectionFactory, oracle.jms.AQjmsXATopicConnectionFactory, oracle.jms.AQjmsTopicConnectionFactory, oracle.jms.AQjmsXAQueueConnectionFactory, and oracle.jms.AQjmsXAConnectionFactory (aka weblogic/oracle-aqjms)."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.9.10.4", "cve": "CVE-2020-25649", "description": "A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.9.10.4", "cve": "CVE-2020-36518", "description": "jackson-databind before 2.13.0 allows a Java StackOverflow exception and denial of service via a large depth of nested objects."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.9.10.4", "cve": "CVE-2022-42003", "description": "In FasterXML jackson-databind before versions 2.13.4.1 and 2.12.17.1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.9.10.4", "cve": "CVE-2022-42004", "description": "In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization."}, {"displayName": "org.hibernate : hibernate : 3.2.7.ga", "cve": "CVE-2020-25638", "description": "A flaw was found in hibernate-core in versions prior to and including 5.4.23.Final. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SQL comments of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks. The highest threat from this vulnerability is to data confidentiality and integrity."}, {"displayName": "ip : 1.1.9", "cve": "CVE-2024-29415", "description": "The ip package through 2.0.1 for Node.js might allow SSRF because some IP addresses (such as 127.1, 01200034567, 012.1.2.3, 000:0:0000::01, and ::fFFf:127.0.0.1) are improperly categorized as globally routable via isPublic. NOTE: this issue exists because of an incomplete fix for CVE-2023-42282."}, {"displayName": "org.apache.xmlgraphics : batik-bridge : 1.7", "cve": "CVE-2022-38398", "description": "Server-Side Request Forgery (SSRF) vulnerability in Batik of Apache XML Graphics allows an attacker to load a url thru the jar protocol. This issue affects Apache XML Graphics Batik 1.14."}, {"displayName": "org.apache.xmlgraphics : batik-bridge : 1.7", "cve": "CVE-2022-38648", "description": "Server-Side Request Forgery (SSRF) vulnerability in Batik of Apache XML Graphics allows an attacker to fetch external resources. This issue affects Apache XML Graphics Batik 1.14."}, {"displayName": "org.apache.xmlgraphics : batik-bridge : 1.7", "cve": "CVE-2022-40146", "description": "Server-Side Request Forgery (SSRF) vulnerability in Batik of Apache XML Graphics allows an attacker to access files using a Jar url. This issue affects Apache XML Graphics Batik 1.14."}, {"displayName": "org.apache.xmlgraphics : batik-bridge : 1.7", "cve": "CVE-2022-41704", "description": "A vulnerability in Batik of Apache XML Graphics allows an attacker to run untrusted Java code from an SVG. This issue affects Apache XML Graphics prior to 1.16. It is recommended to update to version 1.16."}, {"displayName": "org.apache.xmlgraphics : batik-bridge : 1.7", "cve": "CVE-2022-44729", "description": "Server-Side Request Forgery (SSRF) vulnerability in Apache Software Foundation Apache XML Graphics Batik.This issue affects Apache XML Graphics Batik: 1.16.\n\nOn version 1.16, a malicious SVG could trigger loading external resources by default, causing resource consumption or in some cases even information disclosure. Users are recommended to upgrade to version 1.17 or later.\n\n"}, {"displayName": "com.google.javascript : closure-compiler : v20151015", "cve": "CVE-2018-10237", "description": "Unbounded memory allocation in Google Guava 11.0 through 24.x before 24.1.1 allows remote attackers to conduct denial of service attacks against servers that depend on this library and deserialize attacker-provided data, because the AtomicDoubleArray class (when serialized with Java serialization) and the CompoundOrdering class (when serialized with GWT serialization) perform eager allocation without appropriate checks on what a client has sent and whether the data size is reasonable."}, {"displayName": "com.google.javascript : closure-compiler : v20151015", "cve": "CVE-2021-22569", "description": "An issue in protobuf-java allowed the interleaving of com.google.protobuf.UnknownFieldSet fields in such a way that would be processed out of order. A small malicious payload can occupy the parser for several minutes by creating large numbers of short-lived objects that cause frequent, repeated pauses. We recommend upgrading libraries beyond the vulnerable versions."}, {"displayName": "com.google.javascript : closure-compiler : v20151015", "cve": "CVE-2022-3509", "description": "A parsing issue similar to CVE-2022-3171, but with textformat in protobuf-java core and lite versions prior to 3.21.7, 3.20.3, 3.19.6 and 3.16.3 can lead to a denial of service attack. Inputs containing multiple instances of non-repeated embedded messages with repeated or unknown fields causes objects to be converted back-n-forth between mutable and immutable forms, resulting in potentially long garbage collection pauses. We recommend updating to the versions mentioned above."}, {"displayName": "com.google.javascript : closure-compiler : v20151015", "cve": "CVE-2023-2976", "description": "Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class.\n\nEven though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.\n\n"}, {"displayName": "lodash : 0.9.2", "cve": "CVE-2018-3721", "description": "lodash node module before 4.17.5 suffers from a Modification of Assumed-Immutable Data (MAID) vulnerability via defaultsDeep, merge, and mergeWith functions, which allows a malicious user to modify the prototype of \"Object\" via __proto__, causing the addition or modification of an existing property that will exist on all objects."}, {"displayName": "lodash : 0.9.2", "cve": "CVE-2021-23337", "description": "Lodash versions prior to 4.17.21 are vulnerable to Command Injection via the template function."}, {"displayName": "org.yaml : snakeyaml : 1.30", "cve": "CVE-2022-1471", "description": "SnakeYaml's Constructor() class does not restrict types which can be instantiated during deserialization.\u00a0Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml's SafeConsturctor when parsing untrusted content to restrict deserialization. We recommend upgrading to version 2.0 and beyond.\n"}, {"displayName": "org.yaml : snakeyaml : 1.30", "cve": "CVE-2022-25857", "description": "The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections."}, {"displayName": "org.yaml : snakeyaml : 1.30", "cve": "CVE-2022-38749", "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."}, {"displayName": "org.yaml : snakeyaml : 1.30", "cve": "CVE-2022-38750", "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."}, {"displayName": "org.yaml : snakeyaml : 1.30", "cve": "CVE-2022-38751", "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."}, {"displayName": "org.yaml : snakeyaml : 1.30", "cve": "CVE-2022-38752", "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow."}, {"displayName": "org.yaml : snakeyaml : 1.30", "cve": "CVE-2022-41854", "description": "Those using Snakeyaml to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2016-1000338", "description": "In Bouncy Castle JCE Provider version 1.55 and earlier the DSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of 'invisible' data into a signed structure."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2016-1000339", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier the primary engine class used for AES was AESFastEngine. Due to the highly table driven approach used in the algorithm it turns out that if the data channel on the CPU can be monitored the lookup table accesses are sufficient to leak information on the AES key being used. There was also a leak in AESEngine although it was substantially less. AESEngine has been modified to remove any signs of leakage (testing carried out on Intel X86-64) and is now the primary AES class for the BC JCE provider from 1.56. Use of AESFastEngine is now only recommended where otherwise deemed appropriate."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2016-1000340", "description": "In the Bouncy Castle JCE Provider versions 1.51 to 1.55, a carry propagation bug was introduced in the implementation of squaring for several raw math classes have been fixed (org.bouncycastle.math.raw.Nat???). These classes are used by our custom elliptic curve implementations (org.bouncycastle.math.ec.custom.**), so there was the possibility of rare (in general usage) spurious calculations for elliptic curve scalar multiplications. Such errors would have been detected with high probability by the output validation for our scalar multipliers."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2016-1000341", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier DSA signature generation is vulnerable to timing attack. Where timings can be closely observed for the generation of signatures, the lack of blinding in 1.55, or earlier, may allow an attacker to gain information about the signature's k value and ultimately the private value as well."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2016-1000342", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier ECDSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of 'invisible' data into a signed structure."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2016-1000343", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier the DSA key pair generator generates a weak private key if used with default values. If the JCA key pair generator is not explicitly initialised with DSA parameters, 1.55 and earlier generates a private value assuming a 1024 bit key size. In earlier releases this can be dealt with by explicitly passing parameters to the key pair generator."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2016-1000344", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2016-1000345", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES/ECIES CBC mode vulnerable to padding oracle attack. For BC 1.55 and older, in an environment where timings can be easily observed, it is possible with enough observations to identify when the decryption is failing due to padding."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2016-1000346", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier the other party DH public key is not fully validated. This can cause issues as invalid keys can be used to reveal details about the other party's private key where static Diffie-Hellman is in use. As of release 1.56 the key parameters are checked on agreement calculation."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2016-1000352", "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier the ECIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2018-1000180", "description": "Bouncy Castle BC 1.54 - 1.59, BC-FJA 1.0.0, BC-FJA 1.0.1 and earlier have a flaw in the Low-level interface to RSA key pair generator, specifically RSA Key Pairs generated in low-level API with added certainty may have less M-R tests than expected. This appears to be fixed in versions BC 1.60 beta 4 and later, BC-FJA 1.0.2 and later."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2020-0187", "description": "In engineSetMode of BaseBlockCipher.java, there is a possible incorrect cryptographic algorithm chosen due to an incomplete comparison. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10Android ID: A-148517383"}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2020-15522", "description": "Bouncy Castle BC Java before 1.66, BC C# .NET before 1.8.7, BC-FJA before 1.0.1.2, 1.0.2.1, and BC-FNA before 1.0.1.1 have a timing issue within the EC math library that can expose information about the private key when an attacker is able to observe timing information for the generation of multiple deterministic ECDSA signatures."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2020-26939", "description": "In Legion of the Bouncy Castle BC before 1.61 and BC-FJA before 1.0.1.2, attackers can obtain sensitive information about a private exponent because of Observable Differences in Behavior to Error Inputs. This occurs in org.bouncycastle.crypto.encodings.OAEPEncoding. Sending invalid ciphertext that decrypts to a short payload in the OAEP Decoder could result in the throwing of an early exception, potentially leaking some information about the private exponent of the RSA private key performing the encryption."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2023-33201", "description": "Bouncy Castle For Java before 1.74 is affected by an LDAP injection vulnerability. The vulnerability only affects applications that use an LDAP CertStore from Bouncy Castle to validate X.509 certificates. During the certificate validation process, Bouncy Castle inserts the certificate's Subject Name into an LDAP search filter without any escaping, which leads to an LDAP injection vulnerability."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2023-33202", "description": "Bouncy Castle for Java before 1.73 contains a potential Denial of Service (DoS) issue within the Bouncy Castle org.bouncycastle.openssl.PEMParser class. This class parses OpenSSL PEM encoded streams containing X.509 certificates, PKCS8 encoded keys, and PKCS7 objects. Parsing a file that has crafted ASN.1 data through the PEMParser causes an OutOfMemoryError, which can enable a denial of service attack. (For users of the FIPS Java API: BC-FJA 1.0.2.3 and earlier are affected; BC-FJA 1.0.2.4 is fixed.)"}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2024-29857", "description": "An issue was discovered in ECCurve.java and ECCurve.cs in Bouncy Castle Java (BC Java) before 1.78, BC Java LTS before 2.73.6, BC-FJA before 1.0.2.5, and BC C# .Net before 2.3.1. Importing an EC certificate with crafted F2m parameters can lead to excessive CPU consumption during the evaluation of the curve parameters."}, {"displayName": "org.bouncycastle : bcprov-jdk15on : 1.55", "cve": "CVE-2024-30171", "description": "An issue was discovered in Bouncy Castle Java TLS API and JSSE Provider before 1.78. Timing-based leakage may occur in RSA based handshakes because of exception processing."}, {"displayName": "postcss : 7.0.39", "cve": "CVE-2023-44270", "description": "An issue was discovered in PostCSS before 8.4.31. The vulnerability affects linters using PostCSS to parse external untrusted CSS. An attacker can prepare CSS in such a way that it will contains parts parsed by PostCSS as a CSS comment. After processing by PostCSS, it will be included in the PostCSS output in CSS nodes (rules, properties) despite being included in a comment."}, {"displayName": "commons-httpclient : commons-httpclient : 3.1", "cve": "CVE-2012-5783", "description": "Apache Commons HttpClient 3.x, as used in Amazon Flexible Payments Service (FPS) merchant Java SDK and other products, does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate."}, {"displayName": "com.squareup.okio : okio : 1.6.0", "cve": "CVE-2023-3635", "description": "GzipSource does not handle an exception that might be raised when parsing a malformed gzip buffer. This may lead to denial of service of the Okio client when handling a crafted GZIP archive, by using the GzipSource class.\n\n"}, {"displayName": "org.eclipse.jetty : jetty-util : 9.3.21.v20170918", "cve": "CVE-2018-12536", "description": "In Eclipse Jetty Server, all 9.x versions, on webapps deployed using default Error Handling, when an intentionally bad query arrives that doesn't match a dynamic url-pattern, and is eventually handled by the DefaultServlet's static file serving, the bad characters can trigger a java.nio.file.InvalidPathException which includes the full path to the base resource directory that the DefaultServlet and/or webapp is using. If this InvalidPathException is then handled by the default Error Handler, the InvalidPathException message is included in the error response, revealing the full server path to the requesting system."}, {"displayName": "org.eclipse.jetty : jetty-util : 9.3.21.v20170918", "cve": "CVE-2019-10241", "description": "In Eclipse Jetty version 9.2.26 and older, 9.3.25 and older, and 9.4.15 and older, the server is vulnerable to XSS conditions if a remote client USES a specially formatted URL against the DefaultServlet or ResourceHandler that is configured for showing a Listing of directory contents."}, {"displayName": "org.eclipse.jetty : jetty-util : 9.3.21.v20170918", "cve": "CVE-2019-10246", "description": "In Eclipse Jetty version 9.2.27, 9.3.26, and 9.4.16, the server running on Windows is vulnerable to exposure of the fully qualified Base Resource directory name on Windows to a remote client when it is configured for showing a Listing of directory contents. This information reveal is restricted to only the content in the configured base resource directories."}, {"displayName": "org.eclipse.jetty : jetty-util : 9.3.21.v20170918", "cve": "CVE-2023-26048", "description": "Jetty is a java based web server and servlet engine. In affected versions servlets with multipart support (e.g. annotated with `@MultipartConfig`) that call `HttpServletRequest.getParameter()` or `HttpServletRequest.getParts()` may cause `OutOfMemoryError` when the client sends a multipart request with a part that has a name but no filename and very large content. This happens even with the default settings of `fileSizeThreshold=0` which should stream the whole part content to disk. An attacker client may send a large multipart request and cause the server to throw `OutOfMemoryError`. However, the server may be able to recover after the `OutOfMemoryError` and continue its service -- although it may take some time. This issue has been patched in versions 9.4.51, 10.0.14, and 11.0.14. Users are advised to upgrade. Users unable to upgrade may set the multipart parameter `maxRequestSize` which must be set to a non-negative value, so the whole multipart content is limited (although still read into memory)."}, {"displayName": "glob-parent : 3.1.0", "cve": "CVE-2020-28469", "description": "This affects the package glob-parent before 5.1.2. The enclosure regex used to check for strings ending in enclosure containing path separator."}, {"displayName": "org.apache.httpcomponents : httpclient : 4.5.9", "cve": "CVE-2020-13956", "description": "Apache HttpClient versions prior to version 4.5.13 and 5.0.3 can misinterpret malformed authority component in request URIs passed to the library as java.net.URI object and pick the wrong target host for request execution."}, {"displayName": "com.oracle.jdbc : ojdbc6 : 11.2.0.4", "cve": "CVE-2016-3506", "description": "Unspecified vulnerability in the JDBC component in Oracle Database Server 11.2.0.4, 12.1.0.1, and 12.1.0.2; the Oracle Retail Xstore Point of Service 5.5, 6.0, 6.5, 7.0, 7.1, 15.0, and 16.0; the Oracle Retail Warehouse Management System 14.04, 14.1.3, and 15.0.1; the Oracle Retail Workforce Management 1.60.7, and 1.64.0; the Oracle Retail Clearance Optimization Engine 13.4; the Oracle Retail Markdown Optimization 13.4 and 14.0; and Oracle Retail Merchandising System 16.0 allows remote attackers to affect confidentiality, integrity, and availability via unknown vectors."}, {"displayName": "org.springframework : spring-web : 5.3.27", "cve": "CVE-2016-1000027", "description": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."}, {"displayName": "org.springframework : spring-web : 5.3.27", "cve": "CVE-2024-22243", "description": "Applications that use UriComponentsBuilder\u00a0to parse an externally provided URL (e.g. through a query parameter) AND\u00a0perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html \u00a0attack or to a SSRF attack if the URL is used after passing validation checks.\n"}, {"displayName": "org.springframework : spring-web : 5.3.27", "cve": "CVE-2024-22262", "description": "Applications that use UriComponentsBuilder\u00a0to parse an externally provided URL (e.g. through a query parameter) AND\u00a0perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html \u00a0attack or to a SSRF attack if the URL is used after passing validation checks.\n\nThis is the same as  CVE-2024-22259 https://spring.io/security/cve-2024-22259 \u00a0and  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.\n\n"}, {"displayName": "org.springframework : spring-web : 5.3.27", "cve": "CVE-2024-38809", "description": "Spring Framework - Regular expression Denial of Service (ReDoS)"}, {"displayName": "org.camunda.bpm : camunda-engine-rest : war : 7.12.0", "cve": "CVE-2020-25649", "description": "A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity."}, {"displayName": "org.camunda.bpm : camunda-engine-rest : war : 7.12.0", "cve": "CVE-2020-36518", "description": "jackson-databind before 2.13.0 allows a Java StackOverflow exception and denial of service via a large depth of nested objects."}, {"displayName": "org.camunda.bpm : camunda-engine-rest : war : 7.12.0", "cve": "CVE-2022-42003", "description": "In FasterXML jackson-databind before versions 2.13.4.1 and 2.12.17.1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled."}, {"displayName": "org.camunda.bpm : camunda-engine-rest : war : 7.12.0", "cve": "CVE-2022-42004", "description": "In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization."}, {"displayName": "org.camunda.bpm : camunda-engine-rest : war : 7.12.0", "cve": "CVE-2023-24998", "description": "Apache Commons FileUpload before 1.5 does not limit the number of request parts to be processed resulting in the possibility of an attacker triggering a DoS with a malicious upload or series of uploads.\n\n\n\n\nNote that, like all of the file upload limits, the\n          new configuration option (FileUploadBase#setFileCountMax) is not\n          enabled by default and must be explicitly configured.\n\n\n"}, {"displayName": "@ag-grid-community/core : 28.2.1", "cve": "CVE-2024-38996", "description": "ag-grid-community v31.3.2 and ag-grid-enterprise v31.3.2 were discovered to contain a prototype pollution via the _.mergeDeep function. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties."}, {"displayName": "org.apache.james : apache-mime4j-core : 0.7.2", "cve": "CVE-2024-21742", "description": "Improper input validation allows for header injection in MIME4J library when using MIME4J DOM for composing message.\nThis can be exploited by an attacker to add unintended headers to MIME messages.\n"}, {"displayName": "org.json : json : 20160810", "cve": "CVE-2022-45688", "description": "A stack overflow in the XML.toJSONObject component of hutool-json v5.8.10 allows attackers to cause a Denial of Service (DoS) via crafted JSON or XML data."}, {"displayName": "org.json : json : 20160810", "cve": "CVE-2023-5072", "description": "Denial of Service  in JSON-Java versions up to and including 20230618. \u00a0A bug in the parser means that an input string of modest size can lead to indefinite amounts of memory being used."}, {"displayName": "org.apache.commons : commons-configuration2 : 2.9.0", "cve": "CVE-2024-29131", "description": "Out-of-bounds Write vulnerability in Apache Commons Configuration.This issue affects Apache Commons Configuration: from 2.0 before 2.10.1.\n\nUsers are recommended to upgrade to version 2.10.1, which fixes the issue.\n\n"}, {"displayName": "org.apache.commons : commons-configuration2 : 2.9.0", "cve": "CVE-2024-29133", "description": "Out-of-bounds Write vulnerability in Apache Commons Configuration.This issue affects Apache Commons Configuration: from 2.0 before 2.10.1.\n\nUsers are recommended to upgrade to version 2.10.1, which fixes the issue.\n\n"}, {"displayName": "browserslist : 3.2.8", "cve": "CVE-2021-23364", "description": "The package browserslist from 4.0.0 and before 4.16.5 are vulnerable to Regular Expression Denial of Service (ReDoS) during parsing of queries."}, {"displayName": "nth-check : 1.0.2", "cve": "CVE-2021-3803", "description": "nth-check is vulnerable to Inefficient Regular Expression Complexity"}, {"displayName": "commons-fileupload : commons-fileupload : 1.1", "cve": "CVE-2013-0248", "description": "The default configuration of javax.servlet.context.tempdir in Apache Commons FileUpload 1.0 through 1.2.2 uses the /tmp directory for uploaded files, which allows local users to overwrite arbitrary files via an unspecified symlink attack."}, {"displayName": "commons-fileupload : commons-fileupload : 1.1", "cve": "CVE-2013-2186", "description": "The DiskFileItem class in Apache Commons FileUpload, as used in Red Hat JBoss BRMS 5.3.1; JBoss Portal 4.3 CP07, 5.2.2, and 6.0.0; and Red Hat JBoss Web Server 1.0.2 allows remote attackers to write to arbitrary files via a NULL byte in a file name in a serialized instance."}, {"displayName": "commons-fileupload : commons-fileupload : 1.1", "cve": "CVE-2014-0050", "description": "MultipartStream.java in Apache Commons FileUpload before 1.3.1, as used in Apache Tomcat, JBoss Web, and other products, allows remote attackers to cause a denial of service (infinite loop and CPU consumption) via a crafted Content-Type header that bypasses a loop's intended exit conditions."}, {"displayName": "commons-fileupload : commons-fileupload : 1.1", "cve": "CVE-2016-1000031", "description": "Apache Commons FileUpload before 1.3.3 DiskFileItem File Manipulation Remote Code Execution"}, {"displayName": "commons-fileupload : commons-fileupload : 1.1", "cve": "CVE-2016-3092", "description": "The MultipartStream class in Apache Commons Fileupload before 1.3.2, as used in Apache Tomcat 7.x before 7.0.70, 8.x before 8.0.36, 8.5.x before 8.5.3, and 9.x before 9.0.0.M7 and other products, allows remote attackers to cause a denial of service (CPU consumption) via a long boundary string."}, {"displayName": "commons-fileupload : commons-fileupload : 1.1", "cve": "CVE-2023-24998", "description": "Apache Commons FileUpload before 1.5 does not limit the number of request parts to be processed resulting in the possibility of an attacker triggering a DoS with a malicious upload or series of uploads.\n\n\n\n\nNote that, like all of the file upload limits, the\n          new configuration option (FileUploadBase#setFileCountMax) is not\n          enabled by default and must be explicitly configured.\n\n\n"}, {"displayName": "commons-net : commons-net : 3.6", "cve": "CVE-2021-37533", "description": "Prior to Apache Commons Net 3.9.0, Net's FTP client trusts the host from PASV response by default. A malicious server can redirect the Commons Net code to use a different host, but the user has to connect to the malicious server in the first place. This may lead to leakage of information about services running on the private network of the client. The default in version 3.9.0 is now false to ignore such hosts, as cURL does. See https://issues.apache.org/jira/browse/NET-711."}, {"displayName": "webpack : 4.42.0", "cve": "CVE-2023-28154", "description": "Webpack 5 before 5.76.0 does not avoid cross-realm object access. ImportParserPlugin.js mishandles the magic comment feature. An attacker who controls a property of an untrusted object can obtain access to the real global object."}, {"displayName": "ssri : 5.3.0", "cve": "CVE-2021-27290", "description": "ssri 5.2.2-8.0.0, fixed in 8.0.1, processes SRIs using a regular expression which is vulnerable to a denial of service. Malicious SRIs could take an extremely long time to process, leading to denial of service. This issue only affects consumers using the strict option."}, {"displayName": "eventsource : 1.1.2", "cve": "CVE-2022-1650", "description": "Improper Removal of Sensitive Information Before Storage or Transfer in GitHub repository eventsource/eventsource prior to v2.0.2.\n\n"}, {"displayName": "io.netty : netty-handler : 4.1.70.Final", "cve": "CVE-2023-34462", "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. The `SniHandler` can allocate up to 16MB of heap for each channel during the TLS handshake. When the handler or the channel does not have an idle timeout, it can be used to make a TCP server using the `SniHandler` to allocate 16MB of heap. The `SniHandler` class is a handler that waits for the TLS handshake to configure a `SslHandler` according to the indicated server name by the `ClientHello` record. For this matter it allocates a `ByteBuf` using the value defined in the `ClientHello` record. Normally the value of the packet should be smaller than the handshake packet but there are not checks done here and the way the code is written, it is possible to craft a packet that makes the `SslClientHelloHandler`. This vulnerability has been fixed in version 4.1.94.Final."}, {"displayName": "com.nimbusds : nimbus-jose-jwt : 9.22", "cve": "CVE-2023-52428", "description": "In Connect2id Nimbus JOSE+JWT before 9.37.2, an attacker can cause a denial of service (resource consumption) via a large JWE p2c header value (aka iteration count) for the PasswordBasedDecrypter (PBKDF2) component."}, {"displayName": "org.codehaus.woodstox : wstx-asl : 3.2.1", "cve": "CVE-2019-12401", "description": "Solr versions 1.3.0 to 1.4.1, 3.1.0 to 3.6.2 and 4.0.0 to 4.10.4 are vulnerable to an XML resource consumption attack (a.k.a. Lol Bomb) via it\u2019s update handler.?By leveraging XML DOCTYPE and ENTITY type elements, the attacker can create a pattern that will expand when the server parses the XML causing OOMs."}, {"displayName": "org.apache.camel : camel-core : 2.20.0", "cve": "CVE-2018-8027", "description": "Apache Camel 2.20.0 to 2.20.3 and 2.21.0 Core is vulnerable to XXE in XSD validation processor."}, {"displayName": "org.apache.camel : camel-core : 2.20.0", "cve": "CVE-2019-0194", "description": "Apache Camel's File is vulnerable to directory traversal. Camel 2.21.0 to 2.21.3, 2.22.0 to 2.22.2, 2.23.0 and the unsupported Camel 2.x (2.19 and earlier) versions may be also affected."}, {"displayName": "org.apache.camel : camel-core : 2.20.0", "cve": "CVE-2020-11994", "description": "Server-Side Template Injection and arbitrary file disclosure on Camel templating components"}, {"displayName": "io.netty : netty-common : 4.1.70.Final", "cve": "CVE-2022-24823", "description": "Netty is an open-source, asynchronous event-driven network application framework. The package `io.netty:netty-codec-http` prior to version 4.1.77.Final contains an insufficient fix for CVE-2021-21290. When Netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. This only impacts applications running on Java version 6 and lower. Additionally, this vulnerability impacts code running on Unix-like systems, and very old versions of Mac OSX and Windows as they all share the system temporary directory between all users. Version 4.1.77.Final contains a patch for this vulnerability. As a workaround, specify one's own `java.io.tmpdir` when starting the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user."}, {"displayName": "org.apache.camel : camel-netty4 : 2.20.0", "cve": "CVE-2020-11973", "description": "Apache Camel Netty enables Java deserialization by default. Apache Camel 2.22.x, 2.23.x, 2.24.x, 2.25.0, 3.0.0 up to 3.1.0 are affected. 2.x users should upgrade to 2.25.1, 3.x users should upgrade to 3.2.0."}, {"displayName": "vue-template-compiler : 2.7.16", "cve": "CVE-2024-6783", "description": "A vulnerability has been discovered in Vue, that allows an attacker to perform XSS via prototype pollution. The attacker could change the prototype chain of some properties such as `Object.prototype.staticClass` or `Object.prototype.staticStyle` to execute arbitrary JavaScript code."}, {"displayName": "tough-cookie : 2.5.0", "cve": "CVE-2023-26136", "description": "Versions of the package tough-cookie before 4.1.3 are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in rejectPublicSuffixes=false mode. This issue arises from the manner in which the objects are initialized."}, {"displayName": "org.apache.camel : camel-mvel : 2.20.0", "cve": "CVE-2020-11994", "description": "Server-Side Template Injection and arbitrary file disclosure on Camel templating components"}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2017-7525", "description": "A deserialization flaw was discovered in the jackson-databind, versions before 2.6.7.1, 2.7.9.1 and 2.8.9, which could allow an unauthenticated user to perform code execution by sending the maliciously crafted input to the readValue method of the ObjectMapper."}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2017-7657", "description": "In Eclipse Jetty, versions 9.2.x and older, 9.3.x (all configurations), and 9.4.x (non-default configuration with RFC2616 compliance enabled), transfer-encoding chunks are handled poorly. The chunk length parsing was vulnerable to an integer overflow. Thus a large chunk size could be interpreted as a smaller chunk size and content sent as chunk body could be interpreted as a pipelined request. If Jetty was deployed behind an intermediary that imposed some authorization and that intermediary allowed arbitrarily large chunks to be passed on unchanged, then this flaw could be used to bypass the authorization imposed by the intermediary as the fake pipelined request would not be interpreted by the intermediary as a request."}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2017-7658", "description": "In Eclipse Jetty Server, versions 9.2.x and older, 9.3.x (all non HTTP/1.x configurations), and 9.4.x (all HTTP/1.x configurations), when presented with two content-lengths headers, Jetty ignored the second. When presented with a content-length and a chunked encoding header, the content-length was ignored (as per RFC 2616). If an intermediary decided on the shorter length, but still passed on the longer body, then body content could be interpreted by Jetty as a pipelined request. If the intermediary was imposing authorization, the fake pipelined request would bypass that authorization."}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2017-9735", "description": "Jetty through 9.4.x is prone to a timing channel in util/security/Password.java, which makes it easier for remote attackers to obtain access by observing elapsed times before rejection of incorrect passwords."}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2018-12536", "description": "In Eclipse Jetty Server, all 9.x versions, on webapps deployed using default Error Handling, when an intentionally bad query arrives that doesn't match a dynamic url-pattern, and is eventually handled by the DefaultServlet's static file serving, the bad characters can trigger a java.nio.file.InvalidPathException which includes the full path to the base resource directory that the DefaultServlet and/or webapp is using. If this InvalidPathException is then handled by the default Error Handler, the InvalidPathException message is included in the error response, revealing the full server path to the requesting system."}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2019-10241", "description": "In Eclipse Jetty version 9.2.26 and older, 9.3.25 and older, and 9.4.15 and older, the server is vulnerable to XSS conditions if a remote client USES a specially formatted URL against the DefaultServlet or ResourceHandler that is configured for showing a Listing of directory contents."}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2019-10246", "description": "In Eclipse Jetty version 9.2.27, 9.3.26, and 9.4.16, the server running on Windows is vulnerable to exposure of the fully qualified Base Resource directory name on Windows to a remote client when it is configured for showing a Listing of directory contents. This information reveal is restricted to only the content in the configured base resource directories."}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2019-10247", "description": "In Eclipse Jetty version 7.x, 8.x, 9.2.27 and older, 9.3.26 and older, and 9.4.16 and older, the server running on any OS and Jetty version combination will reveal the configured fully qualified directory base resource location on the output of the 404 error for not finding a Context that matches the requested path. The default server behavior on jetty-distribution and jetty-home will include at the end of the Handler tree a DefaultHandler, which is responsible for reporting this 404 error, it presents the various configured contexts as HTML for users to click through to. This produced HTML includes output that contains the configured fully qualified directory base resource location for each context."}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2020-36518", "description": "jackson-databind before 2.13.0 allows a Java StackOverflow exception and denial of service via a large depth of nested objects."}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2021-28165", "description": "In Eclipse Jetty 7.2.2 to 9.4.38, 10.0.0.alpha0 to 10.0.1, and 11.0.0.alpha0 to 11.0.1, CPU usage can reach 100% upon receiving a large invalid TLS frame."}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2022-2047", "description": "In Eclipse Jetty versions 9.4.0 thru 9.4.46, and 10.0.0 thru 10.0.9, and 11.0.0 thru 11.0.9 versions, the parsing of the authority segment of an http scheme URI, the Jetty HttpURI class improperly detects an invalid input as a hostname. This can lead to failures in a Proxy scenario."}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2022-42004", "description": "In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization."}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2023-26048", "description": "Jetty is a java based web server and servlet engine. In affected versions servlets with multipart support (e.g. annotated with `@MultipartConfig`) that call `HttpServletRequest.getParameter()` or `HttpServletRequest.getParts()` may cause `OutOfMemoryError` when the client sends a multipart request with a part that has a name but no filename and very large content. This happens even with the default settings of `fileSizeThreshold=0` which should stream the whole part content to disk. An attacker client may send a large multipart request and cause the server to throw `OutOfMemoryError`. However, the server may be able to recover after the `OutOfMemoryError` and continue its service -- although it may take some time. This issue has been patched in versions 9.4.51, 10.0.14, and 11.0.14. Users are advised to upgrade. Users unable to upgrade may set the multipart parameter `maxRequestSize` which must be set to a non-negative value, so the whole multipart content is limited (although still read into memory)."}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2023-26049", "description": "Jetty is a java based web server and servlet engine. Nonstandard cookie parsing in Jetty may allow an attacker to smuggle cookies within other cookies, or otherwise perform unintended behavior by tampering with the cookie parsing mechanism. If Jetty sees a cookie VALUE that starts with `\"` (double quote), it will continue to read the cookie string until it sees a closing quote -- even if a semicolon is encountered. So, a cookie header such as: `DISPLAY_LANGUAGE=\"b; JSESSIONID=1337; c=d\"` will be parsed as one cookie, with the name DISPLAY_LANGUAGE and a value of b; JSESSIONID=1337; c=d instead of 3 separate cookies. This has security implications because if, say, JSESSIONID is an HttpOnly cookie, and the DISPLAY_LANGUAGE cookie value is rendered on the page, an attacker can smuggle the JSESSIONID cookie into the DISPLAY_LANGUAGE cookie and thereby exfiltrate it. This is significant when an intermediary is enacting some policy based on cookies, so a smuggled cookie can bypass that policy yet still be seen by the Jetty server or its logging system. This issue has been addressed in versions 9.4.51, 10.0.14, 11.0.14, and 12.0.0.beta0 and users are advised to upgrade. There are no known workarounds for this issue."}, {"displayName": "net.sf.ehcache : ehcache : 2.10.3", "cve": "CVE-2023-40167", "description": "Jetty is a Java based web server and servlet engine. Prior to versions 9.4.52, 10.0.16, 11.0.16, and 12.0.1, Jetty accepts the `+` character proceeding the content-length value in a HTTP/1 header field.  This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses.  There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response. Versions 9.4.52, 10.0.16, 11.0.16, and 12.0.1 contain a patch for this issue. There is no workaround as there is no known exploit scenario."}, {"displayName": "serialize-javascript : 1.9.1", "cve": "CVE-2019-16769", "description": "The serialize-javascript npm package before version 2.1.1 is vulnerable to Cross-site Scripting (XSS). It does not properly mitigate against unsafe characters in serialized regular expressions. This vulnerability is not affected on Node.js environment since Node.js's implementation of RegExp.prototype.toString() backslash-escapes all forward slashes in regular expressions. If serialized data of regular expression objects are used in an environment other than Node.js, it is affected by this vulnerability."}, {"displayName": "html-minifier : 3.5.21", "cve": "CVE-2022-37620", "description": "A Regular Expression Denial of Service (ReDoS) flaw was found in kangax html-minifier 4.0.0 via the candidate variable in htmlminifier.js."}, {"displayName": "org.apache.camel : camel-support : 3.14.0", "cve": "CVE-2024-22371", "description": "Exposure of sensitive data by by crafting a malicious EventFactory and providing a custom ExchangeCreatedEvent that exposes sensitive data. Vulnerability in Apache Camel.This issue affects Apache Camel: from 3.21.X through 3.21.3, from 3.22.X through 3.22.0, from 4.0.X through 4.0.3, from 4.X through 4.3.0.\n\nUsers are recommended to upgrade to version 3.21.4, 3.22.1, 4.0.4 or 4.4.0, which fixes the issue.\n\n"}, {"displayName": "org.apache.httpcomponents : httpclient : 4.5.3", "cve": "CVE-2020-13956", "description": "Apache HttpClient versions prior to version 4.5.13 and 5.0.3 can misinterpret malformed authority component in request URIs passed to the library as java.net.URI object and pick the wrong target host for request execution."}, {"displayName": "io.netty : netty-codec : 4.1.63.Final", "cve": "CVE-2021-37136", "description": "The Bzip2 decompression decoder function doesn't allow setting size restrictions on the decompressed output data (which affects the allocation size used during decompression). All users of Bzip2Decoder are affected. The malicious input can trigger an OOME and so a DoS attack"}, {"displayName": "io.netty : netty-codec : 4.1.63.Final", "cve": "CVE-2021-37137", "description": "The Snappy frame decoder function doesn't restrict the chunk length which may lead to excessive memory usage. Beside this it also may buffer reserved skippable chunks until the whole chunk was received which may lead to excessive memory usage as well. This vulnerability can be triggered by supplying malicious input that decompresses to a very big size (via a network stream or a file) or by sending a huge skippable chunk."}, {"displayName": "io.netty : netty-codec : 4.1.63.Final", "cve": "CVE-2022-41915", "description": "Netty project is an event-driven asynchronous network application framework. Starting in version 4.1.83.Final and prior to 4.1.86.Final, when calling `DefaultHttpHeadesr.set` with an _iterator_ of values, header value validation was not performed, allowing malicious header values in the iterator to perform HTTP Response Splitting. This issue has been patched in version 4.1.86.Final. Integrators can work around the issue by changing the `DefaultHttpHeaders.set(CharSequence, Iterator<?>)` call, into a `remove()` call, and call `add()` in a loop over the iterator of values."}, {"displayName": "ch.qos.logback : logback-classic : 1.2.12", "cve": "CVE-2023-6378", "description": "A serialization vulnerability in logback receiver component part of \nlogback version 1.4.11 allows an attacker to mount a Denial-Of-Service \nattack by sending poisoned data.\n\n"}, {"displayName": "commons-httpclient : commons-httpclient : 3.0.1", "cve": "CVE-2012-5783", "description": "Apache Commons HttpClient 3.x, as used in Amazon Flexible Payments Service (FPS) merchant Java SDK and other products, does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate."}, {"displayName": "loglevel : 1.9.1", "cve": "CVE-2024-38998", "description": "jrburke requirejs v2.3.6 was discovered to contain a prototype pollution via the function config. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties."}, {"displayName": "request : 2.88.2", "cve": "CVE-2023-28155", "description": "The Request package through 2.88.1 for Node.js allows a bypass of SSRF mitigations via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP). NOTE: This vulnerability only affects products that are no longer supported by the maintainer."}, {"displayName": "org.springframework.boot : spring-boot-autoconfigure : 2.7.11", "cve": "CVE-2023-20883", "description": "In Spring Boot versions 3.0.0 - 3.0.6, 2.7.0 - 2.7.11, 2.6.0 - 2.6.14, 2.5.0 - 2.5.14 and older unsupported versions, there is potential for a denial-of-service (DoS) attack if Spring MVC is used together with a reverse proxy cache."}, {"displayName": "underscore.string : 2.2.1", "cve": "CVE-2019-11358", "description": "jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution. If an unsanitized source object contained an enumerable __proto__ property, it could extend the native Object.prototype."}, {"displayName": "path-to-regexp : 0.1.7", "cve": "CVE-2024-45296", "description": "path-to-regexp turns path strings into a regular expressions. In certain cases, path-to-regexp will output a regular expression that can be exploited to cause poor performance. Because JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and lead to a DoS. The bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (.). For users of 0.1, upgrade to 0.1.10. All other users should upgrade to 8.0.0."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2013-7285", "description": "Xstream API versions up to 1.4.6 and version 1.4.10, if the security framework has not been initialized, may allow a remote attacker to run arbitrary shell commands by manipulating the processed input stream when unmarshaling XML or any supported format. e.g. JSON."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2019-10173", "description": "It was found that xstream API version 1.4.10 before 1.4.11 introduced a regression for a previous deserialization flaw. If the security framework has not been initialized, it may allow a remote attacker to run arbitrary shell commands when unmarshalling XML or any supported format. e.g. JSON. (regression of CVE-2013-7285)"}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2020-26217", "description": "XStream before version 1.4.14 is vulnerable to Remote Code Execution.The vulnerability may allow a remote attacker to run arbitrary shell commands only by manipulating the processed input stream. Only users who rely on blocklists are affected. Anyone using XStream's Security Framework allowlist is not affected. The linked advisory provides code workarounds for users who cannot upgrade. The issue is fixed in version 1.4.14."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2020-26258", "description": "XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.15, a Server-Side Forgery Request vulnerability can be activated when unmarshalling. The vulnerability may allow a remote attacker to request data from internal resources that are not publicly available only by manipulating the processed input stream. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.15. The reported vulnerability does not exist if running Java 15 or higher. No user is affected who followed the recommendation to setup XStream's Security Framework with a whitelist! Anyone relying on XStream's default blacklist can immediately switch to a whilelist for the allowed types to avoid the vulnerability. Users of XStream 1.4.14 or below who still want to use XStream default blacklist can use a workaround described in more detailed in the referenced advisories."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2020-26259", "description": "XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.15, is vulnerable to an Arbitrary File Deletion on the local host when unmarshalling. The vulnerability may allow a remote attacker to delete arbitrary know files on the host as log as the executing process has sufficient rights only by manipulating the processed input stream. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.15. The reported vulnerability does not exist running Java 15 or higher. No user is affected, who followed the recommendation to setup XStream's Security Framework with a whitelist! Anyone relying on XStream's default blacklist can immediately switch to a whilelist for the allowed types to avoid the vulnerability. Users of XStream 1.4.14 or below who still want to use XStream default blacklist can use a workaround described in more detailed in the referenced advisories."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2021-21341", "description": "XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is vulnerability which may allow a remote attacker to allocate 100% CPU time on the target system depending on CPU type or parallel execution of such a payload resulting in a denial of service only by manipulating the processed input stream. No user is affected who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.16."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2021-21342", "description": "XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability where the processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in a server-side forgery request. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.16."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2021-21343", "description": "XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability where the processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in the deletion of a file on the local host. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.16."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2021-21344", "description": "XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability which may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.16."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2021-21345", "description": "XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability which may allow a remote attacker who has sufficient rights to execute commands of the host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.16."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2021-21346", "description": "XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability which may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.16."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2021-21347", "description": "XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability which may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.16."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2021-21348", "description": "XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability which may allow a remote attacker to occupy a thread that consumes maximum CPU time and will never return. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.16."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2021-21349", "description": "XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability which may allow a remote attacker to request data from internal resources that are not publicly available only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.16."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2021-21350", "description": "XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability which may allow a remote attacker to execute arbitrary code only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.16."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2021-21351", "description": "XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.16."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2021-43859", "description": "XStream is an open source java library to serialize objects to XML and back again. Versions prior to 1.4.19 may allow a remote attacker to allocate 100% CPU time on the target system depending on CPU type or parallel execution of such a payload resulting in a denial of service only by manipulating the processed input stream. XStream 1.4.19 monitors and accumulates the time it takes to add elements to collections and throws an exception if a set threshold is exceeded. Users are advised to upgrade as soon as possible. Users unable to upgrade may set the NO_REFERENCE mode to prevent recursion. See GHSA-rmr5-cpv2-vgjf for further details on a workaround if an upgrade is not possible."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2022-40151", "description": "Those using Xstream to seralize XML data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack."}, {"displayName": "com.thoughtworks.xstream : xstream : 1.4.10", "cve": "CVE-2022-41966", "description": "XStream serializes Java objects to XML and back again. Versions prior to 1.4.20 may allow a remote attacker to terminate the application with a stack overflow error, resulting in a denial of service only via manipulation the processed input stream. The attack uses the hash code implementation for collections and maps to force recursive hash calculation causing a stack overflow. This issue is patched in version 1.4.20 which handles the stack overflow and raises an InputManipulationException instead. A potential workaround for users who only use HashMap or HashSet and whose XML refers these only as default map or set, is to change the default implementation of java.util.Map and java.util per the code example in the referenced advisory. However, this implies that your application does not care about the implementation of the map and all elements are comparable."}, {"displayName": "io.netty : netty-common : 4.1.63.Final", "cve": "CVE-2022-24823", "description": "Netty is an open-source, asynchronous event-driven network application framework. The package `io.netty:netty-codec-http` prior to version 4.1.77.Final contains an insufficient fix for CVE-2021-21290. When Netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. This only impacts applications running on Java version 6 and lower. Additionally, this vulnerability impacts code running on Unix-like systems, and very old versions of Mac OSX and Windows as they all share the system temporary directory between all users. Version 4.1.77.Final contains a patch for this vulnerability. As a workaround, specify one's own `java.io.tmpdir` when starting the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user."}, {"displayName": "express : 4.19.2", "cve": "CVE-2024-43796", "description": "Express.js minimalist web framework for node. In express < 4.20.0, passing untrusted user input - even after sanitizing it - to response.redirect() may execute untrusted code. This issue is patched in express 4.20.0."}, {"displayName": "tzinfo 0.3.33", "cve": "CVE-2022-31163", "description": "TZInfo is a Ruby library that provides access to time zone data and allows times to be converted using time zone rules. Versions prior to 0.36.1, as well as those prior to 1.2.10 when used with the Ruby data source tzinfo-data, are vulnerable to relative path traversal. With the Ruby data source, time zones are defined in Ruby files. There is one file per time zone. Time zone files are loaded with `require` on demand. In the affected versions, `TZInfo::Timezone.get` fails to validate time zone identifiers correctly, allowing a new line character within the identifier. With Ruby version 1.9.3 and later, `TZInfo::Timezone.get` can be made to load unintended files with `require`, executing them within the Ruby process. Versions 0.3.61 and 1.2.10 include fixes to correctly validate time zone identifiers. Versions 2.0.0 and later are not vulnerable. Version 0.3.61 can still load arbitrary files from the Ruby load path if their name follows the rules for a valid time zone identifier and the file has a prefix of `tzinfo/definition` within a directory in the load path. Applications should ensure that untrusted files are not placed in a directory on the load path. As a workaround, the time zone identifier can be validated before passing to `TZInfo::Timezone.get` by ensuring it matches the regular expression `\\A[A-Za-z0-9+\\-_]+(?:\\/[A-Za-z0-9+\\-_]+)*\\z`."}, {"displayName": "org.eclipse.jetty : jetty-io : 9.3.21.v20170918", "cve": "CVE-2021-28165", "description": "In Eclipse Jetty 7.2.2 to 9.4.38, 10.0.0.alpha0 to 10.0.1, and 11.0.0.alpha0 to 11.0.1, CPU usage can reach 100% upon receiving a large invalid TLS frame."}, {"displayName": "com.fasterxml.jackson.datatype : jackson-datatype-jsr310 : 2.6.0", "cve": "CVE-2018-1000873", "description": "Fasterxml Jackson version Before 2.9.8 contains a CWE-20: Improper Input Validation vulnerability in Jackson-Modules-Java8 that can result in Causes a denial-of-service (DoS). This attack appear to be exploitable via The victim deserializes malicious input, specifically very large values in the nanoseconds field of a time value. This vulnerability appears to have been fixed in 2.9.8."}, {"displayName": "com.fasterxml.jackson.datatype : jackson-datatype-jsr310 : 2.5.1", "cve": "CVE-2018-1000873", "description": "Fasterxml Jackson version Before 2.9.8 contains a CWE-20: Improper Input Validation vulnerability in Jackson-Modules-Java8 that can result in Causes a denial-of-service (DoS). This attack appear to be exploitable via The victim deserializes malicious input, specifically very large values in the nanoseconds field of a time value. This vulnerability appears to have been fixed in 2.9.8."}, {"displayName": "css-what : 3.4.2", "cve": "CVE-2022-21222", "description": "The package css-what before 2.1.3 are vulnerable to Regular Expression Denial of Service (ReDoS) due to the usage of insecure regular expression in the re_attr variable of index.js. The exploitation of this vulnerability could be triggered via the parse function."}, {"displayName": "org.springframework : spring-core : 4.3.11.RELEASE", "cve": "CVE-2018-1272", "description": "Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, provide client-side support for multipart requests. When Spring MVC or Spring WebFlux server application (server A) receives input from a remote client, and then uses that input to make a multipart request to another server (server B), it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles."}, {"displayName": "org.drools : drools-compiler : 7.9.0.Final", "cve": "CVE-2022-1415", "description": "A flaw was found where some utility classes in Drools core did not use proper safeguards when deserializing data. This flaw allows an authenticated attacker to construct malicious serialized objects (usually called gadgets) and achieve code execution on the server."}, {"displayName": "com.h2database : h2 : 1.4.200", "cve": "CVE-2021-42392", "description": "The org.h2.util.JdbcUtils.getConnection method of the H2 database takes as parameters the class name of the driver and URL of the database. An attacker may pass a JNDI driver name and a URL leading to a LDAP or RMI servers, causing remote code execution. This can be exploited through various attack vectors, most notably through the H2 Console which leads to unauthenticated remote code execution."}, {"displayName": "com.h2database : h2 : 1.4.200", "cve": "CVE-2022-23221", "description": "H2 Console before 2.1.210 allows remote attackers to execute arbitrary code via a jdbc:h2:mem JDBC URL containing the IGNORE_UNKNOWN_SETTINGS=TRUE;FORBID_CREATION=FALSE;INIT=RUNSCRIPT substring, a different vulnerability than CVE-2021-42392."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.8.10", "cve": "CVE-2017-17485", "description": "FasterXML jackson-databind through 2.8.10 and 2.9.x through 2.9.3 allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the Spring libraries are available in the classpath."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.8.10", "cve": "CVE-2020-25649", "description": "A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.8.10", "cve": "CVE-2020-36518", "description": "jackson-databind before 2.13.0 allows a Java StackOverflow exception and denial of service via a large depth of nested objects."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.8.10", "cve": "CVE-2022-42003", "description": "In FasterXML jackson-databind before versions 2.13.4.1 and 2.12.17.1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled."}, {"displayName": "com.fasterxml.jackson.core : jackson-databind : 2.8.10", "cve": "CVE-2022-42004", "description": "In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization."}, {"displayName": "loader-utils : 0.2.17", "cve": "CVE-2022-37599", "description": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the resourcePath variable in interpolateName.js."}, {"displayName": "loader-utils : 0.2.17", "cve": "CVE-2022-37601", "description": "Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils via the name variable in parseQuery.js. This affects all versions prior to 1.4.1 and 2.0.3."}, {"displayName": "loader-utils : 0.2.17", "cve": "CVE-2022-37603", "description": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js."}, {"displayName": "org.eclipse.jetty : jetty-servlets : 9.3.21.v20170918", "cve": "CVE-2021-28169", "description": "For Eclipse Jetty versions <= 9.4.40, <= 10.0.2, <= 11.0.2, it is possible for requests to the ConcatServlet with a doubly encoded path to access protected resources within the WEB-INF directory. For example a request to `/concat?/%2557EB-INF/web.xml` can retrieve the web.xml file. This can reveal sensitive information regarding the implementation of a web application."}, {"displayName": "org.eclipse.jetty : jetty-servlets : 9.3.21.v20170918", "cve": "CVE-2023-36479", "description": "Eclipse Jetty Canonical Repository is the canonical repository for the Jetty project. Users of the CgiServlet with a very specific command structure may have the wrong command executed. If a user sends a request to a org.eclipse.jetty.servlets.CGI Servlet for a binary with a space in its name, the servlet will escape the command by wrapping it in quotation marks. This wrapped command, plus an optional command prefix, will then be executed through a call to Runtime.exec. If the original binary name provided by the user contains a quotation mark followed by a space, the resulting command line will contain multiple tokens instead of one. This issue was patched in version 9.4.52, 10.0.16, 11.0.16 and 12.0.0-beta2.\n"}, {"displayName": "serve-static : 1.15.0", "cve": "CVE-2024-43800", "description": "serve-static serves static files. serve-static passes untrusted user input - even after sanitizing it - to redirect() may execute untrusted code. This issue is patched in serve-static 1.16.0."}, {"displayName": "lodash : 2.4.2", "cve": "CVE-2018-3721", "description": "lodash node module before 4.17.5 suffers from a Modification of Assumed-Immutable Data (MAID) vulnerability via defaultsDeep, merge, and mergeWith functions, which allows a malicious user to modify the prototype of \"Object\" via __proto__, causing the addition or modification of an existing property that will exist on all objects."}, {"displayName": "lodash : 2.4.2", "cve": "CVE-2021-23337", "description": "Lodash versions prior to 4.17.21 are vulnerable to Command Injection via the template function."}, {"displayName": "org.springframework : spring-expression : 4.3.11.RELEASE", "cve": "CVE-2018-1257", "description": "Spring Framework, versions 5.0.x prior to 5.0.6, versions 4.3.x prior to 4.3.17, and older unsupported versions allows applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a regular expression, denial of service attack."}, {"displayName": "org.springframework : spring-expression : 4.3.11.RELEASE", "cve": "CVE-2018-1270", "description": "Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack."}, {"displayName": "org.springframework : spring-expression : 4.3.11.RELEASE", "cve": "CVE-2022-22950", "description": "n Spring Framework versions 5.3.0 - 5.3.16 and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial of service condition."}, {"displayName": "org.springframework : spring-expression : 4.3.11.RELEASE", "cve": "CVE-2023-20861", "description": "In Spring Framework versions 6.0.0 - 6.0.6, 5.3.0 - 5.3.25, 5.2.0.RELEASE - 5.2.22.RELEASE, and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial-of-service (DoS) condition."}, {"displayName": "org.springframework : spring-expression : 4.3.11.RELEASE", "cve": "CVE-2023-20863", "description": "In spring framework versions prior to 5.2.24 release+ ,5.3.27+ and 6.0.8+ , it is possible for a user to provide a specially crafted SpEL expression that may cause a denial-of-service (DoS) condition."}, {"displayName": "org.springframework : spring-expression : 4.3.11.RELEASE", "cve": "CVE-2024-38808", "description": "In Spring Framework versions 5.3.0 - 5.3.38 and older unsupported versions, it is possible for a user to provide a specially crafted Spring Expression Language (SpEL) expression that may cause a denial of service (DoS) condition.\n\nSpecifically, an application is vulnerable when the following is true:\n\n  *  The application evaluates user-supplied SpEL expressions."}, {"displayName": "org.jboss.spec.javax.servlet.jstl : jboss-jstl-api_1.2_spec : 1.1.2.Final", "cve": "CVE-2015-0254", "description": "Apache Standard Taglibs before 1.2.3 allows remote attackers to execute arbitrary code or conduct external XML entity (XXE) attacks via a crafted XSLT extension in a (1) <x:parse> or (2) <x:transform> JSTL XML tag."}], "TotalAdvisories": 118, "UniqueAdvisories": 84, "Advisories": [{"cve": "CVE-2023-24998", "advisory": "The Apache Commons FileUpload `commons-fileupload` package and the `tomcat-coyote` package are vulnerable to Denial of Service (DoS) attacks. The `parseRequest` function in the `FileUploadBase.class` file in each package does not enforce a maximum number of files that can be included in a single upload request. An attacker can exploit this flaw to potentially trigger an application crash or slowdowns, resulting in DoS.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team discovered that this vulnerability was actually introduced in version 7.0.0 of `tomcat-coyote` instead of 8.5.0 as stated in the advisory. In addition, it was found that this vulnerability affected the 10.x branch of `tomcat-coyote` from 10.0.0-M1 and not 10.1.0-M1 as stated in the advisory."}, {"cve": "CVE-2019-14900", "advisory": "The `hibernate-core` package is vulnerable to SQL Injection. The `renderProjection()` method in `LiteralExpression.class` fails to sanitize literals used when building SQL query strings that include the `SELECT` or `GROUP BY` keywords. An attacker can exploit this vulnerability to retrieve sensitive information from a database utilized by the `hibernate ORM` application.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present in version 3.5.0-Beta-2 until 5.3.18.Final, and 5.4.0 until 5.4.18.Final, not just all versions before 5.3.18, and 5.4.x before 5.4.18 as the advisory states."}, {"cve": "CVE-2020-36518", "advisory": "The `jackson-databind` package is vulnerable to a Denial of Service (DoS) attack. The `deserialize()` method in the `UntypedObjectDeserializer` and `UntypedObjectDeserializer$Vanilla` classes fails to restrict recursion when deserializing nested untyped or generic objects. A remote attacker who can supply data to be deserialized by an affected application can exploit this vulnerability to cause the JVM to consume all available memory, resulting in a `StackOverflow` exception and ultimately a DoS condition.\n\n*Advisory Deviation Notice*: The Sonatype security research team has discovered that this vulnerability was fixed in versions 2.13.2.1 and 2.12.6.1 and not 2.13.0 as stated in the advisory."}, {"cve": "CVE-2022-41915", "advisory": "The `netty-codec` package is vulnerable to HTTP Response Splitting attacks. The `setObject()` methods in the `DefaultHeaders` class do not properly validate header values supplied via iterator arguments. A remote attacker can exploit this behavior by injecting arbitrary characters, such as Carriage Return (`\\r`) and Line Feed (`\\n`) (CRLF) into the header value of a request, allowing the attacker to control the body of a HTTP response.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team discovered that the package affected by this vulnerability is `io.netty:netty-codec` instead of `io.netty.codec:codec-http` as stated in the advisory."}, {"cve": "CVE-2023-6378", "advisory": "The `logback-classic` and `logback-core` packages are vulnerable to a Denial of Service (DoS) attack due to the Deserialization of Untrusted Data. The `readObject()` method of the `LoggingEventVO` class and the constructor of the `HardenedObjectInputStream` class fail to restrict the size and depth of serialized arrays submitted to receivers via logging events. An attacker with control of a remote appender connected to a vulnerable receiver can exploit this vulnerability to slow or prevent the application from logging further events.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was also fixed in version `1.2.13` of 1.2.x. Additionally, the vulnerability was introduced in version `0.9.16` of `logback-classic` and `1.2.0` of `logback-core` and therefore does not affect all versions before `1.3.12` as stated in the advisory."}, {"cve": "CVE-2019-12415", "advisory": "The `org.apache.poi:poi-ooxml` package is vulnerable to XML eXternal Entity (XXE) Reference attacks. The `isValid` method in `XSSFExportToXml.class` does not properly validate `SchemaFactory` objects when parsing Excel documents. An attacker can use a crafted document to read arbitrary files on the vulnerable filesystem via XXE processing.\n\n*Advisory Deviation Notice:* The Sonatype security research team has discovered that the vulnerability was introduced in version `3.5-FINAL` of the package and not in the initial version, as the advisory states.\n"}, {"cve": "CVE-2020-11971", "advisory": "The `camel-spring` package is vulnerable to a Rebind Flaw. The classes `CamelJMXAgentDefinition.class`, `CamelJMXAgentDefinition.class`, `CamelJMXAgentType.class`, `AbstractCamelContextFactoryBean.class` and `DefaultManagementAgent.class` implement a custom JMX connector that might be rebinded. An attacker could abuse this behavior to exploit a previous deployed JMX connector server and disclose sensitive information from it.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present since version 2.5.0, not since 2.22.0 as the advisory states.\n\n*Vulnerable File(s) and Function(s)*:\n\norg/apache/camel/core/xml/CamelJMXAgentDefinition.class\n\norg/apache/camel/spring/CamelJMXAgentDefinition.class\n\norg/apache/camel/spring/CamelJMXAgentType.class\n\norg/apache/camel/core/xml/AbstractCamelContextFactoryBean.class\n* initJMXAgent()\n\norg/apache/camel/management/DefaultManagementAgent.class\n* initJMXAgent()\n\norg/apache/camel/management/DefaultManagementAgent.class\n* initJMXAgent()\n\norg/apache/camel/spring/jmxConfig.xml\n\norg/apache/camel/spring/jmxConfigUsingProperties.xml"}, {"cve": "CVE-2019-20444", "advisory": "The `netty-codec-http` package is vulnerable to HTTP Request Smuggling. The `splitHeader` method in `HttpObjectDecoder.class` does not ensure that headers have colons when processing HTTP requests. As this will lead to requests being interpreted inconsistently, an attacker can exploit this behavior to potentially smuggle HTTP Requests.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is also in 5.0.0.Alpha1 and 5.0.0.Alpha2, not just in versions before 4.1.44 as stated in the advisory.\n"}, {"cve": "CVE-2019-20445", "advisory": "The `netty-codec-http` package is vulnerable to HTTP Request Smuggling. The `readHeaders` method in `HttpObjectDecoder.class` accepts HTTP requests that contain multiple `Content-Length` headers or that contain both a `Content-Length` and `Transfer-Encoding` header. A remote attacker can exploit this functionality to potentially hide additional HTTP requests that will be interpreted differently by different parsers.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is in 5.0.0.Alpha1 and 5.0.0.Alpha2, not just in versions before 4.1.44, as stated in the advisory."}, {"cve": "CVE-2024-29025", "advisory": "The `netty-codec-http` package is vulnerable to Denial of Service (DoS) attacks due to Allocation of Resources Without Limits or Throttling. The methods and classes listed below fail to adequately limit the number of fields in the `InterfaceHttpPostRequestDecoder` form implementation. Additionally, the volume of data within the `undecodedChunk` buffer is not restricted, enabling unbounded accumulation of input data. A remote attacker can exploit this vulnerability by crafting and sending a chunked HTTP POST request composed of numerous small fields. This would result in the accumulation of excessive data in the `bodyListHttpData` list and the `undecodedChunk` buffer, potentially leading to resource exhaustion and ultimately a DoS condition.\n\n***Vulnerable File(s) and Function(s)***:\n\n  - io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.class\n    - `offer()`\n    - `addHttpData()`\n  - io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.class\n    - `HttpPostRequestDecoder()`\n  - io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.class\n    - ` offer()`\n    - `addHttpData()`\n\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was actually introduced in version `4.0.0.Alpha7` and therefore does not affect all versions prior to `4.1.108.Final` as stated in the advisory."}, {"cve": "CVE-2018-10237", "advisory": "Guava is vulnerable to Denial of Service (DoS). When untrusted input is supplied to the `AtomicDoubleArray` and `CompoundOrdering` classes, it is possible for an attacker to specify a large integer number as part of that untrusted input.  This untrusted integer `n` is used to allocate an array of length `n`.  Thus with large values of `n`, it is possible to cause an application to run out of memory.\n\nAdvisory Deviation Notice: The Sonatype security research team discovered that the fix for this vulnerability was actually introduced in version 23.6.1 for 23.6.x instead of 24.1.1 as stated in https://nvd.nist.gov/vuln/detail/CVE-2018-10237"}, {"cve": "CVE-2021-22569", "advisory": "The `protobuf-java`, `protobuf-kotlin` and `google-protobuf` (JRuby gem only) packages are vulnerable to Denial of Service (DoS). The methods in the class below do not properly implement the parsing logic in unknown fields in Java. A remote attacker can exploit this behavior by supplying a malicious protobuf message (~800 KB) which, when processed by the vulnerable functionality, will create a large number of short-lived objects causing frequent garbage collection pauses. This will occupy the parser for a long time, eventually resulting in a DoS condition.\n\n**Note:**\n>protobuf-javalite and protobuf-kotlin-lite are not impacted, which means the majority of Android usages should not be impacted. Protobuf-kotlin is impacted because it has a dependency on protobuf-java.\n\nReference: [https://groups.google.com/g/grpc-io/c/k63v2K9JgeA](https://groups.google.com/g/grpc-io/c/k63v2K9JgeA)\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team has created a CVSS score that differs from the publicly available score that, based on our research, more accurately reflects the severity of the vulnerability.\n\n*Vulnerable File(s) and Function(s)*:\n\ncom/google/protobuf/UnknownFieldSet$Builder.class\n* clearField()\n* mergeField()\n* mergeVarintField()\n* mergeLengthDelimitedField()\n* hasField()\n* addField()\n* clone()"}, {"cve": "sonatype-2021-1694", "advisory": "The `gson` package is vulnerable Deserialization of Untrusted Data. The serializable `LazilyParsedNumber`, `LinkedHashTreeMap`, and `LinkedTreeMap` classes permit unsafe deserialization due to use of the default `Serializable.readObject()` implementation. A remote attacker can exploit this vulnerability by serializing and supplying any of the aforementioned objects to an affected application. This will result in a Denial of Service (DoS) condition or other unexpected behavior when the malicious object is deserialized.\n\nNote: This vulnerability has been assigned CVE-2022-25647.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in 2.2.3, not in all versions before 2.8.9 as the advisory states."}, {"cve": "CVE-2020-28168", "advisory": "The `axios` package is vulnerable to Server-side Request Forgery (SSRF). The `httpAdapter()` function in `http.js` sets the proxy server address to be used on the client's initial request, and fails to set the proxy server address on subsequent requests on a redirect response. A remote attacker may bypass the proxy server used by an application to force the backend server of the application to open connections to resources that are not intended to be accessed from external networks. Attackers may exploit this vulnerability to scan for running services on internal networks and use the information in subsequent attacks. \n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present in version 0.10.0 until 0.21.1, not just 0.19.0 to 0.21.1 as the advisory states."}, {"cve": "CVE-2017-5528", "advisory": "The `jasperreports` package is vulnerable to Cross-Site Scripting (XSS) attacks. the `exportProperties()` method in the `JRXmlExporter` class, and the `writeProperties()` method in the `JRXmlWriter` class assume the contents of the user-controlled `properties` object are encoded prior to writing them into XML documents. An attacker with control over the input `properties` contents may embed malicious JavaScript into XML documents that may later be executed in the context of victims' browsers depending on how the library is used.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team has created a CVSS score that differs from the publicly available score that, based on our research, more accurately reflects the severity of the vulnerability."}, {"cve": "CVE-2019-11358", "advisory": "The `jquery` package is vulnerable to Prototype Pollution. The `jQuery.extend` and `jQuery.fn.extend` functions defined in many files allow an untrusted object to extend `Object.prototype`. An attacker can modify and add prototype properties to JavaScript objects and can potentially leverage those changes to crash the application or execute remote code.\n\n*Advisory Deviation Notice:* The Sonatype security research team has assessed the CVSS score for this vulnerability to be 7.5 given the nature of prototype pollution and the high impact to data integrity, as opposed to a score of 6.1 reported by [NVD](https://nvd.nist.gov/vuln/detail/CVE-2019-11358)."}, {"cve": "CVE-2020-23064", "advisory": "The `jQuery` package is vulnerable to Cross-site Scripting (XSS). The `htmlPrefilter` function in the `manipulation.js` file improperly handles edge cases when closing HTML tags to ensure they are XHTML-compliant. A remote attacker can exploit this vulnerability by sending an XSS payload prefixed by a specially crafted HTML tag. The `htmlPrefliter` function will close the input tag excluding the XSS payload. This allows the XSS payload to be injected into the DOM of the webpage, resulting in its execution.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version `1.4.1` and not `2.2.0` as stated in the advisory."}, {"cve": "sonatype-2016-0133", "advisory": "The `jquery` package is vulnerable to Denial of Service (DoS). The `jQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g )` function in the `attr.js` file lacks the logic to convert the attribute name into lowercase. Any attribute getter using a mixed-cased name for the boolean attributes goes into infinite recursion, exceeding the stack call limit. This causes Denial of Service (DoS). \n\nNote: This vulnerability has been assigned CVE-2016-10707.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version `1.11.0-beta3` and not `3.0.0-rc1` as stated in the advisory. This finding coincides with [issues](https://github.com/jquery/jquery/issues/3371) reported against versions `2.2.4` and `1.12.14` and [confirmed by jQuery maintainers](https://github.com/jquery/jquery/issues/3371#issuecomment-255441041) several months after this vulnerability's initial publication."}, {"cve": "CVE-2018-8041", "advisory": "The Apache Camel Mail package contains a Path Traversal vulnerability.  The `extractAttachmentsFromMultipart()` function in `MailBinding.class` does not check attachment names for path traversal characters.  A remote attacker can potentially exploit this behavior by sending an email with an attachment containing directory traversal characters to get that attachment place on an arbitrary location on the vulnerable server.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present in version 1.4.0-RC2 until 2.20.4, not just 2.20.0 until 2.20.4 as the advisory states."}, {"cve": "CVE-2020-17521", "advisory": "Apache Groovy is vulnerable due to Creation of Temporary File in Directory with Insecure Permissions. The `createTempDir()` method in the `DefaultGroovyStaticMethods.class` unsafely creates temporary directories within the operating system's temporary directory which is shared by all users on a system. An attacker can leverage this behavior to gain unauthorized access to sensitive information or carry out privilege escalation on an affected system.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in 1.1-rc-1, not in 2.0.0 as the advisory states. Additionally, the vulnerability is present in versions 2.6.0-alpha-1 to 3.0.6, not just 3.0.0 before 3.0.7 as the advisory states."}, {"cve": "CVE-2022-41881", "advisory": "The `netty-codec-haproxy` package is vulnerable to a Denial of Service (DoS) attack. The `readTlvs()` and `readNextTLV()` methods in the `HAProxyMessage` class fail to limit recursion when parsing `PROXY` headers with `PP2_TYPE_SSL` typed Type-Length-Value (TLV) fields. A remote attacker can exploit this vulnerability by submitting a `PROXY` protocol header containing nested `PP2_TYPE_SSL` TLV field values. This will result in a `StackOverflowError` as the server parses the header's fields.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in versions `4.1.12.Final` of 4.1.x and `4.0.48.Final` of 4.0.x and therefore does not affect all versions prior to `4.1.86.Final` as stated in the advisory."}, {"cve": "sonatype-2020-0029", "advisory": "The `netty-codec` and `netty` packages are vulnerable to Denial of Service (DoS) attacks. The `decode` methods in `JdkZlibDecoder.class`, `JZlibDecoder.class`, `JZlibDecoder.class` and `ZlibDecoder.class` do not limit the eventual size of a compressed buffer after it is decompressed. Consequently, a malicious request can consume much more memory on a server than the size of the request would imply. An attacker can exploit this behavior by sending many such requests, resulting in a DoS situation.\n\n*Note*: CVE-2020-11612 has been assigned to this issue. \n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present in all versions before 4.1.46.Final and versions 5.0.0.Alpha1 through 5.0.0.Alpha2, not just versions 4.1.x before 4.1.46 as the advisory states."}, {"cve": "CVE-2013-4492", "advisory": "The `i18n` package is vulnerable to Cross-Site Scripting (XSS). The `call` subroutine in `exceptions.rb` allows JavaScript via key names in a request to the `MissingTranslationData` class without proper input sanitization. When the `i18n` gem is unable to provide a translation for a given string, it creates a fallback HTML string which can contain user input. An attacker can exploit this vulnerability by crafting a key name containing malicious JavaScript, that when rendered, results in XSS.\r\n\r\n*Advisory Deviation Notice:* The Sonatype security research team has discovered that despite the advisory reporting all versions before 0.6.6 vulnerable, the vulnerability was actually fixed in 0.5.1 apart from 0.6.6."}, {"cve": "CVE-2014-10077", "advisory": "The `i18n` package contains an Improper Input Validation vulnerability. The `slice()` subroutine in the `hash.rb` file does not properly handle cases where the provided key is not present in the hash out of which it is supposed to be extracted from but is present in `keep_keys`, causing the program to crash. An attacker can exploit this by sending a maliciously crafted request to change the text language with a key value that is not present in the hash, causing a Denial of Service (DoS).\n\n*Advisory Deviation Notice:* The Sonatype security research team has discovered that the vulnerability is present in version 0.3.4 until 0.8.0.beta1, not just before 0.8.0 as the advisory states."}, {"cve": "CVE-2024-25710", "advisory": "The `commons-compress` package is vulnerable to Denial of Service (DoS) attacks due to an Infinite Loop. The `resetBlockSize()` method of the `TapeInputStream` class processes Unix `dump` archive files without validating the compression block size. A local attacker could exploit this vulnerability by supplying a crafted `dump` file containing malformed or corrupt metadata indicating a block size of 0 or less, resulting in an infinite loop and a DoS condition. Under some circumstances, it may be possible for the attacker to leverage this vulnerability to execute arbitrary code.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team has created a CVSS score that differs from the publicly available score that, based on our research, more accurately reflects the severity of the vulnerability."}, {"cve": "CVE-2024-38996", "advisory": "The `ag-grid-community` and `ag-grid-enterprise` packages are vulnerable due to Prototype Pollution. The `_mergeDeep()` function in the `object.ts` file fails to restrict the addition or modification of object prototype properties via accessors, such as `__proto__`. A remote attacker can exploit this vulnerability by attempting to export to excel a crafted JSON object that leverages the aforementioned property accessors to overwrite the prototyped behavior of objects. Depending on how the affected object is used by the application, this may result in a Denial of Service (DoS) condition, Remote Code Execution (RCE), or other unexpected behavior.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in an earlier version and was fixed in multiple major versions, so that it affects more versions than just the single version mentioned in the advisory."}, {"cve": "CVE-2019-13990", "advisory": "The `quartz` package is vulnerable to XML eXternal Entity (XXE) attacks. The `initDocumentParser` method in `XMLSchedulingDataProcessor.class` processes unsafe DTD external entity references in XML files that declare jobs and their schedules. An attacker who can upload such an XML document can exploit this behavior to execute Server-Side Request Forgery (SSRF) attacks, exfiltrate information, cause a Denial of Service (DoS) or other XML related attacks.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability was introduced in version 1.8.0, and is not present in all versions prior, as the advisory may imply. Versions prior to 1.8.0 are not vulnerable."}, {"cve": "CVE-2023-26049", "advisory": "The `jetty-server` and `jetty-http` packages are vulnerable to Information Disclosure. The `parseFields()` method in the `CookieCutter` class in both packages mishandles cookies that contain an unterminated double quote. An attacker who is able to assign a cookie to another user can exploit this vulnerability by injecting a cookie with a value beginning with a double quote that is never closed. When the victim's cookies are processed by the `jetty` server, the cookies can be incorrectly concatenated, potentially resulting in one cookie being smuggled inside another. Depending on how the application utilizes the values of the affected cookies, this could allow an attacker exfiltrate sensitive cookie values, even in cases where the `HttpOnly` flag is set, or to cause other unintended application behavior resulting from cookie malformation.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team discovered that this vulnerability was introduced into the `jetty-server` package in version 7.0.0.M0 and was resolved in version 9.4.51.v20230217, and that the vulnerable code was relocated to the `jetty-http` package in the 10.x, 11.x, and 12.x branches. As such, the 10.x, 11.x, and 12.x of the `jetty-server` package are not affected, contrary to what is stated in the advisory. In addition, the team has created a CVSS score that differs from the publicly available score that, based on our research, more accurately reflects the severity of the vulnerability."}, {"cve": "CVE-2019-17571", "advisory": "The `log4j:log4j` package is vulnerable to Remote Code Execution (RCE) due to Deserialization of Untrusted Data. The `SocketNode` constructor in `SocketNode.class`, as referenced by the `SocketServer.class`, fails to properly verify if the objects being read from the `ObjectInputStream` belong to a list of classes which  are safe for deserialization. An attacker can exploit this vulnerability to deserialize objects of unsafe types, potentially resulting in Remote Code Execution (RCE).\n\nNOTE: Starting with version(s) 2.x, `log4j:log4j` was relocated to `org.apache.logging.log4j:log4j-core`. A variation of this vulnerability exists in `org.apache.logging.log4j:log4j-core` as CVE-2017-5645, in versions up to but excluding 2.8.2.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability actually impacts the `SocketNode` class being referenced by `SocketServer` class and not the `SocketServer` class itself as indicated in the NVD advisory. "}, {"cve": "CVE-2021-4104", "advisory": "The `log4j:log4j` package is vulnerable to Deserialization of Untrusted Data. The `lookup()` and `activateOptions()` methods in the `JMSAppender` class allow `JNDI` lookup requests to be made when the `TopicBindingName` and `TopicConnectionFactoryBindingName` specify a trusted host. Lookups made to this host may be used by attackers to request a serialized malicious Java Object that can be deserialized and executed, leading to Remote Code Execution (RCE). \n\nNote that this vulnerability is different from [CVE-2021-44228](https://nvd.nist.gov/vuln/detail/CVE-2021-44228) and requires the attacker to be in control of the third party host that is specified in the configuration, or write access to the Log4j configuration file in order to specify a malicious lookup host directly. This vulnerability also only affects the 1.x.x component of `Log4j` released under the `log4j:log4j` group and artifact IDs.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in all versions of log4j:log4j, not just in the 1.2.x branch as the advisory states."}, {"cve": "CVE-2022-23302", "advisory": "The `log4j` package is vulnerable to Deserialization of Untrusted Data. The constructor in the `JMSSink` class allows for `JNDI` lookup requests via `TopicConnectionFactoryBindingName` configurations. An attacker with write access to the Log4j configuration, or control of an LDAP service that Log4j is configured to connect to, can exploit this vulnerability to request malicious serialized Java objects that, when deserialized, will result in Remote Code Execution (RCE).\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team has created a CVSS score that differs from the publicly available score that, based on our research, more accurately reflects the severity of the vulnerability."}, {"cve": "CVE-2022-23307", "advisory": "The `log4j` package is vulnerable due to Deserialization of Untrusted Data. The `run()` method in the `LoggingReceiver` class allows untrusted serialized log events to be deserialized. A remote attacker can exploit this behavior by supplying a malicious serialized object which, when deserialized by an application, will result in arbitrary code execution.\n\n*Note:* This vulnerability is the same as CVE-2020-9493 that was fixed in Chainsaw 2.1.0. Prior to Chainsaw V2.0, Chainsaw was a component of Apache Log4j 1.2.x where the same issue exists.\n\nReference: [https://www.mail-archive.com/announce@apache.org/msg07042.html]( https://www.mail-archive.com/announce@apache.org/msg07042.html)\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team has created a CVSS score that differs from the publicly available score that, based on our research, more accurately reflects the severity of the vulnerability."}, {"cve": "CVE-2023-41080", "advisory": "Apache Tomcat is vulnerable to Open Redirect attacks. The `savedRequestURL()` method in the `FormAuthenticator` class does not properly sanitize extra forward slashes (`/`) in user influenced URLs before redirecting to them. A remote attacker can exploit this behavior by enticing a victim into submitting a request containing a specially-crafted URL to a web application configured to use FORM authentication. This will result in the victim being redirected to an attacker-controlled URL.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team discovered that this vulnerability was actually introduced in the initial version instead of `8.5.0` as stated in the advisory. Additionally, the `10.0.x` branch is also affected by this vulnerability."}, {"cve": "CVE-2023-45648", "advisory": "The Apache `tomcat-coyote` package is vulnerable to HTTP Request Smuggling attacks. The `parseHeader()` method of the `ChunkedInputFilter` class allows for non-token and control characters within the names and values of trailing headers. A remote attacker can leverage the aforementioned headers to smuggle additional, unexpected requests. Such requests may be interpreted by intermediary agents as multiple requests, with the additional request potentially circumventing access controls, poisoning the web cache, or inducing other unexpected behavior in affected applications.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version `7.0.4` and not `8.5.0` as stated in the advisory. Additionally, this vulnerability affects all `10.0.x` versions in addition to versions `10.1.0-M1` through `10.1.13`."}, {"cve": "CVE-2023-46589", "advisory": "The Apache `tomcat-coyote` package is vulnerable to HTTP Request Smuggling attacks. The `parseHeader()` method of the `ChunkedInputFilter` class fails to account for trailer headers that exceed the declared maximum size. A remote attacker can exploit this vulnerability with a request leveraging crafted trailer headers in order to cause a misinterpretation of the request between Tomcat and intermediary agents. This misinterpretation may allow the attacker to smuggle additional, unexpected requests through the intermediaries and directly to affected Tomcat servers. Such requests may be leveraged to poison the web cache, bypass access controls, or induce other unexpected behavior.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was fixed in version `11.0.0-M14` and not `11.0.0-M11`. Additionally, the team discovered that this vulnerability was introduced in version `7.0.4` and not `8.5.0` as stated in the advisory."}, {"cve": "CVE-2024-34750", "advisory": "The Apache `tomcat-coyote` package is vulnerable to denial-of-service (DoS) attacks. The methods and classes below mishandle the accounting of active streams due to their failure to limit decrementation to once per unique stream. A remote attacker can exploit this vulnerability with requests containing an excessive number of certain crafted headers. This will cause Tomcat to deplete its tracked active stream count and consequently fail to timeout subsequent active streams. This behavior may be leveraged to hold all available connections to affected servers and deny service to their users.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version `10.0.0-M1` of 10.x and `8.5.75`, not `10.1.0-M` of 10.x and `9.0.0-M1` as stated in the advisory.\n\n***Vulnerable File(s) and Function(s)***:\n- **maven : org.apache.tomcat : tomcat-coyote**\n  - org/apache/coyote/http2/Http2AsyncUpgradeHandler.class\n    - `void sendStreamReset(StreamStateMachine state, StreamException se)`\n  - org/apache/coyote/http2/Http2UpgradeHandler.class\n    - `protected void decrementActiveRemoteStreamCount()`\n    - `void sendStreamReset(StreamStateMachine state, StreamException se)`\n    - `protected void sentEndOfStream(Stream stream)`\n    - `public HeaderEmitter headersStart(int streamId, boolean headersEndStream)`\n    - `public void headersEnd(int streamId, boolean endOfStream)`\n    - `private void receivedEndOfStream(Stream stream)`\n    - `public void reset(int streamId, long errorCode)`"}, {"cve": "CVE-2020-10683", "advisory": "The `dom4j` package is vulnerable to XML eXternal Entity (XXE) attacks. The `parseText` method in `DocumentHelper.class` processes external entities by default due to an insecure parser configuration. A remote attacker can exploit this behavior by crafting and submitting XML data that contains malicious external entity references. These references may be used by the attacker to exfiltrate sensitive information, cause a Denial of Service (DoS) condition, or to perform other XXE related attacks.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team has created a CVSS score that differs from the publicly available score that, based on our research, more accurately reflects the severity of the vulnerability."}, {"cve": "CVE-2017-7525", "advisory": "`jackson-databind` is vulnerable to Remote Code Execution (RCE). The `createBeanDeserializer()` function in the `BeanDeserializerFactory` class allows untrusted Java objects to be deserialized. A remote attacker can exploit this by uploading a malicious serialized object that will result in RCE if the application attempts to deserialize it.\n\nNOTE: This vulnerability is also tracked by the Apache Struts team as [S2-055](https://cwiki.apache.org/confluence/display/WW/S2-055).\n\nNOTE: This CVE is a part of the series of CVEs (e.g. CVE-2019-16943,  CVE-2017-15095, CVE-2017-17485, CVE-2018-5968, ...) that have been, and continue to be released by the Jackson Databind project, for the exact same deserialization vulnerability. To reduce unnecessary noise arising from duplicates and false positives, we have strategically implicated components so that they show the minimal number of CVEs necessary to represent the same vulnerability.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team has created a CVSS score that differs from the publicly available score that, based on our research, more accurately reflects the severity of the vulnerability."}, {"cve": "CVE-2021-23368", "advisory": "The `postcss` package is vulnerable to Regular Expression Denial of Service (ReDoS). The `getAnnotationURL` and `loadAnnotation` functions in the `previous-map.js` file use an insecure regular expression to parse annotations in the provided `source-map` options. A remote attacker can exploit this vulnerability by sending a request with a long repetitive sequence of alphanumeric characters and spaces in the `sourceMapURL`. This will result in a Denial of Service condition once the applications attempts to process the attacker supplied data.    \n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that this vulnerability affects versions 3.0.0 until 7.0.36 and 8.0.0 until 8.2.10 and not versions 7.0.0 until 8.2.10 as stated in the advisory. "}, {"cve": "CVE-2024-38808", "advisory": "The `spring-expression` package is vulnerable to a Denial of Service (DoS) attack. The `createArray()` method in the `ConstructorReference` class fails to validate if there are constructor resolvers available for arrays constructed from SpEL (Spring Expression Language) expressions. A remote attacker who can supply a SpEL expression can exploit this vulnerability to cause the system to proceed with potentially expensive operations and ultimately lead to a DoS condition.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version 3.0.4.RELEASE and does not affect all earlier versions as stated in the advisory."}, {"cve": "CVE-2021-37714", "advisory": "The `jsoup` is vulnerable due to Uncaught Exception. The `appendTagName` function in the `Token.class` incorrectly processes user input that contains unexpected characters in variable amounts. An attacker could leverage this behavior to crash the application by sending malformed input to the application, which may include multiple null characters.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present from version 1.6.0 before 1.14.2, not all prior versions to 1.14.2 as the advisory states."}, {"cve": "CVE-2022-36033", "advisory": "The `jsoup` package is vulnerable to Cross-Site Scripting (XSS) attacks. The `resolve()` methods in the `StringUtil` class fail to sanitize JavaScript protocols from URLs when `SafeList.preserveRelativeLinks` is enabled. A remote attacker can exploit this vulnerability by crafting a request containing malicious JavaScript in any parameter whose value is reflected in a link within an affected view. The attacker can then entice a victim into submitting the request or interacting with the injection if it is stored. This will result in script execution when the resulting response is rendered by the victim's browser.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version 1.6.2 and therefore does not affect all versions prior to 1.15.3 as stated in the advisory."}, {"cve": "CVE-2023-29827", "advisory": "The `ejs` is vulnerable to Server-Side Template Injection. The `ejs.js` file does not impose sufficient restrictions on any inputs provided to `closeDelimiter` option (such as via 'GET' query string). An attacker who is able to control the `ejs.js` file and/or pass unfettered input to the `render` function can therefore corrupt the JavaScript template generated by the component, and potentially achieve arbitrary code execution.\n\n**NOTE:** The basis of exploiting this _vulnerability_ requires that the attacker already have some form of control over the 'ejs' file, and/or the application directly passing untrusted user input to the `render` function. As such, the project maintainer reasonably [disputes]( https://github.com/mde/ejs/issues/720#issuecomment-1540435858) this vulnerability and clearly mentions issues like these are [out of scope](https://github.com/mde/ejs/blob/main/SECURITY.md#out-of-scope-vulnerabilities), due to the very nature of `ejs` package and the functionality it provides. According to the vulnerability reporter, this issue exists because of an incomplete fix for CVE-2022-29078, which itself falls in a [similar realm](https://github.com/mde/ejs/issues/451#issuecomment-524514506). As such, the Sonatype Security Research team is providing data for these vulnerabilities for informational purposes. For the same reason, we have further adjusted (lowered) the CVSS score for this issue (see notice below).\n\n*Advisory Deviation Notice:* The Sonatype Security Research team has chosen a CVSS score and severity rating for this vulnerability that is different from [NVD's](https://nvd.nist.gov/vuln/detail/CVE-2023-29827) 'Critical' rating as we believe the choice more accurately reflects the practical risk arising from this issue."}, {"cve": "CVE-2012-6109", "advisory": "The `rack` package is vulnerable to Denial of Service (DoS) attacks. The `multipart.rb` and `utils.rb` files use an insecure regular expression to parse Content-Disposition headers in multipart requests. A remote attacker can leverage this vulnerability by supplying a multipart request containing a specially crafted filename which, when parsed, will result in an infinite loop, and ultimately a DoS condition.\n\n***Advisory Deviation Notice:***\nThe Sonatype Security Research team discovered that this vulnerability was not fixed in version `1.1.4` as stated in the advisory."}, {"cve": "CVE-2020-8161", "advisory": "The `rack` package is vulnerable to Directory Traversal. The `list_directory()` subroutine in `directory.rb` fails to validate file names inside the current directory before processing them. A remote attacker with write access to the directory that a `rack` application is processing may craft a file that would allow them to read files outside of the current directory.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the fix for this vulnerability was actually introduced in version 0.4.0 instead of the initial version as stated in the advisory."}, {"cve": "CVE-2022-44570", "advisory": "The `rack` package is vulnerable to a Regular Expression Denial of Service (ReDoS) attack. The `get_byte_ranges()` subroutine in the `utils.rb` file uses an unsafe regular expression to parse byte ranges from `Range` headers of incoming HTTP requests. A remote attacker can exploit this vulnerability by submitting a request with a `Range` header that contains a long string of repeating numeric characters within the `range-start` or `range-end` directives. Processing this request will result in catastrophic backtracking and ultimately a DoS condition.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version `1.3.0.beta` and not `1.5.0` as stated in the advisory."}, {"cve": "CVE-2022-44571", "advisory": "The `rack` package is vulnerable to a Regular Expression Denial of Service (ReDoS) attack. The `parser.rb` and `multipart.rb` files use an unsafe regular expression to parse the `Content-Disposition` fields of multipart attachments. A remote attacker can exploit this vulnerability by submitting a multipart request with a `Content-Disposition` field containing a long string of repeating characters. This will result in catastrophic backtracking and ultimately a DoS condition when the application attempts to process the request.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version `0.1.0` and not `2.0.0` as stated in the advisory."}, {"cve": "CVE-2023-27539", "advisory": "The `rack` package is vulnerable to Regular Expression Denial of Service (ReDoS) attacks. The `parse_http_accept_header()` subroutine in the `request.rb` file uses an insecure regular expression to parse and split headers from incoming requests. An attacker can exploit this vulnerability by submitting a request with a maliciously crafted header, which when parsed will result in catastrophic backtracking, and consequently a DoS condition.\n\n*Advisory Deviation Notice:*\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version `0.4.0` instead of `2.0.0` as stated in the advisory."}, {"cve": "CVE-2024-26141", "advisory": "The `rack` package is vulnerable to Denial of Service (DoS) attacks. The `get_byte_ranges()` function of the `utils.rb` file generates very large responses when receiving requests with `Range` headers set to excessively large values. A remote attacker can exploit this vulnerability by sending requests with a malicious `Range` header that forces the server to use all available system resources when returning a large response. This may cause the server to crash, leading to a DoS situation.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team has created a CVSS score that differs from the publicly available score that, based on our research, more accurately reflects the severity of the vulnerability."}, {"cve": "CVE-2024-39316", "advisory": "The Rack package contains a potential Regular Expression Denial of Service (ReDoS) attack vector. The `parse_http_accept_header()` method in `request.rb` inefficiently processes `HTTP_ACCEPT_ENCODING` and `HTTP_ACCEPT_LANGUAGE` headers in HTTP requests with Regular Expressions (RegEx). Consequently, a remote unauthenticated attacker could send multiple requests with malformed headers to take up an inordinate amount of processing power, potentially resulting in a Denial of Service (DoS) condition.\n\n***Advisory Deviation Notice***:\nThe advisory states that this CVE only affects the 3.1.x versions and that this is the same vulnerability as CVE-2024-26146, implying that CVE-2024-26146 covers versions earlier than 3.1.x. However, the Sonatype Security Research team discovered that while the fix for this CVE is updating code that is similar in functionality as CVE-2024-26146, it is applied to a different method in a different file. As such, we've chosen to implicate all of the versions in which the vulnerable code fixed for this CVE is present."}, {"cve": "CVE-2010-3299", "advisory": "The `activesupport` package is vulnerable to padding oracle attacks. The `encrypt()` and `decrypt()` subroutines in the `message_encryptor.rb` file do not adequately sign a message before encrypting or decrypting it. A remote attacker can leverage this vulnerability to encrypt or decrypt data using the oracle's key, without knowing the encryption key.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was actually introduced in version `2.3.2` of `activesupport` and is present until version `4.0.0.beta1` instead of only affecting Ruby on Rails 2.3 as stated in the advisory."}, {"cve": "CVE-2015-3227", "advisory": "The `activesupport` package is vulnerable to Denial of Service (Dos). The `parse()` and `merge_element!()` subroutines in both `jdom.rb` and `rexml.rb` files parse XML document without validating the depth. An attacker can exploit this vulnerability by crafting deeply nested XML requests without their corresponding ending tags, which eventually causes a stack overflow and consumes the available resources when processed. \r\n\r\n*Advisory Deviation Notice:* The Sonatype security research team has discovered that, despite the advisory reporting all versions vulnerable, the vulnerability was actually introduced in version 2.3.0. Also, we identified that in 3.2.x range, there was fix initiated."}, {"cve": "CVE-2023-22796", "advisory": "The `activesupport` package is vulnerable to a Regular Expression Denial of Service (ReDoS) attack. The `underscore()` subroutine in the `methods.rb` file uses an unsafe regular expression to convert camel-cased strings into underscored lowercase form. A remote attacker can exploit this vulnerability by supplying a sizeable string of alphanumeric characters via any input parameter whose value propagates to the aforementioned function. The greedy matching behavior of the vulnerable regular expression will cause the regular expression engine to backtrack catastrophically as it processes the attacker's string, resulting in a DoS condition.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced into 7.x versions with version `7.0.0.alpha1` and not `7.0.0` as stated in the advisory."}, {"cve": "CVE-2023-28120", "advisory": "The `activesupport` package is vulnerable to Cross-Site Scripting (XSS) attacks. This package provides its own implementation of Ruby's `SafeBuffer` class, but fails to account for potential mutations of assumed-safe data by the `SafeBuffer.bytesplice()` implementation introduced in Ruby 3.2. Consequently, using `bytesplice()` on strings that have been marked `html_safe` by `SafeBuffer` may yield unsafe results. A remote attacker can leverage this behavior in vulnerable applications to bypass their XSS sanitization mechanisms.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version `2.3.6.pre` and therefore does not affect all versions prior to `6.1.7.3` as stated in the advisory."}, {"cve": "CVE-2022-45685", "advisory": "The `jettison` package is vulnerable to a Denial of Service (DoS) Attack due to Uncontrolled Recursion. The constructor method for the `JSONObject` class and the `newJSONObject()` and `newJSONArray()` methods in the `JSONTokener` class fail to limit the depth to which a map will be parsed when processing JSON objects, leading to a Stack-based Buffer Overflow when the structure is very deeply nested. A remote attacker can leverage this behavior to trigger a DoS condition by submitting an overly nested structure to be parsed by an affected application.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version 1.3.1 of `jettison` when the functionality of recursively creating `JSONArray` objects was added and not versions prior to that, as external advisories imply."}, {"cve": "CVE-2023-1436", "advisory": "The `jettison` package is vulnerable to Denial of Service (DoS) attacks. The `JSONArray(Collection collection)` constructor in the `JSONArray` class fails to limit recursion when constructing JSON arrays from user-supplied data structures. Consequently, processing self-referential nested data may exhaust the stack. A remote attacker can exploit this vulnerability by supplying crafted JSON through any endpoint that uses this library to process its input. This may cause the application to consume all available resources, resulting in a DoS condition.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version 1.3.1 of `jettison` when the functionality of recursively creating `JSONArray` objects was added and not versions prior to that, as external advisories imply."}, {"cve": "CVE-2024-45590", "advisory": "The `body-parser` package is vulnerable to Denial of Service (DoS) due to Asymmetric Resource Consumption. The `queryparse()` function in the `urlencoded.js` file fails to limit the depth when performing recursive query parsing. A remote attacker can exploit this vulnerability by crafting an encoded URL with a deeply nested query string, potentially overwhelming system resources and leading to a DoS condition.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version v1.11.0 and does not affect all versions prior to v1.20.3 as stated in the advisory."}, {"cve": "CVE-2024-39249", "advisory": "The Async package is vulnerable to Regular Expression Denial of Service, or ReDoS, attacks. The `parseParams()` function in `autoInject.js` uses a RegEx that's susceptible to long processing times given certain inputs. An attacker that can provide functions to be processed by `parseParams()` can provide a specially formatted one that will take up significant processing power, potentially resulting in a Denial of Service (DoS) situation.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that in version 3.2.5, the vulnerable regex is actually a line earlier in the `FN_ARGS` variable. The PoC provided in the additional resources doesn't work with 2.X versions of Async, so we created a new PoC based on Zunak's that confirms that all versions 2.0.0 and do have increased processing time. The RegEx used in version 3.0.1 and others is the most susceptible to this attack. The PoC that demonstrates our findings can be provided on request."}, {"cve": "sonatype-2018-0436", "advisory": "The `underscore.string` package is vulnerable to a Regular expression Denial of Service (ReDoS) attack. The `unescapeHTML()` function in files, `unescapeHTML.js`, `underscore.string.js` and `underscore.string.min.js`, uses an insecure regular expression to replace certain HTML characters. A remote attacker can exploit this vulnerability by submitting large crafted input that exploits this issue. This will result in a DoS when the application attempts to process the supplied data.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present all versions of the package with no fix having been released yet. Contrary to what the advisory states, version 3.3.5 contains the vulnerable regex in `underscore.string.js` and `underscore.string.min.js`, even if not in `unescapeHTML.js`. Therefore, version 3.3.5 is vulnerable as well."}, {"cve": "CVE-2017-7658", "advisory": "Eclipse Jetty Server is vulnerable to HTTP request smuggling.  The `handleKnownHeaders` method in `HttpParser.class` accepts multiple `content-length` headers, which is contrary to the HTTP RFC specification. A remote attacker could exploit this behavior to potentially cause unexpected behaviors with Jetty, such as resulting in bypassing authorization checks in intermediaries or response smuggling.\n\n*Advisory Deviation Notice:* The advisory states that versions 9.2.x and older, 9.3.x (all non HTTP/1.x configurations), and 9.4.x (all HTTP/1.x configurations) are vulnerable.  The Sonatype security research teams believes that the parenthetical about non HTTP/1.x configurations being vulnerable is a typo, and that *only* the HTTP/1.x configurations are vulnerable.  In addition, a fix that remediates this vulnerability regardless of configuration has been released in version 9.2.25.v20180606 for the 9.2.x branch, version 9.3.24.v20180605 for the 9.3.x branch, and version 9.4.11.v20180605 for the 9.4.x branch."}, {"cve": "CVE-2023-40167", "advisory": "The `org.eclipse.jetty:jetty-http` package is vulnerable to Improper Handling of Length Parameter Inconsistency. The `convertContentLength()` function within `HttpParser.class` does not enforce that each character of the `Content-Length` HTTP header value be strictly numeric. This can allow an attacker to provide invalid HTTP header values (e.g. `+16` for `Content-Length`) that may be accepted by Jetty unchecked but possibly be rejected by any other servers being used in combination with Jetty. A potential Denial of Service (DoS) scenario could occur if this causes connections to remain open in between servers despite an HTTP 400 (Bad Request) response having been thrown.\n\n*Advisory Deviation Notice:* Contrary to what the [advisory](https://github.com/advisories/GHSA-hmr7-m48g-48f6) implies, Jetty versions prior to 9.0.0 do not enforce `Content-Length` HTTP header values to be strictly numeric either. The Sonatype Security Research team therefore deems these earlier versions also vulnerable and recommends upgrading to one or more fixed versions (or higher)."}, {"cve": "CVE-2020-15366", "advisory": "The `ajv` package is vulnerable to Prototype Pollution. The `dependencies.jst` file attempts to validate `__proto__` property fields in JSON data objects incorrectly. An attacker with control over JSON objects that are validated by the `ajv` library can craft a malicious object leading to Denial of Service (DoS) and potentially Remote Code Execution (RCE) in a limited context.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present in version 0.1.13 until 6.12.3, not just 6.12.2 as the advisory states."}, {"cve": "CVE-2024-28849", "advisory": "The `follow-redirects` package is vulnerable to information disclosure due to the Improper Removal of Sensitive Information Before Storage or Transfer. The `RedirectableRequest.prototype._processResponse()` function in the `index.js` fails to remove the `Proxy-Authorization` header during cross-origin redirections. A remote attacker who can intercept the traffic on the network can leverage this behavior to retrieve the user's credentials.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was actually introduced in version `0.1.0` and therefore does not affect all versions prior to `1.15.5` as stated in the advisory."}, {"cve": "CVE-2023-34462", "advisory": "The `netty-handler` package is vulnerable to Denial of Service (DoS) attacks. The `decode()` method of the `SslClientHelloHandler` class fails to restrict the length of `ClientHello` records created by the `SniHandler` during TLS handshakes. Because fragmented handshakes are accepted without proper validations, a single TLS connection may cause TCP servers lacking idle timeouts to allocate 16MB of heap memory. A remote attacker can exploit this behavior by issuing a large number of `ClientHello` packets in order to cause the server to consume all available memory.\n\n*Advisory Deviation Notice*:\nThe Sonatype security research team discovered that this vulnerability was introduced in version `4.1.44.Final` and therefore does not affect all versions prior to `4.1.94.Final` as stated in the advisory."}, {"cve": "CVE-2016-1000344", "advisory": "BouncyCastle uses an insecure encryption method when encrypting data using the Diffie-Hellman key exchange algorithm.  The `engineInit` method in the `IESCipher` class and `configure` method in the `DH` class implement the ECB mode for encryption, which may result in information about the clear text being leaked into the encrypted cipher text.  An attacker with access to the encrypted data can exploit this vulnerability by analyzing the encrypted data for patterns that reveal information about the clear text.  \n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present in version 1.48 until 1.55, not 1.55 and earlier as the advisory states."}, {"cve": "CVE-2016-1000352", "advisory": "BouncyCastle uses an insecure encryption method when encrypting data using the elliptic curve key exchange algorithm.  The `engineInit` method in the `IESCipher` class and `configure` method in the `EC` class implement the ECB mode for encryption, which may result in information about the clear text being leaked into the encrypted cipher text.  An attacker with access to the encrypted data can exploit this vulnerability by analyzing the encrypted data for patterns that reveal information about the clear text.  \n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present in version 1.48 until 1.55, not 1.55 and earlier as the advisory states."}, {"cve": "CVE-2017-9096", "advisory": "The `itextpdf` and `itext7-core` packages are vulnerable to XML External Entity (XXE) attacks. Multiple methods in multiple classes do not restrict external entities. A remote attacker can upload a crafted PDF which when parsed by iText, results in an XXE attack and arbitrary functionality to be executed on the server.\n\n***Vulnerable File(s) and Function(s)***:\n- **maven : com.itextpdf : forms**\n  - com/itextpdf/forms/xfa/XfaForm.class\n- **maven : com.itextpdf : itext-pdfa**\n  - com/itextpdf/text/zugferd/InvoiceDOM.class\n- **maven : com.itextpdf : itextpdf**\n  - com/itextpdf/text/pdf/XfaForm.class\n- **maven : com.itextpdf : kernel**\n  - com/itextpdf/kernel/utils/XmlUtils.class\n  - com/itextpdf/kernel/utils/CompareTool.class\n- **maven : com.lowagie : itext**\n  - com/lowagie/text/pdf/XfaForm.class\n- **nuget : iTextSharp**\n  - lib/itextsharp.dll\n- **nuget : itext7**\n  - lib/net40/itext.forms.dll\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team has created a CVSS score that differs from the publicly available score that, based on our research, more accurately reflects the severity of the vulnerability."}, {"cve": "CVE-2023-28154", "advisory": "The `webpack` package is vulnerable due to the Declaration of a Variable with Unnecessarily Wide Scope. The `parseCommentOptions()` function in `JavascriptParser.js` allows comments utilizing webpack's `magic comments` feature, which can contain arbitrary JavaScript code, to access to global objects. An attacker could exploit this vulnerability by crafting a malicious script that make use of `magic comments` to achieve Remote Code Execution (RCE) in the global context of a JavaScript application.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team discovered that this vulnerability was actually introduced in version 4.0.0-alpha.0 instead of the 5.x.x branch as stated in the advisory."}, {"cve": "CVE-2024-22243", "advisory": "The `spring-web` package is vulnerable due to Improper Input Validation. The `fromUriString()` method in the `UriComponentsBuilder` class fails to correctly validate URIs according to the [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986#section-3.2) specification, allowing input to mistake the `userinfo` part of the resource as a `hostname` part. Attackers with the ability to influence URIs validated by applications that utilize this library can exploit this vulnerability by crafting URIs that may result in open redirects, and under some circumstances, Server-Side Request Forgery (SSRF) attacks.\n\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was actually introduced in version 3.0.0.RELEASE and does not exist in all versions prior to 5.3.32 as stated in the advisory."}, {"cve": "CVE-2024-29131", "advisory": "The `commons-configuration2` package contains an Out-of-bounds Write vulnerability. The `flatten()` method in the `ListDelimiterHandler` class iterates values contained in a specified object indefinitely if the value parameter passed to the `AbstractListDelimiterHandler.flattenIterator()` method is not a collection or an array. An attacker can exploit this vulnerability by adding a `path` object to the configuration to trigger an infinite loop, resulting in a Denial of Service (DoS) condition or other unintended behavior.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was actually introduced in version 1.0-rc1 of the `commons-configuration` package instead of the version 2.0.0 of the `commons-configuration2` package as stated in the advisory."}, {"cve": "CVE-2024-29133", "advisory": "The `commons-configuration2` package is vulnerable due to Out-of-bounds Write. The `flatten()` method in the `ListDelimiterHandler` class fails to properly process cyclic object trees when extracting values from them. An authenticated attacker can exploit this vulnerability by supplying specially crafted data to an affected application. This could cause a Denial of Service (DoS) condition due to resource exhaustion.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was also introduced in version 1.8 of the predecessor package `commons-configuration` instead of only affecting versions from 2.0 before 2.10.1 as stated in the advisory."}, {"cve": "CVE-2021-23364", "advisory": "The `browserslist` package is vulnerable to Regular expression Denial of Service (ReDoS) attacks. The `index.js` file contains several unsafe regular expressions used for parsing queried statistical data. A remote attacker who can influence the data queried by this package can exploit this vulnerability to cause a DoS condition by supplying a string that leverages `>` followed by a large number of numeric characters.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version 0.1.0 and not 4.0.0 as stated in the advisory."}, {"cve": "CVE-2021-37533", "advisory": "The `commons-net` package is vulnerable to Improper Input Validation. The `_parsePassiveModeReply()` method in the `FTPClient` class allows clients to trust a server's host IP address if it is specified in the reply of a Passive FTP connection request, overwriting the original server's IP address. This can be exploited by attackers with control over malicious FTP servers to redirect victims to other servers, leading to Sensitive Information Disclosure. \n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team discovered that this vulnerability was actually introduced in version 3.0 instead of the initial version as stated in the advisory."}, {"cve": "CVE-2018-8027", "advisory": "The Apache Camel package is vulnerable to XML eXternal Entity (XXE) Injection. The `doProcess()` function's conditional logic in `ValidatingProcessor.class` can, in some cases, allow external DTDs to be evaluated, even when they are disabled.  A remote attacker can exploit this vulnerability to conduct Server Side Request Forgery (SSRF), exfiltrate data, or other XXE related attacks.\n\nAdvisory Deviation Notice: The Sonatype security research team discovered that the root cause of the vulnerability is in 1.1.0, not in 2.20.0 as the advisory states."}, {"cve": "CVE-2019-0194", "advisory": "Apache Camel is vulnerable to Directory Traversal. The `createFileName()` method in the `GenericFileProducer` class does not account for traversal characters within file names when creating files. A remote attacker with the ability to create files can exploit this vulnerability by supplying a file name containing traversal characters, such as `../`, to create and write to files outside of the intended starting directory.\n\nExample:\n```\n<from uri=\"file:src/test/resources/data?noop=true\"/>\n<setHeader headerName=\"CamelFileName\">\n    <simple>../../${file:name}</simple>\n</setHeader>\n<to uri=\"file:target/results\"/>\n```\nReference: [https://issues.apache.org/jira/browse/CAMEL-13042](https://issues.apache.org/jira/browse/CAMEL-13042)\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that a fix for this vulnerability was introduced in version 2.21.5, and that the vulnerability exists in versions 2.21.0 to 2.21.4 and not 2.21.0 to 2.21.3 as the advisory states."}, {"cve": "CVE-2020-11973", "advisory": "The `camel-netty` and `camel-netty4` packages are vulnerable to Deserialization of Untrusted Data. The `parseURI()` method in the `NettyConfiguration` class deserializes untrusted objects by default. A remote attacker can exploit this vulnerability by supplying a malicious serialized object via any affected input parameter which, when deserialized, may result in Remote Code Execution (RCE) or other unexpected behavior.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was fixed in version 3.1.0 of `camel-netty` and version 2.25.1 of `camel-netty4`, not 3.2.0 and 2.25.1 as stated in the advisory."}, {"cve": "CVE-2024-6783", "advisory": "The `vue-template-compiler` is vulnerable to Cross-site Scripting (XSS) attacks due to Prototype Pollution. The `genClassSegments()` and `genStyleSegments()` functions in the `modules.ts` file fail to restrict the modification of the prototype chain of `staticClass` and `staticStyle` object properties. These properties are then used to generate render functions that are executed by Vue. A remote attacker can exploit this vulnerability to inject a JavaScript payload in one of the aforementioned object prototype properties which, once evaluated by Vue, will result in script execution.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version 2.4.0 and not 2.0.0 as stated in the advisory."}, {"cve": "CVE-2021-28165", "advisory": "The `jetty-io` package is vulnerable to Denial of Service (DoS) attacks. The `fill()` method in the `SslConnection$DecryptedEndPoint` class mishandles the buffer used to read TLS frame data. A remote attacker can exploit this vulnerability by submitting an overlarge message (>17408 bytes) over TLS which, when processed, may cause the application to enter an infinite loop resulting in a DoS condition.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version 7.6.0.M0 and not 7.2.2 as stated in the advisory."}, {"cve": "CVE-2024-22371", "advisory": "The `camel-support` package is vulnerable due to the Generation of Error Messages Containing Sensitive Information. The `doneUow()` method of the `UnitOfWorkHelper` logs the value of a provided `exchange` object upon encountering an error. A local attacker could exploit this vulnerability by supplying both a crafted `EventFactory` and an `ExchangeCreatedEvent` in order to produce an exception that will disclose the values of sensitive object properties.\n\n***Advisory Deviation Notice:***\nThe Sonatype Security Research team discovered that this vulnerability affects the `org.apache.camel : camel-support` package, and published vulnerable ranges and fixed versions apply to that package. However, the `org.apache.camel : camel-core` is also directly affected by this vulnerability from versions 2.2.0 to 2.11.4 inclusive."}, {"cve": "CVE-2021-21342", "advisory": "The `xstream` package is vulnerable to Server-Side Request Forgery (SSRF). The `setupSecurity` method in `XStream.class` does not properly process certain types in an input stream. A remote attacker can exploit this behavior by injecting specially-crafted objects in an input stream. Upon unmarshalling, this would allow the attacker to access data from internal resources that are otherwise not publically available.\n\n*Advisory Deviation Notice:*\n                        After NVD added its CVSS score, Sonatype's Security Research team re-evaluated its CVSS score. We kept it the same, continuing to match the GitHub advisory link's CVSS score as it is the more accurate score."}, {"cve": "CVE-2022-21222", "advisory": "The `css-what` package is vulnerable to Regular Expression Denial of Service (ReDoS). The `parseSelector` function in the `parse.ts` and `index.js` files uses unsafe regular expressions to parse incoming CSS selectors. A remote attacker can exploit this vulnerability by supplying a specially crafted selector with incomplete attributes to cause catastrophic backtracking and ultimately a DoS condition.\n\n*Advisory Deviation Notice:*\nThe Sonatype Security Research team discovered that the fix for this vulnerability was actually introduced in version 5.0.1 instead of 2.1.3 as stated in the advisory."}, {"cve": "CVE-2021-42392", "advisory": "The `h2` package is vulnerable to Remote Code Execution (RCE). The `getConnection` method in the `JdbcUtils` class performs a context lookup of an unfiltered user supplied url. An attacker with the ability to influence the parameters sent to the aforementioned function can exploit this vulnerability to load a remote malicious class ultimately resulting in Remote Code Execution. \n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that this vulnerability was introduced in version 1.0.57 instead of 1.1.100 as stated in the advisory."}, {"cve": "sonatype-2022-6243", "advisory": "The `h2database` package is vulnerable due to the Exposure of Sensitive Information to an Unauthorized Actor. The `init()` function in the `WebServer` class allows a local user to specify the admin password in plaintext as a command line argument. Also, this command line argument overwrites what is specified in the potentially better-secured configuration file. An attacker who can see the system's running processes will then be able to see the admin password in plaintext.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team has created a CVSS score that differs from the publicly available score that, based on our research, more accurately reflects the severity of the vulnerability.\n\n**Note:** This vulnerability was assigned CVE-2022-45868."}, {"cve": "CVE-2023-36479", "advisory": "The `jetty-servlets`, `jetty-ee9-servlets`, and `jetty-ee10-servlets` packages are vulnerable to Argument Injection due to Improper Neutralization of Quoting Syntax. The `exec()` method of the `CGI` class mishandles the quoting of user-supplied filenames of binaries that are subsequently launched by Java's `Runtime.exec()`. A remote attacker can exploit this vulnerability with requests to binary locations on servers whose `cgi-bin` directory includes subdirectories with names that are suffixed by double-quotation characters. This may result in existing binaries executing with additional arguments that may induce unexpected behavior in affected applications.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was first addressed in version `12.0.0.beta1` of 12.x and not `12.0.0-beta2` as stated in the advisory."}], "TotalWorkarounds": 77, "Workarounds": [{"cve": "CVE-2020-25638", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling SQL comments:\n\n>An upgrade is recommended, but if you are using a very old version which makes it difficult to upgrade to the latest supported versions (series 5.4 and 5.3 at time of writing this), you can disable SQL comments by setting:<br><br>\n`hibernate.use_sql_comments=false` <br><br>\nThis also is the default, so if you didn't set the use_sql_comments at all you are not affected.\n\nReference: [https://hibernate.atlassian.net/browse/HHH-14225](https://hibernate.atlassian.net/browse/HHH-14225)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2017-3523", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue and ensuring the `autoDeserialize` flag is not set.\nIf upgrading in not a viable option an workaround has been included in the original advisory:\n```\nThis vulnerability can be mitigated on older versions by ensuring the flags\n\"autoDeserialize\" and \"useServerPrepStmts\" are not set.\n```\nReference:[https://www.computest.nl/advisories/CT-2017-0425_MySQL-Connector-J.txt](https://www.computest.nl/advisories/CT-2017-0425_MySQL-Connector-J.txt)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2024-45296", "remediation": "\nPlease refer to the updated [GitHub advisory](https://github.com/advisories/GHSA-9wv6-86v2-598j) for information relating to **patches** and **workarounds**.\n\nSpecifically:\n\n> For users of 0.1, upgrade to 0.1.10. All other users should upgrade to 8.0.0.\n&nbsp;\nThese versions add backtrack protection when a custom regex pattern is not provided:\n>* 0.1.10\n>* 1.9.0\n>* 3.3.0\n>* 6.3.0\n>\n> **They do not protect against vulnerable user supplied capture groups. Protecting against explicit user patterns is out of scope for old versions and not considered a vulnerability.**\n&nbsp;\n> Version 7.1.0 can enable `strict: true` and get an error when the regular expression might be bad.\n> Version 8.0.0 removes the features that can cause a ReDoS.\n&nbsp;\n> All versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change `/:a-:b` to `/:a-:b([^-/]+)`.\n&nbsp;\n> If paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2022-38752", "remediation": "We recommend ensuring that `AllowRecursiveKeys` is never set to `true` and upgrading to a version of this component that is not vulnerable to this specific issue, as the application will still be vulnerable after the upgrade if `AllowRecursiveKeys` is not set to `false`, which is the default configuration since version 1.27.\n\nFor more information on setting `AllowRecursiveKeys`, please see this documentation: [https://www.javadoc.io/doc/org.yaml/snakeyaml/latest/org/yaml/snakeyaml/LoaderOptions.html#setAllowRecursiveKeys-boolean-](https://www.javadoc.io/doc/org.yaml/snakeyaml/latest/org/yaml/snakeyaml/LoaderOptions.html#setAllowRecursiveKeys-boolean-)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-21290", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by following the workarounds provided by the project:\n\n>Specify your own java.io.tmpdir when you start the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.\n\nReference: [https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2](https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2020-11023", "remediation": "\nAlternatively, a workaround is provided by [jQuery](https://github.com/jquery/jquery/security/advisories/GHSA-jpcq-cgw6-v4j6):\n>To workaround this issue without upgrading, use DOMPurify with its `SAFE_FOR_JQUERY` option to sanitize the HTML string before passing it to a jQuery method.\n\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-21290", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by following the workarounds provided by the project:\n\n>Specify your own java.io.tmpdir when you start the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.\n\nReference: [https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2](https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "sonatype-2020-0026", "remediation": "There is no non-vulnerable upgrade path for this component/package. We recommend investigating alternative components or a potential mitigating control. \n\nPer the vendor documentation, \"if you create SslHandler for the client side and want proper security, we advice that you configure the SSLEngine (see SSLParameters.setEndpointIdentificationAlgorithm(String)):\"\n\n ```\nSSLEngine sslEngine = sslHandler.engine();\n SSLParameters sslParameters = sslEngine.getSSLParameters();\n // only available since Java 7\n sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n sslEngine.setSSLParameters(sslParameters);\n```\nReference: [https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-](https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-)\n\n\n**Amazon Web Services (AWS) SDK components**\nUsers of `software.amazon.awssdk:netty-nio-client` can upgrade to version 2.5.23 or higher. Although multiple versions of `software.amazon.awssdk:netty-nio-client` borrow functionality from the dependency `io.netty:netty-handler`, Amazon Web Services released a [custom fix](https://github.com/aws/aws-sdk-java-v2/discussions/3901) for the issue in versions 2.5.23 of their `netty-nio-client` effectively squashing the flaw. Our products may continue to flag these fixed versions should your development build (`pom.xml` file) be pulling in vulnerable versions of `io.netty:netty-handler` but the alert does not apply when running `software.amazon.awssdk:netty-nio-client` version >= 2.5.23.\n\nAdditional reference: [https://github.com/aws/aws-sdk-java-v2/issues/1171](https://github.com/aws/aws-sdk-java-v2/issues/1171)"}, {"cve": "sonatype-2023-4380", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided the following workaround:\n\n>A user can limit the amount of RST frames that are accepted per connection over a timeframe manually using either an own `Http2FrameListener` implementation or an `ChannelInboundHandler` implementation (depending which http2 API is used).\n\nReference: <https://github.com/advisories/GHSA-xpw8-rcwv-8f8p>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2022-22965", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. \n\nThe Spring project has [released guidance on applying a workaround](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement) for those who are unable to upgrade.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "sonatype-2022-1764", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. \n\nThe Spring project has [released guidance on applying a workaround](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement) for those who are unable to upgrade.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "sonatype-2018-0035", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. If upgrading is not a viable option, this vulnerability can be mitigated by disabling the cache.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2023-26048", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by setting the `maxRequestSize` parameter of affected `@MultipartConfig` configurations which, while still read into memory, will limit the entirety of multipart request content.\n\nReference: <https://github.com/eclipse/jetty.project/security/advisories/GHSA-qw69-rqj8-6qw8>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2022-22965", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. \n\nThe Spring project has [released guidance on applying a workaround](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement) for those who are unable to upgrade.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "sonatype-2022-1764", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. \n\nThe Spring project has [released guidance on applying a workaround](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement) for those who are unable to upgrade.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2022-23305", "remediation": "There is no non-vulnerable upgrade path for `log4j:log4j` 1.x. We recommend upgrading to `log4j` 2.x, which introduced a `JDBCAppender` that makes use of prepared statements and parameterization to protect against SQL Injection. Alternatively, this vulnerability can be mitigated in `log4j` 1.x by removing all usages of the `JDBCAppender` from the application's configuration. \n\nReference: [https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y](https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y)\n\nThis vulnerability has been fixed in version `1.3.0.Final` of `org.jboss.logmanager:log4j-jboss-logmanager` by removing the vulnerable class from the project."}, {"cve": "CVE-2022-23307", "remediation": "There is no non-vulnerable upgrade path for for `log4j:log4j` 1.x. We recommend upgrading to `log4j` 2.x and Apache Chainsaw 2.1.0. Alternatively, do not configure Chainsaw to read serialized log events. Use a different receiver, such as `XMLSocketReceiver`.\n\nReference:\n[https://www.mail-archive.com/announce@apache.org/msg07042.html](https://www.mail-archive.com/announce@apache.org/msg07042.html)\n[https://lists.apache.org/thread/rx0hpjow5csq05r93cyvntj9ry19tm9y](https://lists.apache.org/thread/rx0hpjow5csq05r93cyvntj9ry19tm9y)\n\nThis vulnerability has been fixed in version `1.3.0.Final` of `org.jboss.logmanager:log4j-jboss-logmanager` by removing Apache Chainsaw from the project."}, {"cve": "CVE-2017-7525", "remediation": "*Update*: As of version 2.10.0, Jackson now provides a safe default typing solution that fully mitigates this vulnerability.\n\nReference: [https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2](https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2)\n\nIn order to mitigate this vulnerability, we recommend upgrading to at least version 2.10.0 and changing any usages of `enableDefaultTyping()` to `activateDefaultTyping()`.\n\nAlternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling default typing. Instead, you will need to implement your own:\n\n>It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers.\n\nReference: [https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n\nExamples of implementing your own typing can be found by looking at [Spring Security's fix](https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439) or [this Stack Overflow article](https://stackoverflow.com/questions/12353774/how-to-customize-jackson-type-information-mechanism)."}, {"cve": "CVE-2021-41184", "remediation": "\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control.\n\n```\nA workaround is to not accept the value of the of option from untrusted sources.\n```\nReference: [https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327](https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327)"}, {"cve": "CVE-2022-31160", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. If upgrading is not possible, the project maintainers suggest the following workaround:\n\n>To remediate the issue, if you can change the initial HTML, you can wrap all the non-input contents of the `label` in a `span`:\n>\n>```\n><label>\n>\t<input id=\"test-input\">\n>\t<span>&lt;img src=x onerror=\"alert(1)\"&gt;</span>\n></label>\n>```\n\nReference: [https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9](https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2022-36033", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided the following workaround(s):\n\n>To remediate this issue without immediately upgrading:\n>* disable `SafeList.preserveRelativeLinks`, which will rewrite input URLs as absolute URLs\n>* ensure an appropriate [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) is defined. (This should be used regardless of upgrading, as a defence-in-depth best practice.)\n\nReference: [https://github.com/jhy/jsoup/security/advisories/GHSA-gp7f-rwcx-9369](https://github.com/jhy/jsoup/security/advisories/GHSA-gp7f-rwcx-9369)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2018-17187", "remediation": "\nAlternative workaround:\n>>>If upgrading is not currently possible then potential workarounds include providing a custom SSLContext which enables hostname verification or omitting use of the 'transport.ssl(...)' methods and performing TLS through other means such as utilizing existing IO framework support or supplying a custom transport wrapper layer.\n\nReference: https://qpid.apache.org/cves/CVE-2018-17187.html\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2023-27539", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. \n> Setting `Regexp.timeout` in Ruby 3.2 is a possible workaround.\n\nReference: <https://discuss.rubyonrails.org/t/cve-2023-27539-possible-denial-of-service-vulnerability-in-racks-header-parsing/82466#workarounds-4>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2024-26141", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, patches provided by the project maintainers should be applied.\n\nReference: [https://github.com/rack/rack/security/advisories/GHSA-xj5v-6v4g-jfw6](https://github.com/rack/rack/security/advisories/GHSA-xj5v-6v4g-jfw6)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2013-0156", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue.\r\n\r\n\"\r\nWorkarounds \r\n----------- \r\nThe workarounds differ depending on the Rails version you are using, and whether or not your application needs to support XML Parameters. \r\n\r\nDisabling XML Entirely \r\n---------------------- \r\nUsers who don't need to support XML parameters should disable XML parsing entirely by placing one of the following snippets inside an application initializer. \r\n\r\nRails 3.2, 3.1 and 3.0 \r\n---------------------- \r\nActionDispatch::ParamsParser::DEFAULT_PARSERS.delete(Mime::XML) \r\n\r\nRails 2.3 \r\n--------- \r\nActionController::Base.param_parsers.delete(Mime::XML) \r\n\r\n\r\nRemoving YAML and Symbol support from the XML parser \r\n---------------------------------------------------- \r\nIf your application must continue to parse XML you must disable the YAML and Symbol type conversion from the Rails XML parser.  You should place one of the following code snippets in an application initializer to ensure your application isn't vulnerable.  You should also consider greatly reducing the value of REXML::Document.entity_expansion_limit to limit the risk of entity explosion attacks. \r\n\r\nYAML Parameter Parsing \r\n---------------------- \r\nRails have also shipped with YAML parameter parsing code, this was only ever enabled by default in Rails 1.1.0, but users who do enable it are vulnerable to all the exploits mentioned above..  There is no fix for YAML object injection, so if you have enabled it you must disable it immediately. \r\n\r\nFor 2.x apps, check whether your app sets `ActionController::Base.param_parsers[Mime::YAML] = :yaml` and snip that out if it does. \r\n\r\nFor 3.x apps do this to disable: \r\n\r\n  ActionDispatch::ParamsParser::DEFAULT_PARSERS.delete(Mime::YAML) \r\n\r\nRails 3.2, 3.1, 3.0 \r\n--------- \r\n\r\nActiveSupport::XmlMini::PARSING.delete(\"symbol\") \r\nActiveSupport::XmlMini::PARSING.delete(\"yaml\") \r\n\r\nRails 2.3 \r\n--------- \r\n\r\nActiveSupport::CoreExtensions::Hash::Conversions::XML_PARSING.delete('symbol') \r\nActiveSupport::CoreExtensions::Hash::Conversions::XML_PARSING.delete('yaml') \r\n\"\r\nReference: https://groups.google.com/forum/#!topic/rubyonrails-security/61bkgvnSGTQ/discussion"}, {"cve": "CVE-2015-3227", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. If upgrading is not a viable option, it is possible to remediate this issue by changing the XML parser used by activesupport with a setting in `[xml_mini.rb](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/xml_mini.rb#L208)` as per the following instructions:\r\n\t  \r\n\t  Workarounds \r\n\t\t\"\"\"\r\n\t\tUse an XML parser that is not impacted by this problem, such as Nokogiri or \r\n\t\tLibXML.  You can change the processor like this: \r\n\r\n\t\tActiveSupport::XmlMini.backend = 'Nokogiri' \r\n\r\n\t\tIf you cannot change XML parsers, then adjust \r\n\t\t`RUBY_THREAD_MACHINE_STACK_SIZE`. \r\n\t  \"\"\"\r\n\t  Ref: https://groups.google.com/forum/#!msg/rubyonrails-security/bahr2JLnxvk/x4EocXnHPp8J"}, {"cve": "CVE-2021-41184", "remediation": "\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control.\n\n```\nA workaround is to not accept the value of the of option from untrusted sources.\n```\nReference: [https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327](https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327)"}, {"cve": "CVE-2020-11023", "remediation": "\nAlternatively, a workaround is provided by [jQuery](https://github.com/jquery/jquery/security/advisories/GHSA-jpcq-cgw6-v4j6):\n>To workaround this issue without upgrading, use DOMPurify with its `SAFE_FOR_JQUERY` option to sanitize the HTML string before passing it to a jQuery method.\n\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2017-7657", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, this vulnerability can be mitigated by disabling HTTP/1.1 support.\n* Ref: http://www.eclipse.org/jetty/documentation/9.4.x/configuring-connectors.html   (HTTP Configuration)"}, {"cve": "CVE-2017-7658", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue.  Alternatively, it is possible to mitigate this vulnerability by disabling support for HTTP versions lower than two.\n* Ref: http://www.eclipse.org/jetty/documentation/9.4.x/configuring-connectors.html   (HTTP Configuration)"}, {"cve": "sonatype-2020-0026", "remediation": "There is no non-vulnerable upgrade path for this component/package. We recommend investigating alternative components or a potential mitigating control. \n\nPer the vendor documentation, \"if you create SslHandler for the client side and want proper security, we advice that you configure the SSLEngine (see SSLParameters.setEndpointIdentificationAlgorithm(String)):\"\n\n ```\nSSLEngine sslEngine = sslHandler.engine();\n SSLParameters sslParameters = sslEngine.getSSLParameters();\n // only available since Java 7\n sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n sslEngine.setSSLParameters(sslParameters);\n```\nReference: [https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-](https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-)\n\n\n**Amazon Web Services (AWS) SDK components**\nUsers of `software.amazon.awssdk:netty-nio-client` can upgrade to version 2.5.23 or higher. Although multiple versions of `software.amazon.awssdk:netty-nio-client` borrow functionality from the dependency `io.netty:netty-handler`, Amazon Web Services released a [custom fix](https://github.com/aws/aws-sdk-java-v2/discussions/3901) for the issue in versions 2.5.23 of their `netty-nio-client` effectively squashing the flaw. Our products may continue to flag these fixed versions should your development build (`pom.xml` file) be pulling in vulnerable versions of `io.netty:netty-handler` but the alert does not apply when running `software.amazon.awssdk:netty-nio-client` version >= 2.5.23.\n\nAdditional reference: [https://github.com/aws/aws-sdk-java-v2/issues/1171](https://github.com/aws/aws-sdk-java-v2/issues/1171)"}, {"cve": "CVE-2023-33202", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided users with the following workaround:\n\n>The attack can be avoided by either updating or filtering PEM requests containing EXTERNAL tagged encodings.\n\nReference: <https://github.com/bcgit/bc-java/wiki/CVE-2023-33202>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2020-14060", "remediation": "*Update*: As of version 2.10.0, Jackson now provides a safe default typing solution that fully mitigates this vulnerability.\n\nReference: [https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2](https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2)\n\nIn order to mitigate this vulnerability, we recommend upgrading to at least version 2.10.0 and changing any usages of `enableDefaultTyping()` to `activateDefaultTyping()`.\n\nAlternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling default typing.  Instead, you will need to implement your own:\n\n>It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers.\n\nReference: [https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n\nExamples of implementing your own typing can be found by looking at [Spring Security's fix](https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439) or [this Stack Overflow article](https://stackoverflow.com/questions/12353774/how-to-customize-jackson-type-information-mechanism)."}, {"cve": "CVE-2020-14061", "remediation": "*Update*: As of version 2.10.0, Jackson now provides a safe default typing solution that fully mitigates this vulnerability.\n\nReference: [https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2](https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2)\n\nIn order to mitigate this vulnerability, we recommend upgrading to at least version 2.10.0 and changing any usages of `enableDefaultTyping()` to `activateDefaultTyping()`.\n\nAlternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling default typing.  Instead, you will need to implement your own:\n\n>It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers.\n\nReference: [https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n\nExamples of implementing your own typing can be found by looking at [Spring Security's fix](https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439) or [this Stack Overflow article](https://stackoverflow.com/questions/12353774/how-to-customize-jackson-type-information-mechanism)."}, {"cve": "sonatype-2020-0348", "remediation": "*Update*: As of version 2.10.0, Jackson now provides a safe default typing solution that fully mitigates this vulnerability.\n\nReference: [https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2](https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2)\n\nIn order to mitigate this vulnerability, we recommend upgrading to at least version 2.10.0 and changing any usages of `enableDefaultTyping()` to `activateDefaultTyping()`.\n\nAlternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling default typing.  Instead, you will need to implement your own:\n\n>It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers.\n\nReference: [https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n\nExamples of implementing your own typing can be found by looking at [Spring Security's fix](https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439) or [this Stack Overflow article](https://stackoverflow.com/questions/12353774/how-to-customize-jackson-type-information-mechanism)."}, {"cve": "sonatype-2020-0436", "remediation": "*Update*: As of version 2.10.0, Jackson now provides a safe default typing solution that fully mitigates this vulnerability.\n\nReference: [https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2](https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2)\n\nIn order to mitigate this vulnerability, we recommend upgrading to at least version 2.10.0 and changing any usages of `enableDefaultTyping()` to `activateDefaultTyping()`.\n\nAlternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling default typing.  Instead, you will need to implement your own:\n\n>It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers.\n\nReference: [https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n\nExamples of implementing your own typing can be found by looking at [Spring Security's fix](https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439) or [this Stack Overflow article](https://stackoverflow.com/questions/12353774/how-to-customize-jackson-type-information-mechanism)."}, {"cve": "CVE-2020-25638", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling SQL comments:\n\n>An upgrade is recommended, but if you are using a very old version which makes it difficult to upgrade to the latest supported versions (series 5.4 and 5.3 at time of writing this), you can disable SQL comments by setting:<br><br>\n`hibernate.use_sql_comments=false` <br><br>\nThis also is the default, so if you didn't set the use_sql_comments at all you are not affected.\n\nReference: [https://hibernate.atlassian.net/browse/HHH-14225](https://hibernate.atlassian.net/browse/HHH-14225)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2022-38752", "remediation": "We recommend ensuring that `AllowRecursiveKeys` is never set to `true` and upgrading to a version of this component that is not vulnerable to this specific issue, as the application will still be vulnerable after the upgrade if `AllowRecursiveKeys` is not set to `false`, which is the default configuration since version 1.27.\n\nFor more information on setting `AllowRecursiveKeys`, please see this documentation: [https://www.javadoc.io/doc/org.yaml/snakeyaml/latest/org/yaml/snakeyaml/LoaderOptions.html#setAllowRecursiveKeys-boolean-](https://www.javadoc.io/doc/org.yaml/snakeyaml/latest/org/yaml/snakeyaml/LoaderOptions.html#setAllowRecursiveKeys-boolean-)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2023-33202", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided users with the following workaround:\n\n>The attack can be avoided by either updating or filtering PEM requests containing EXTERNAL tagged encodings.\n\nReference: <https://github.com/bcgit/bc-java/wiki/CVE-2023-33202>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2023-26048", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by setting the `maxRequestSize` parameter of affected `@MultipartConfig` configurations which, while still read into memory, will limit the entirety of multipart request content.\n\nReference: <https://github.com/eclipse/jetty.project/security/advisories/GHSA-qw69-rqj8-6qw8>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2016-1000027", "remediation": "\nA warning has been provided in the official [Javadocs](https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.html) of the `HttpInvokerServiceExporter` class and support for several serialization-based remoting technologies including this class has been deprecated from 5.3.0 onwards and completely removed from 6.0.0 and onwards:\n\n>WARNING: Be aware of vulnerabilities due to unsafe Java deserialization: Manipulated input streams could lead to unwanted code execution on the server during the deserialization step. As a consequence, do not expose HTTP invoker endpoints to untrusted clients but rather just between your own services. In general, we strongly recommend any other message format (e.g. JSON) instead.\n\nThe developer's general advice also states:\n>Do not use Java serialization for external endpoints, in particular not for unauthorized ones. HTTP invoker is not a well-kept secret (or an \"oversight\") but rather the typical case of how a Spring application would expose serialization endpoints to begin with... he has a point that we should make this case all across our documentation, including the javadoc. But I don't really see a CVE case here, just a documentation improvement.\n>\n>Pivotal will enhance their documentation for the 4.2.6 and 3.2.17 releases.\n\nReference: [https://www.tenable.com/security/research/tra-2016-20](https://www.tenable.com/security/research/tra-2016-20)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2013-0248", "remediation": "\nChange the configuration of `javax.servlet.context.tempdir` to use a protected directory. Only the application should be able to read/write the temporary files.\nNote: There was no code change in the provided fix. Only the documentation was updated to make users aware of the implications of keeping the default setting using a non-protected directory."}, {"cve": "CVE-2016-3092", "remediation": "\n**Workaround:**\n\n> 1\\. All users of Apache Struts should replace the copy of Commons\n>\n> 2\\. System administrators should restrict the permitted maximum size of HTTP request header values (For example, Apache Httpd provides a LimitRequestFieldSize directive and Apache Tomcat provides a maxHttpHeaderSize attribute in their respective configuration files). A maximum header value size of 2048 bytes would block all dangerous request.\n>\n> Example:\n> File upload requests contain a so-called boundary in the Content-Type header:\n>\n> ```\n> Content-Type: multipart/mixed;\n> boundary=gc0p4Jq0M2Yt08jU534c0p\n> ```\n>\n> The boundary may be chosen by the request sender. In the case of previous versions of Apache Commons Fileupload the boundary becomes dangerous if its size is close to 4096 bytes.\n\nReference: [http://mail-archives.apache.org/mod_mbox/www-announce/201606.mbox/%3C45A20804-ABFF-4FED-A297-69AC95AB9A3F@apache.org%3E](http://mail-archives.apache.org/mod_mbox/www-announce/201606.mbox/%3C45A20804-ABFF-4FED-A297-69AC95AB9A3F@apache.org%3E)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "sonatype-2016-0397", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. If upgrading is not an option, we recommend disabling the `WRITE_BIGDECIMAL_AS_PLAIN` option.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "sonatype-2020-0026", "remediation": "There is no non-vulnerable upgrade path for this component/package. We recommend investigating alternative components or a potential mitigating control. \n\nPer the vendor documentation, \"if you create SslHandler for the client side and want proper security, we advice that you configure the SSLEngine (see SSLParameters.setEndpointIdentificationAlgorithm(String)):\"\n\n ```\nSSLEngine sslEngine = sslHandler.engine();\n SSLParameters sslParameters = sslEngine.getSSLParameters();\n // only available since Java 7\n sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n sslEngine.setSSLParameters(sslParameters);\n```\nReference: [https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-](https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-)\n\n\n**Amazon Web Services (AWS) SDK components**\nUsers of `software.amazon.awssdk:netty-nio-client` can upgrade to version 2.5.23 or higher. Although multiple versions of `software.amazon.awssdk:netty-nio-client` borrow functionality from the dependency `io.netty:netty-handler`, Amazon Web Services released a [custom fix](https://github.com/aws/aws-sdk-java-v2/discussions/3901) for the issue in versions 2.5.23 of their `netty-nio-client` effectively squashing the flaw. Our products may continue to flag these fixed versions should your development build (`pom.xml` file) be pulling in vulnerable versions of `io.netty:netty-handler` but the alert does not apply when running `software.amazon.awssdk:netty-nio-client` version >= 2.5.23.\n\nAdditional reference: [https://github.com/aws/aws-sdk-java-v2/issues/1171](https://github.com/aws/aws-sdk-java-v2/issues/1171)"}, {"cve": "CVE-2022-24823", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided users with the following workaround:\n\n>Specify your own `java.io.tmpdir` when you start the JVM or use `DefaultHttpDataFactory.setBaseDir(...)` to set the directory to something that is only readable by the current user or update to Java 7 or above.\n\nReference: [https://github.com/netty/netty/security/advisories/GHSA-269q-hmxg-m83q](https://github.com/netty/netty/security/advisories/GHSA-269q-hmxg-m83q)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2017-7525", "remediation": "*Update*: As of version 2.10.0, Jackson now provides a safe default typing solution that fully mitigates this vulnerability.\n\nReference: [https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2](https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2)\n\nIn order to mitigate this vulnerability, we recommend upgrading to at least version 2.10.0 and changing any usages of `enableDefaultTyping()` to `activateDefaultTyping()`.\n\nAlternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling default typing. Instead, you will need to implement your own:\n\n>It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers.\n\nReference: [https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n\nExamples of implementing your own typing can be found by looking at [Spring Security's fix](https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439) or [this Stack Overflow article](https://stackoverflow.com/questions/12353774/how-to-customize-jackson-type-information-mechanism)."}, {"cve": "CVE-2017-7657", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, this vulnerability can be mitigated by disabling HTTP/1.1 support.\n* Ref: http://www.eclipse.org/jetty/documentation/9.4.x/configuring-connectors.html   (HTTP Configuration)"}, {"cve": "CVE-2017-7658", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue.  Alternatively, it is possible to mitigate this vulnerability by disabling support for HTTP versions lower than two.\n* Ref: http://www.eclipse.org/jetty/documentation/9.4.x/configuring-connectors.html   (HTTP Configuration)"}, {"cve": "CVE-2021-28165", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by following the [workaround procedure](https://github.com/eclipse/jetty.project/security/advisories/GHSA-26vr-8j45-3r4w) provided by the project. \n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2023-26048", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by setting the `maxRequestSize` parameter of affected `@MultipartConfig` configurations which, while still read into memory, will limit the entirety of multipart request content.\n\nReference: <https://github.com/eclipse/jetty.project/security/advisories/GHSA-qw69-rqj8-6qw8>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "sonatype-2016-0397", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. If upgrading is not an option, we recommend disabling the `WRITE_BIGDECIMAL_AS_PLAIN` option.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2023-20883", "remediation": "\n> Workarounds: configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (/) of the application.\n\nReference: <https://spring.io/security/cve-2023-20883>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2024-45296", "remediation": "\nPlease refer to the updated [GitHub advisory](https://github.com/advisories/GHSA-9wv6-86v2-598j) for information relating to **patches** and **workarounds**.\n\nSpecifically:\n\n> For users of 0.1, upgrade to 0.1.10. All other users should upgrade to 8.0.0.\n&nbsp;\nThese versions add backtrack protection when a custom regex pattern is not provided:\n>* 0.1.10\n>* 1.9.0\n>* 3.3.0\n>* 6.3.0\n>\n> **They do not protect against vulnerable user supplied capture groups. Protecting against explicit user patterns is out of scope for old versions and not considered a vulnerability.**\n&nbsp;\n> Version 7.1.0 can enable `strict: true` and get an error when the regular expression might be bad.\n> Version 8.0.0 removes the features that can cause a ReDoS.\n&nbsp;\n> All versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change `/:a-:b` to `/:a-:b([^-/]+)`.\n&nbsp;\n> If paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2020-26217", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue and implementing XStream's Security Framework with an `allow-list`.  \n\nAlternatively, a workaround has been provided at: [https://github.com/x-stream/xstream/security/advisories/GHSA-mw36-7c6c-q4q2](https://github.com/x-stream/xstream/security/advisories/GHSA-mw36-7c6c-q4q2)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2020-26258", "remediation": "\nMitigation: Follow the `Workaround` instructions in this [reference](https://x-stream.github.io/CVE-2020-26258.html#workaround) depending on the version of `xstream` utilized and define a default deny list with the `jdk.nashorn.internal.objects.NativeString` string and `.*\\\\.ReadAllStream\\\\$FileStream` regular expression option to disable the feature. We also recommend following the advice made by the project developers to define a whitelist with the security framework as discussed [here](https://x-stream.github.io/security.html#framework).\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control.\n\n*References*: \n\n[https://x-stream.github.io/CVE-2020-26259.html](https://x-stream.github.io/CVE-2020-26259.html)\n\n[https://x-stream.github.io/security.html#framework](https://x-stream.github.io/security.html#framework)"}, {"cve": "CVE-2020-26259", "remediation": "\nMitigation: Follow the `Workaround` instructions in this [reference](https://x-stream.github.io/CVE-2020-26259.html#workaround) depending on the version of `xstream` utilized and define a default deny list with the `jdk.nashorn.internal.objects.NativeString` string and `.*\\\\.ReadAllStream\\\\$FileStream` regular expression option to disable the feature. We also recommend following the advice made by the project developers to define a whitelist with the security framework as discussed [here](https://x-stream.github.io/security.html#framework).\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control.\n\n*References*: \n\n[https://x-stream.github.io/CVE-2020-26259.html](https://x-stream.github.io/CVE-2020-26259.html)\n\n[https://x-stream.github.io/security.html#framework](https://x-stream.github.io/security.html#framework)"}, {"cve": "CVE-2021-21341", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided the following workaround:\n\n>As recommended, use XStream's security framework to implement a whitelist for the allowed types. This is possible since XStream 1.4.7 and it is the default since XStream 1.4.18.\n>\n>Users of XStream 1.4.15 should add these lines and additionally the lines for version 1.4.16 and 1.4.17:\n>```\n>xstream.denyTypes(new String[]{ \"sun.awt.datatransfer.DataTransferer$IndexOrderComparator\", \"com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator\" });\n>xstream.denyTypesByRegExp(new String[]{ \".*\\\\$ServiceNameIterator\", \"(javax|sun.swing)\\\\..*LazyValue\",\"javafx\\\\.collections\\\\.ObservableList\\\\$.*\", \".*\\\\.bcel\\\\..*\\\\.util\\\\.ClassLoader\" });\n>xstream.denyTypeHierarchy(java.io.InputStream.class );\n>xstream.denyTypeHierarchy(java.nio.channels.Channel.class );\n>xstream.denyTypeHierarchy(javax.activation.DataSource.class );\n>xstream.denyTypeHierarchy(javax.sql.rowset.BaseRowSet.class );\n>```\n\nReference: [https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-21342", "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-21343", "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-21344", "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-21345", "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-21346", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Furthermore, as a good general security practice and possible workaround if using XStream version 1.4.7 and above, we recommend setting up an allow list, as opposed to the default deny list, per the [developer's instructions](https://x-stream.github.io/security.html#framework).\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-21347", "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-21348", "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-21349", "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-21350", "remediation": "\n*Workaround:*\n[https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-21351", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided the following workaround:\n\n>As recommended, use XStream's security framework to implement a whitelist for the allowed types. This is possible since XStream 1.4.7 and it is the default since XStream 1.4.18.\n>\n>Users of XStream 1.4.15 should add these lines and additionally the lines for version 1.4.16 and 1.4.17:\n>```\n>xstream.denyTypes(new String[]{ \"sun.awt.datatransfer.DataTransferer$IndexOrderComparator\", \"com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator\" });\n>xstream.denyTypesByRegExp(new String[]{ \".*\\\\$ServiceNameIterator\", \"(javax|sun.swing)\\\\..*LazyValue\",\"javafx\\\\.collections\\\\.ObservableList\\\\$.*\", \".*\\\\.bcel\\\\..*\\\\.util\\\\.ClassLoader\" });\n>xstream.denyTypeHierarchy(java.io.InputStream.class );\n>xstream.denyTypeHierarchy(java.nio.channels.Channel.class );\n>xstream.denyTypeHierarchy(javax.activation.DataSource.class );\n>xstream.denyTypeHierarchy(javax.sql.rowset.BaseRowSet.class );\n>```\n\nReference: [https://x-stream.github.io/security.html#workaround](https://x-stream.github.io/security.html#workaround)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-43859", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided the following workaround(s):\n\n>If your object graph does not use [the above] referenced elements at all, you may simply set the `NO_REFERENCE` mode:\n>\n>```\n>XStream xstream = new XStream();\n>xstream.setMode(XStream.NO_REFERENCES);\n>```\n>If your object graph contains neither a Hashtable, HashMap nor a HashSet (or one of the linked variants of it) then you can use the security framework to deny the usage of these types:\n>\n>```\n>XStream xstream = new XStream();\n>xstream.denyTypes(new Class[]{\n> java.util.HashMap.class, java.util.HashSet.class, java.util.Hashtable.class, java.util.LinkedHashMap.class, java.util.LinkedHashSet.class\n>});\n>```\n>Unfortunately these types are very common. If you only use `HashMap` or `HashSet` and your XML refers these only as default map or set, you may additionally change the default implementation of `java.util.Map` and `java.util.Set` at unmarshalling time:\n>\n>```\n>xstream.addDefaultImplementation(java.util.TreeMap.class, java.util.Map.class);\n>xstream.addDefaultImplementation(java.util.TreeSet.class, java.util.Set.class);\n>```\n>However, this implies that your application does not care about the implementation of the map and all elements are comparable.\n\nReference: [https://github.com/x-stream/xstream/security/advisories/GHSA-rmr5-cpv2-vgjf](https://github.com/x-stream/xstream/security/advisories/GHSA-rmr5-cpv2-vgjf)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2022-41966", "remediation": "\nA workaround has been provided [here](https://github.com/x-stream/xstream/security/advisories/GHSA-j563-grx4-pjpv).\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2022-24823", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided users with the following workaround:\n\n>Specify your own `java.io.tmpdir` when you start the JVM or use `DefaultHttpDataFactory.setBaseDir(...)` to set the directory to something that is only readable by the current user or update to Java 7 or above.\n\nReference: [https://github.com/netty/netty/security/advisories/GHSA-269q-hmxg-m83q](https://github.com/netty/netty/security/advisories/GHSA-269q-hmxg-m83q)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "sonatype-2016-0397", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. If upgrading is not an option, we recommend disabling the `WRITE_BIGDECIMAL_AS_PLAIN` option.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2022-31163", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. If you are upgrading to a fixed version below 1.0.0, there is still potential a potential Path Traversal vulnerability. To mitigate the risk, the package maintainers recommend ensuring that untrusted files are not placed in a directory on the load path:\n\n>Note that version 0.3.61 can still load arbitrary files from the Ruby load path if their name follows the rules for a valid time zone identifier and the file has a prefix of `tzinfo/definition` within a directory in the load path. For example if `/tmp/upload` was in the load path, then `TZInfo::Timezone.get('foo')` could load a file with path `/tmp/upload/tzinfo/definition/foo.rb`. Applications should ensure that untrusted files are not placed in a directory on the load path.\n\nIn addition, the project provides the following workaround:\n\n>As a workaround, the time zone identifier can be validated before passing to `TZInfo::Timezone.get` by ensuring it matches the regular expression `\\A[A-Za-z0-9+\\-_]+(?:\\/[A-Za-z0-9+\\-_]+)*\\z`.\n\nReference: [https://github.com/tzinfo/tzinfo/security/advisories/GHSA-5cm2-9h8c-rvfx](https://github.com/tzinfo/tzinfo/security/advisories/GHSA-5cm2-9h8c-rvfx)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-28165", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by following the [workaround procedure](https://github.com/eclipse/jetty.project/security/advisories/GHSA-26vr-8j45-3r4w) provided by the project. \n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2021-42392", "remediation": "If upgrading is not a viable solution, the project has provided a workaround to help prevent the exploitation of this vulnerability. \nReference:[https://github.com/h2database/h2database/security/advisories/GHSA-h376-j262-vhq6](https://github.com/h2database/h2database/security/advisories/GHSA-h376-j262-vhq6)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2017-17485", "remediation": "*Update*: As of version 2.10.0, Jackson now provides a safe default typing solution that fully mitigates this vulnerability.\n\nReference: [https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2](https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2)\n\nIn order to mitigate this vulnerability, we recommend upgrading to at least version 2.10.0 and changing any usages of `enableDefaultTyping()` to `activateDefaultTyping()`.\n\nAlternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling default typing.  Instead, you will need to implement your own:\n\n>It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers.\n\nReference: [https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n\nExamples of implementing your own typing can be found by looking at [Spring Security's fix](https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439) or [this Stack Overflow article](https://stackoverflow.com/questions/12353774/how-to-customize-jackson-type-information-mechanism)."}, {"cve": "CVE-2015-0254", "remediation": "\nNote for the fixed version(s):\n```\nThis version uses JAXP's FEATURE_SECURE_PROCESSING to restrict XML processing. Depending on the Java runtime version in use, additional configuration may be required:\nJava8: External entity access is automatically disabled if a SecurityManager is active.\nJava7: JAXP properties may need to be used to disable external access. See http://docs.oracle.com/javase/tutorial/jaxp/properties/properties.html\nJava6 and earlier: A new system property org.apache.taglibs.standard.xml.accessExternalEntity\nmay be used to specify the protocols that can be used to access external entities. This defaults\nto \"all\" if no SecurityManager is present and to \"\" (thereby disabling access) if\na SecurityManager is detected.\n```\nReference: [http://mail-archives.apache.org/mod_mbox/tomcat-taglibs-user/201502.mbox/%3C82207A16-6348-4DEE-877E-F7B87292576A%40apache.org%3E](http://mail-archives.apache.org/mod_mbox/tomcat-taglibs-user/201502.mbox/%3C82207A16-6348-4DEE-877E-F7B87292576A%40apache.org%3E)"}]}