{"TotalAdvisories": 10, "UniqueAdvisories": 10, "Advisories": [{"cve": "sonatype-2016-0282", "description": "AngularJS is vulnerable to Cross-Site Scripting (XSS). The `getTrustedContext()` function in `compile.js` allows malicious links through the `href` attribute of a `Link` element, as this element has no protection from the `$sce` module. An attacker can exploit this vulnerability by crafting input placed in the `href` attribute of a `Link` element to contain malicious script, which leads to Cross-Site Scripting.\n\n**Advisory Deviation Notice:** The Sonatype security research team discovered that the vulnerability is actually fixed in versions 1.6.0-rc.0 and 1.2.30, not just the version range <1.2.30 >=1.0.0 as the advisory states."}, {"cve": "CVE-2019-11358", "description": "The `jquery` package is vulnerable to Prototype Pollution. The `jQuery.extend` and `jQuery.fn.extend` functions defined in many files allow an untrusted object to extend `Object.prototype`. An attacker can modify and add prototype properties to JavaScript objects and can potentially leverage those changes to crash the application or execute remote code.\n\n*Advisory Deviation Notice:* The Sonatype security research team has assessed the CVSS score for this vulnerability to be 7.5 given the nature of prototype pollution and the high impact to data integrity, as opposed to a score of 6.1 reported by [NVD](https://nvd.nist.gov/vuln/detail/CVE-2019-11358)."}, {"cve": "CVE-2019-3795", "description": "The spring-security-core package has a cryptographic weakness. The `getObject` method in `SecureRandomFactoryBean.class` uses a seed to create a cryptographically sensitive value in a reversible manner. An attacker with access to the random material produced by a vulnerable application's seed can exploit this behavior to decrypt values that would not normally be accessible.\n\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that this vulnerability was actually introduced in version 2.0.1 instead of 4.0 as stated in the advisory."}, {"cve": "CVE-2020-5408", "description": "The `spring-security-crypto` package, also known as Spring Security Crypto Module, is vulnerable due to Not Using a Random IV with CBC Mode. The `queryableText` method in `Encryptors.class` which serves as the queryable text encryptor, utilises a fixed null initialization vector with CBC mode, which is not secure. An attacker can exploit this vulnerability via Dictionary Attacks to potentially derive unencrypted values of data encrypted using this method.\n\n*Advisory Deviation Notice:* The Sonatype Security Research team discovered that the fix for this vulnerability was actually introduced in version 6.0.0, by removing the unsafe/deprecated method, instead of 4.2.16, 5.0.16, 5.1.10, 5.2.4, and 5.3.2 as stated in the advisory."}, {"cve": "CVE-2019-17571", "description": "The `log4j:log4j` package is vulnerable to Remote Code Execution (RCE) due to Deserialization of Untrusted Data. The `SocketNode` constructor in `SocketNode.class`, as referenced by the `SocketServer.class`, fails to properly verify if the objects being read from the `ObjectInputStream` belong to a list of classes which  are safe for deserialization. An attacker can exploit this vulnerability to deserialize objects of unsafe types, potentially resulting in Remote Code Execution (RCE).\n\nNOTE: Starting with version(s) 2.x, `log4j:log4j` was relocated to `org.apache.logging.log4j:log4j-core`. A variation of this vulnerability exists in `org.apache.logging.log4j:log4j-core` as CVE-2017-5645, in versions up to but excluding 2.8.2.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability actually impacts the `SocketNode` class being referenced by `SocketServer` class and not the `SocketServer` class itself as indicated in the NVD advisory. "}, {"cve": "CVE-2021-4104", "description": "The `log4j:log4j` package is vulnerable to Deserialization of Untrusted Data. The `lookup()` and `activateOptions()` methods in the `JMSAppender` class allow `JNDI` lookup requests to be made when the `TopicBindingName` and `TopicConnectionFactoryBindingName` specify a trusted host. Lookups made to this host may be used by attackers to request a serialized malicious Java Object that can be deserialized and executed, leading to Remote Code Execution (RCE). \n\nNote that this vulnerability is different from [CVE-2021-44228](https://nvd.nist.gov/vuln/detail/CVE-2021-44228) and requires the attacker to be in control of the third party host that is specified in the configuration, or write access to the Log4j configuration file in order to specify a malicious lookup host directly. This vulnerability also only affects the 1.x.x component of `Log4j` released under the `log4j:log4j` group and artifact IDs.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in all versions of log4j:log4j, not just in the 1.2.x branch as the advisory states. "}, {"cve": "CVE-2018-20676", "description": "The `bootstrap` package is vulnerable to Cross-Site Scripting (XSS). The `Tooltip.prototype.init()` function in the `tooltip.js' file does not properly sanitize values for the `data-viewport` attribute, allowing for scripts/HTML. A remote attacker can exploit this by injecting malicious HTML/JavaScript in the `data-viewport` attribute of a tooltip that would then be executed upon hovering the mouse over the tooltip.\n\n*Advisory Deviation Notice:* The Sonatype security research team has discovered that the vulnerability is present beginning from version 3.2.0 and not all versions before 3.4.0 as the advisory states."}, {"cve": "CVE-2019-8331", "description": "The `bootstrap` package is vulnerable to Cross-Site Scripting (XSS). The `setElementContent` method in the `tooltip.js` file accepts JavaScript within the input parameters without properly sanitizing the data in the elements that are being rendered on the webpage. This could lead to Cross-Site Scripting (XSS).\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in 4.0.0-alpha.2, not in 4.3.0 as the advisory states.\n"}, {"cve": "CVE-2020-36518", "description": "The `jackson-databind` package is vulnerable to a Denial of Service (DoS) attack. The `deserialize()` method in the `UntypedObjectDeserializer` and `UntypedObjectDeserializer$Vanilla` classes fails to restrict recursion when deserializing nested untyped or generic objects. A remote attacker who can supply data to be deserialized by an affected application can exploit this vulnerability to cause the JVM to consume all available memory, resulting in a `StackOverflow` exception and ultimately a DoS condition.\n\n*Advisory Deviation Notice*: The Sonatype security research team has discovered that this vulnerability was fixed in versions 2.13.2.1 and 2.12.6.1 and not 2.13.0 as stated in the advisory."}, {"cve": "CVE-2021-42392", "description": "The `h2` package is vulnerable to Remote Code Execution (RCE). The `getConnection` method in the `JdbcUtils` class performs a context lookup of an unfiltered user supplied url. An attacker with the ability to influence the parameters sent to the aforementioned function can exploit this vulnerability to load a remote malicious class ultimately resulting in Remote Code Execution. \n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that this vulnerability was introduced in version 1.0.57 instead of 1.1.100 as stated in the advisory."}], "TotalWorkarounds": 14, "Workarounds": [{"cve": "sonatype-2015-0057", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. \n\nWorkaround: \n\n>All JSONP requests now require the URL to be trusted as resource URLs. \nThere are two approaches to trust a URL: \n>\n>**Whitelisting with the `$sceDelegateProvider.resourceUrlWhitelist()` \nmethod.** \n>\n>You configure this list in a module configuration block: \n>\n``` \nappModule.config(['$sceDelegateProvider', function($sceDelegateProvider) { \n  $sceDelegateProvider.resourceUrlWhiteList([ \n    // Allow same origin resource loads. \n    'self', \n    // Allow JSONP calls that match this pattern \n    'https://some.dataserver.com/**.jsonp?**` \n  ]); \n}]); \n``` \n>\n>**Explicitly trusting the URL via the `$sce.trustAsResourceUrl(url)` \nmethod** \n>\n>You can pass a trusted object instead of a string as a URL to the `$http` \nservice: \n>\n``` \nvar promise = $http.jsonp($sce.trustAsResourceUrl(url)); \n``` \n \nReference: [https://github.com/angular/angular.js/commit/6476af83cd0418c84e034a955b12a842794385c4#diff-748e0a1e1a7db3458d5f95d59d7e16c9R885](https://github.com/angular/angular.js/commit/6476af83cd0418c84e034a955b12a842794385c4#diff-748e0a1e1a7db3458d5f95d59d7e16c9R885)"}, {"cve": "sonatype-2017-0641", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, it has been suggested that it is possible to mitigate this vulnerability by using antMatchers in the component's configuration. For example: \n\n`.antMatchers(\"/**/login/impersonate**\").hasAuthority(\"ROLE_ADMIN\")`\n\nReference: [https://github.com/spring-projects/spring-security/issues/4249#issuecomment-287070268](https://github.com/spring-projects/spring-security/issues/4249#issuecomment-287070268)"}, {"cve": "CVE-2013-0248", "remediation": "\nChange the configuration of `javax.servlet.context.tempdir` to use a protected directory. Only the application should be able to read/write the temporary files.\nNote: There was no code change in the provided fix. Only the documentation was updated to make users aware of the implications of keeping the default setting using a non-protected directory."}, {"cve": "CVE-2016-3092", "remediation": "\n**Workaround:**\n\n> 1\\. All users of Apache Struts should replace the copy of Commons\n>\n> 2\\. System administrators should restrict the permitted maximum size of HTTP request header values (For example, Apache Httpd provides a LimitRequestFieldSize directive and Apache Tomcat provides a maxHttpHeaderSize attribute in their respective configuration files). A maximum header value size of 2048 bytes would block all dangerous request.\n>\n> Example:\n> File upload requests contain a so-called boundary in the Content-Type header:\n>\n> ```\n> Content-Type: multipart/mixed;\n> boundary=gc0p4Jq0M2Yt08jU534c0p\n> ```\n>\n> The boundary may be chosen by the request sender. In the case of previous versions of Apache Commons Fileupload the boundary becomes dangerous if its size is close to 4096 bytes.\n\nReference: [http://mail-archives.apache.org/mod_mbox/www-announce/201606.mbox/%3C45A20804-ABFF-4FED-A297-69AC95AB9A3F@apache.org%3E](http://mail-archives.apache.org/mod_mbox/www-announce/201606.mbox/%3C45A20804-ABFF-4FED-A297-69AC95AB9A3F@apache.org%3E)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "CVE-2020-11023", "remediation": "\nAlternatively, a workaround is provided by [jQuery](https://github.com/jquery/jquery/security/advisories/GHSA-jpcq-cgw6-v4j6):\n>To workaround this issue without upgrading, use DOMPurify with its `SAFE_FOR_JQUERY` option to sanitize the HTML string before passing it to a jQuery method.\n\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}, {"cve": "sonatype-2015-0002", "remediation": "\nA potential workaround is to remove `commons-collections` from the classpath or to remove the `InvokerTransformer` class from the `common-collections` jar file.\n\nNote: This is not specifically a `commons-collections` issue. Any serializable object that allows reflection (dynamic method invocation) or execution of dangerous functionality will be subject to the same exploit."}, {"cve": "CVE-2022-23305", "remediation": "There is no non-vulnerable upgrade path for `log4j` 1.x. We recommend upgrading to `log4j` 2.x, which introduced a `JDBCAppender` that makes use of prepared statements and parameterization to protect against SQL Injection. Alternatively, this vulnerability can be mitigated in `log4j` 1.x by removing all usages of the `JDBCAppender` from the application's configuration. \n\nReference: [https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y](https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y)"}, {"cve": "CVE-2022-23307", "remediation": "There is no non-vulnerable upgrade path for for `log4j` 1.x. We recommend upgrading to `log4j` 2.x and Apache Chainsaw 2.1.0. Alternatively, do not configure Chainsaw to read serialized log events. Use a different receiver, such as `XMLSocketReceiver`.\n\nReference:\n[https://www.mail-archive.com/announce@apache.org/msg07042.html](https://www.mail-archive.com/announce@apache.org/msg07042.html)\n[https://lists.apache.org/thread/rx0hpjow5csq05r93cyvntj9ry19tm9y](https://lists.apache.org/thread/rx0hpjow5csq05r93cyvntj9ry19tm9y)"}, {"cve": "CVE-2015-0254", "remediation": "\nNote for the fixed version(s):\n```\nThis version uses JAXP's FEATURE_SECURE_PROCESSING to restrict XML processing. Depending on the Java runtime version in use, additional configuration may be required:\nJava8: External entity access is automatically disabled if a SecurityManager is active.\nJava7: JAXP properties may need to be used to disable external access. See http://docs.oracle.com/javase/tutorial/jaxp/properties/properties.html\nJava6 and earlier: A new system property org.apache.taglibs.standard.xml.accessExternalEntity\nmay be used to specify the protocols that can be used to access external entities. This defaults\nto \"all\" if no SecurityManager is present and to \"\" (thereby disabling access) if\na SecurityManager is detected.\n```\nReference: [http://mail-archives.apache.org/mod_mbox/tomcat-taglibs-user/201502.mbox/%3C82207A16-6348-4DEE-877E-F7B87292576A%40apache.org%3E](http://mail-archives.apache.org/mod_mbox/tomcat-taglibs-user/201502.mbox/%3C82207A16-6348-4DEE-877E-F7B87292576A%40apache.org%3E)"}, {"cve": "CVE-2016-5007", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue.  This issue also requires making use of the MvcRequestMatcher functionality introduced in version 4.1.1\n\n> To address these issues comprehensively Spring Security provides URL authorization that can delegate pattern matching to the Spring Framework. To take advantage of this option applications should upgrade to Spring Security 4.1.1+ and Spring Framework 4.3.1+ and use the MvcRequestMatcher.\n\nReference: [https://pivotal.io/security/cve-2016-5007](https://pivotal.io/security/cve-2016-5007)\n\nWorkarounds:\n\n* >Starting with Spring Framework 4.3.0+ the AntPathMatcher is configured with trimTokens set to \"false\" which aligns with Spring Security. Therefore simply using Spring Framework 4.3.0+ can eliminate some causes of path matching inconsistencies.\n* >Users of Spring Framework 3.2.x, 4.0.x, 4.1.x, 4.2.x can use the MVC Java config or the MVC namespace to set trimTokens property of AntPathMatcher to \"false\".\n* >In addition, applications should always complement URL-based authorization with additional authorization at the business layer of the application using one of Spring Security's mechanisms such as adding @Secured annotations.\n\nReference: [https://pivotal.io/security/cve-2016-5007](https://pivotal.io/security/cve-2016-5007)"}, {"cve": "CVE-2014-1904", "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue.  A potential workaround is to ensure every Spring form has a specified action parameter."}, {"cve": "CVE-2015-0254", "remediation": "\nNote for the fixed version(s):\n```\nThis version uses JAXP's FEATURE_SECURE_PROCESSING to restrict XML processing. Depending on the Java runtime version in use, additional configuration may be required:\nJava8: External entity access is automatically disabled if a SecurityManager is active.\nJava7: JAXP properties may need to be used to disable external access. See http://docs.oracle.com/javase/tutorial/jaxp/properties/properties.html\nJava6 and earlier: A new system property org.apache.taglibs.standard.xml.accessExternalEntity\nmay be used to specify the protocols that can be used to access external entities. This defaults\nto \"all\" if no SecurityManager is present and to \"\" (thereby disabling access) if\na SecurityManager is detected.\n```\nReference: [http://mail-archives.apache.org/mod_mbox/tomcat-taglibs-user/201502.mbox/%3C82207A16-6348-4DEE-877E-F7B87292576A%40apache.org%3E](http://mail-archives.apache.org/mod_mbox/tomcat-taglibs-user/201502.mbox/%3C82207A16-6348-4DEE-877E-F7B87292576A%40apache.org%3E)"}, {"cve": "CVE-2017-7525", "remediation": "*Update*: As of version 2.10.0, Jackson now provides a safe default typing solution that fully mitigates this vulnerability.\n\nReference: [https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2](https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2)\n\nIn order to mitigate this vulnerability, we recommend upgrading to at least version 2.10.0 and changing any usages of `enableDefaultTyping()` to `activateDefaultTyping()`.\n\nAlternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling default typing. Instead, you will need to implement your own:\n\n>It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers.\n\nReference: [https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n\nExamples of implementing your own typing can be found by looking at [Spring Security's fix](https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439) or [this Stack Overflow article](https://stackoverflow.com/questions/12353774/how-to-customize-jackson-type-information-mechanism)."}, {"cve": "CVE-2021-42392", "remediation": "If upgrading is not a viable solution, the project has provided a workaround to help prevent the exploitation of this vulnerability. \nReference:[https://github.com/h2database/h2database/security/advisories/GHSA-h376-j262-vhq6](https://github.com/h2database/h2database/security/advisories/GHSA-h376-j262-vhq6)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."}]}