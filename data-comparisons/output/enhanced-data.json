{
    "TotalDescriptions": 276,
    "Descriptions": [
        {
            "displayName": "org.apache.struts : struts2-core : 2.5.10",
            "cve": "CVE-2017-12611",
            "description": "In Apache Struts 2.0.0 through 2.3.33 and 2.5 through 2.5.10.1, using an unintentional expression in a Freemarker tag instead of string literals can lead to a RCE attack."
        },
        {
            "displayName": "org.apache.struts : struts2-core : 2.5.10",
            "cve": "CVE-2017-5638",
            "description": "The Jakarta Multipart parser in Apache Struts 2 2.3.x before 2.3.32 and 2.5.x before 2.5.10.1 has incorrect exception handling and error-message generation during file-upload attempts, which allows remote attackers to execute arbitrary commands via a crafted Content-Type, Content-Disposition, or Content-Length HTTP header, as exploited in the wild in March 2017 with a Content-Type header containing a #cmd= string."
        },
        {
            "displayName": "org.apache.struts : struts2-core : 2.5.10",
            "cve": "CVE-2017-7672",
            "description": "If an application allows enter an URL in a form field and built-in URLValidator is used, it is possible to prepare a special URL which will be used to overload server process when performing validation of the URL. Solution is to upgrade to Apache Struts version 2.5.12."
        },
        {
            "displayName": "org.apache.struts : struts2-core : 2.5.10",
            "cve": "CVE-2017-9804",
            "description": "In Apache Struts 2.3.7 through 2.3.33 and 2.5 through 2.5.12, if an application allows entering a URL in a form field and built-in URLValidator is used, it is possible to prepare a special URL which will be used to overload server process when performing validation of the URL.  NOTE: this vulnerability exists because of an incomplete fix for S2-047 / CVE-2017-7672."
        },
        {
            "displayName": "org.apache.struts : struts2-core : 2.5.10",
            "cve": "CVE-2018-11776",
            "description": "Apache Struts versions 2.3 to 2.3.34 and 2.5 to 2.5.16 suffer from possible Remote Code Execution when alwaysSelectFullNamespace is true (either by user or a plugin like Convention Plugin) and then: results are used with no namespace and in same time, its upper package have no or wildcard namespace and similar to results, same possibility when using url tag which doesn't have value and action set and in same time, its upper package have no or wildcard namespace."
        },
        {
            "displayName": "org.apache.struts : struts2-core : 2.5.10",
            "cve": "CVE-2018-1336",
            "description": "An improper handing of overflow in the UTF-8 decoder with supplementary characters can lead to an infinite loop in the decoder causing a Denial of Service. Versions Affected: Apache Tomcat 9.0.0.M9 to 9.0.7, 8.5.0 to 8.5.30, 8.0.0.RC1 to 8.0.51, and 7.0.28 to 7.0.86."
        },
        {
            "displayName": "org.apache.struts : struts2-core : 2.5.10",
            "cve": "CVE-2019-0230",
            "description": "Apache Struts 2.0.0 to 2.5.20 forced double OGNL evaluation, when evaluated on raw user input in tag attributes, may lead to remote code execution."
        },
        {
            "displayName": "org.apache.struts : struts2-core : 2.5.10",
            "cve": "CVE-2019-0233",
            "description": "An access permission override in Apache Struts 2.0.0 to 2.5.20 may cause a Denial of Service when performing a file upload."
        },
        {
            "displayName": "org.apache.struts : struts2-core : 2.5.10",
            "cve": "CVE-2020-17530",
            "description": "Forced OGNL evaluation, when evaluated on raw user input in tag attributes, may lead to remote code execution. Affected software : Apache Struts 2.0.0 - Struts 2.5.25."
        },
        {
            "displayName": "org.apache.struts : struts2-core : 2.5.10",
            "cve": "CVE-2023-34149",
            "description": "Allocation of Resources Without Limits or Throttling vulnerability in Apache Software Foundation Apache Struts.This issue affects Apache Struts: through 2.5.30, through 6.1.2.\n\nUpgrade to Struts 2.5.31 or 6.1.2.1 or greater.\n\n\n"
        },
        {
            "displayName": "org.apache.struts : struts2-core : 2.5.10",
            "cve": "CVE-2023-34396",
            "description": "Allocation of Resources Without Limits or Throttling vulnerability in Apache Software Foundation Apache Struts.This issue affects Apache Struts: through 2.5.30, through 6.1.2.\n\nUpgrade to Struts 2.5.31 or 6.1.2.1 or greater\n\n\n"
        },
        {
            "displayName": "org.apache.struts : struts2-core : 2.5.10",
            "cve": "CVE-2023-50164",
            "description": "An attacker can manipulate file upload params to enable paths traversal and under some circumstances this can lead to uploading a malicious file which can be used to perform Remote Code Execution.\nUsers are recommended to upgrade to versions Struts 2.5.33 or Struts 6.3.0.2 or greater to\u00a0fix this issue.\n"
        },
        {
            "displayName": "org.eclipse.jetty : jetty-util : 9.4.18.v20190429",
            "cve": "CVE-2023-26048",
            "description": "Jetty is a java based web server and servlet engine. In affected versions servlets with multipart support (e.g. annotated with `@MultipartConfig`) that call `HttpServletRequest.getParameter()` or `HttpServletRequest.getParts()` may cause `OutOfMemoryError` when the client sends a multipart request with a part that has a name but no filename and very large content. This happens even with the default settings of `fileSizeThreshold=0` which should stream the whole part content to disk. An attacker client may send a large multipart request and cause the server to throw `OutOfMemoryError`. However, the server may be able to recover after the `OutOfMemoryError` and continue its service -- although it may take some time. This issue has been patched in versions 9.4.51, 10.0.14, and 11.0.14. Users are advised to upgrade. Users unable to upgrade may set the multipart parameter `maxRequestSize` which must be set to a non-negative value, so the whole multipart content is limited (although still read into memory)."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-proxy : 9.4.18.v20190429",
            "cve": "CVE-2022-2047",
            "description": "In Eclipse Jetty versions 9.4.0 thru 9.4.46, and 10.0.0 thru 10.0.9, and 11.0.0 thru 11.0.9 versions, the parsing of the authority segment of an http scheme URI, the Jetty HttpURI class improperly detects an invalid input as a hostname. This can lead to failures in a Proxy scenario."
        },
        {
            "displayName": "hsqldb : hsqldb : 1.8.0.7",
            "cve": "CVE-2007-4575",
            "description": "HSQLDB before 1.8.0.9, as used in OpenOffice.org (OOo) 2 before 2.3.1, allows user-assisted remote attackers to execute arbitrary Java code via crafted database documents, related to \"exposing static java methods.\""
        },
        {
            "displayName": "commons-fileupload : commons-fileupload : 1.2.1",
            "cve": "CVE-2013-0248",
            "description": "The default configuration of javax.servlet.context.tempdir in Apache Commons FileUpload 1.0 through 1.2.2 uses the /tmp directory for uploaded files, which allows local users to overwrite arbitrary files via an unspecified symlink attack."
        },
        {
            "displayName": "commons-fileupload : commons-fileupload : 1.2.1",
            "cve": "CVE-2013-2186",
            "description": "The DiskFileItem class in Apache Commons FileUpload, as used in Red Hat JBoss BRMS 5.3.1; JBoss Portal 4.3 CP07, 5.2.2, and 6.0.0; and Red Hat JBoss Web Server 1.0.2 allows remote attackers to write to arbitrary files via a NULL byte in a file name in a serialized instance."
        },
        {
            "displayName": "commons-fileupload : commons-fileupload : 1.2.1",
            "cve": "CVE-2014-0050",
            "description": "MultipartStream.java in Apache Commons FileUpload before 1.3.1, as used in Apache Tomcat, JBoss Web, and other products, allows remote attackers to cause a denial of service (infinite loop and CPU consumption) via a crafted Content-Type header that bypasses a loop's intended exit conditions."
        },
        {
            "displayName": "commons-fileupload : commons-fileupload : 1.2.1",
            "cve": "CVE-2016-1000031",
            "description": "Apache Commons FileUpload before 1.3.3 DiskFileItem File Manipulation Remote Code Execution"
        },
        {
            "displayName": "commons-fileupload : commons-fileupload : 1.2.1",
            "cve": "CVE-2016-3092",
            "description": "The MultipartStream class in Apache Commons Fileupload before 1.3.2, as used in Apache Tomcat 7.x before 7.0.70, 8.x before 8.0.36, 8.5.x before 8.5.3, and 9.x before 9.0.0.M7 and other products, allows remote attackers to cause a denial of service (CPU consumption) via a long boundary string."
        },
        {
            "displayName": "commons-fileupload : commons-fileupload : 1.2.1",
            "cve": "CVE-2023-24998",
            "description": "Apache Commons FileUpload before 1.5 does not limit the number of request parts to be processed resulting in the possibility of an attacker triggering a DoS with a malicious upload or series of uploads.\n\n\n\n\nNote that, like all of the file upload limits, the\n          new configuration option (FileUploadBase#setFileCountMax) is not\n          enabled by default and must be explicitly configured.\n\n\n"
        },
        {
            "displayName": "jquery 3.1.1",
            "cve": "CVE-2019-11358",
            "description": "jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution. If an unsanitized source object contained an enumerable __proto__ property, it could extend the native Object.prototype."
        },
        {
            "displayName": "jquery 3.1.1",
            "cve": "CVE-2020-11023",
            "description": "In jQuery versions greater than or equal to 1.0.3 and before 3.5.0, passing HTML containing <option> elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. This problem is patched in jQuery 3.5.0."
        },
        {
            "displayName": "jquery 3.1.1",
            "cve": "CVE-2020-23064",
            "description": "Rejected reason: DO NOT USE THIS CANDIDATE NUMBER. ConsultIDs: CVE-2020-11023. Reason: This candidate is a duplicate of CVE-2020-11023. Notes: All CVE users should reference CVE-2020-11023 instead of this candidate. All references and descriptions in this candidate have been removed to prevent accidental usage."
        },
        {
            "displayName": "software.amazon.ion : ion-java : 1.5.1",
            "cve": "CVE-2024-21634",
            "description": "Amazon Ion is a Java implementation of the Ion data notation. Prior to version 1.10.5, a potential denial-of-service issue exists in\u00a0`ion-java`\u00a0for applications that use\u00a0`ion-java`\u00a0to deserialize Ion text encoded data, or deserialize Ion text or binary encoded data into the\u00a0`IonValue`\u00a0model and then invoke certain\u00a0`IonValue`\u00a0methods on that in-memory representation. An actor could craft Ion data that, when loaded by the affected application and/or processed using the\u00a0`IonValue`\u00a0model, results in a\u00a0`StackOverflowError`\u00a0originating from the\u00a0`ion-java`\u00a0library. The patch is included in `ion-java` 1.10.5. As a workaround, do not load data which originated from an untrusted source or that could have been tampered with."
        },
        {
            "displayName": "com.google.guava : guava : 19.0",
            "cve": "CVE-2018-10237",
            "description": "Unbounded memory allocation in Google Guava 11.0 through 24.x before 24.1.1 allows remote attackers to conduct denial of service attacks against servers that depend on this library and deserialize attacker-provided data, because the AtomicDoubleArray class (when serialized with Java serialization) and the CompoundOrdering class (when serialized with GWT serialization) perform eager allocation without appropriate checks on what a client has sent and whether the data size is reasonable."
        },
        {
            "displayName": "com.google.guava : guava : 19.0",
            "cve": "CVE-2023-2976",
            "description": "Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class.\n\nEven though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.\n\n"
        },
        {
            "displayName": "requests (py2.py3-none-any) 2.11.1 (.whl)",
            "cve": "CVE-2018-18074",
            "description": "The Requests package before 2.20.0 for Python sends an HTTP Authorization header to an http URI upon receiving a same-hostname https-to-http redirect, which makes it easier for remote attackers to discover credentials by sniffing the network."
        },
        {
            "displayName": "requests (py2.py3-none-any) 2.11.1 (.whl)",
            "cve": "CVE-2018-20060",
            "description": "urllib3 before version 1.23 does not remove the Authorization HTTP header when following a cross-origin redirect (i.e., a redirect that differs in host, port, or scheme). This can allow for credentials in the Authorization header to be exposed to unintended hosts or transmitted in cleartext."
        },
        {
            "displayName": "requests (py2.py3-none-any) 2.11.1 (.whl)",
            "cve": "CVE-2019-11236",
            "description": "In the urllib3 library through 1.24.1 for Python, CRLF injection is possible if the attacker controls the request parameter."
        },
        {
            "displayName": "requests (py2.py3-none-any) 2.11.1 (.whl)",
            "cve": "CVE-2019-9740",
            "description": "An issue was discovered in urllib2 in Python 2.x through 2.7.16 and urllib in Python 3.x through 3.7.3. CRLF injection is possible if the attacker controls a url parameter, as demonstrated by the first argument to urllib.request.urlopen with \\r\\n (specifically in the query string after a ? character) followed by an HTTP header or a Redis command. This is fixed in: v2.7.17, v2.7.17rc1, v2.7.18, v2.7.18rc1; v3.5.10, v3.5.10rc1, v3.5.8, v3.5.8rc1, v3.5.8rc2, v3.5.9; v3.6.10, v3.6.10rc1, v3.6.11, v3.6.11rc1, v3.6.12, v3.6.9, v3.6.9rc1; v3.7.4, v3.7.4rc1, v3.7.4rc2, v3.7.5, v3.7.5rc1, v3.7.6, v3.7.6rc1, v3.7.7, v3.7.7rc1, v3.7.8, v3.7.8rc1, v3.7.9."
        },
        {
            "displayName": "numpy 1.26.4 (.tar.gz)",
            "cve": "CVE-2018-1999024",
            "description": "MathJax version prior to version 2.7.4 contains a Cross Site Scripting (XSS) vulnerability in the \\unicode{} macro that can result in Potentially untrusted Javascript running within a web browser. This attack appear to be exploitable via The victim must view a page where untrusted content is processed using Mathjax. This vulnerability appears to have been fixed in 2.7.4 and later."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2014-8090",
            "description": "The REXML parser in Ruby 1.9.x before 1.9.3 patchlevel 551, 2.0.x before 2.0.0 patchlevel 598, and 2.1.x before 2.1.5 allows remote attackers to cause a denial of service (CPU and memory consumption) a crafted XML document containing an empty string in an entity that is used in a large number of nested entity references, aka an XML Entity Expansion (XEE) attack.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-1821 and CVE-2014-8080."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2017-18640",
            "description": "The Alias feature in SnakeYAML before 1.26 allows entity expansion during a load operation, a related issue to CVE-2003-1564."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2018-1000180",
            "description": "Bouncy Castle BC 1.54 - 1.59, BC-FJA 1.0.0, BC-FJA 1.0.1 and earlier have a flaw in the Low-level interface to RSA key pair generator, specifically RSA Key Pairs generated in low-level API with added certainty may have less M-R tests than expected. This appears to be fixed in versions BC 1.60 beta 4 and later, BC-FJA 1.0.2 and later."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2019-11358",
            "description": "jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution. If an unsanitized source object contained an enumerable __proto__ property, it could extend the native Object.prototype."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2019-8321",
            "description": "An issue was discovered in RubyGems 2.6 and later through 3.0.2. Since Gem::UserInteraction#verbose calls say without escaping, escape sequence injection is possible."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2019-8323",
            "description": "An issue was discovered in RubyGems 2.6 and later through 3.0.2. Gem::GemcutterUtilities#with_response may output the API response to stdout as it is. Therefore, if the API side modifies the response, escape sequence injection may occur."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2019-8324",
            "description": "An issue was discovered in RubyGems 2.6 and later through 3.0.2. A crafted gem with a multi-line name is not handled correctly. Therefore, an attacker could inject arbitrary code to the stub line of gemspec, which is eval-ed by code in ensure_loadable_spec during the preinstall check."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2019-8325",
            "description": "An issue was discovered in RubyGems 2.6 and later through 3.0.2. Since Gem::CommandManager#run calls alert_error without escaping, escape sequence injection is possible. (There are many ways to cause an error.)"
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2020-0187",
            "description": "In engineSetMode of BaseBlockCipher.java, there is a possible incorrect cryptographic algorithm chosen due to an incomplete comparison. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10Android ID: A-148517383"
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2020-11023",
            "description": "In jQuery versions greater than or equal to 1.0.3 and before 3.5.0, passing HTML containing <option> elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. This problem is patched in jQuery 3.5.0."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2020-15522",
            "description": "Bouncy Castle BC Java before 1.66, BC C# .NET before 1.8.7, BC-FJA before 1.0.1.2, 1.0.2.1, and BC-FNA before 1.0.1.1 have a timing issue within the EC math library that can expose information about the private key when an attacker is able to observe timing information for the generation of multiple deterministic ECDSA signatures."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2020-26939",
            "description": "In Legion of the Bouncy Castle BC before 1.61 and BC-FJA before 1.0.1.2, attackers can obtain sensitive information about a private exponent because of Observable Differences in Behavior to Error Inputs. This occurs in org.bouncycastle.crypto.encodings.OAEPEncoding. Sending invalid ciphertext that decrypts to a short payload in the OAEP Decoder could result in the throwing of an early exception, potentially leaking some information about the private exponent of the RSA private key performing the encryption."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2020-7656",
            "description": "jquery prior to 1.9.0 allows Cross-site Scripting attacks via the load method. The load method fails to recognize and remove \"<script>\" HTML tags that contain a whitespace character, i.e: \"</script >\", which results in the enclosed script logic to be executed."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2020-8130",
            "description": "There is an OS command injection vulnerability in Ruby Rake < 12.3.3 in Rake::FileList when supplying a filename that begins with the pipe character `|`."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2021-31799",
            "description": "In RDoc 3.11 through 6.x before 6.3.1, as distributed with Ruby through 3.0.1, it is possible to execute arbitrary code via | and tags in a filename."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2022-1471",
            "description": "SnakeYaml's Constructor() class does not restrict types which can be instantiated during deserialization.\u00a0Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml's SafeConsturctor when parsing untrusted content to restrict deserialization. We recommend upgrading to version 2.0 and beyond.\n"
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2022-25857",
            "description": "The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2022-38749",
            "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2022-38750",
            "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2022-38751",
            "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2022-38752",
            "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2022-41854",
            "description": "Those using Snakeyaml to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2023-33201",
            "description": "Bouncy Castle For Java before 1.74 is affected by an LDAP injection vulnerability. The vulnerability only affects applications that use an LDAP CertStore from Bouncy Castle to validate X.509 certificates. During the certificate validation process, Bouncy Castle inserts the certificate's Subject Name into an LDAP search filter without any escaping, which leads to an LDAP injection vulnerability."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2023-33202",
            "description": "Bouncy Castle for Java before 1.73 contains a potential Denial of Service (DoS) issue within the Bouncy Castle org.bouncycastle.openssl.PEMParser class. This class parses OpenSSL PEM encoded streams containing X.509 certificates, PKCS8 encoded keys, and PKCS7 objects. Parsing a file that has crafted ASN.1 data through the PEMParser causes an OutOfMemoryError, which can enable a denial of service attack. (For users of the FIPS Java API: BC-FJA 1.0.2.3 and earlier are affected; BC-FJA 1.0.2.4 is fixed.)"
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2024-27281",
            "description": "An issue was discovered in RDoc 6.3.3 through 6.6.2, as distributed in Ruby 3.x through 3.3.0. When parsing .rdoc_options (used for configuration in RDoc) as a YAML file, object injection and resultant remote code execution are possible because there are no restrictions on the classes that can be restored. (When loading the documentation cache, object injection and resultant remote code execution are also possible if there were a crafted cache.) The main fixed version is 6.6.3.1. For Ruby 3.0 users, a fixed version is rdoc 6.3.4.1. For Ruby 3.1 users, a fixed version is rdoc 6.4.1.1. For Ruby 3.2 users, a fixed version is rdoc 6.5.1.1."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2024-29857",
            "description": "An issue was discovered in ECCurve.java and ECCurve.cs in Bouncy Castle Java (BC Java) before 1.78, BC Java LTS before 2.73.6, BC-FJA before 1.0.2.5, and BC C# .Net before 2.3.1. Importing an EC certificate with crafted F2m parameters can lead to excessive CPU consumption during the evaluation of the curve parameters."
        },
        {
            "displayName": "org.jruby : jruby-complete : 9.1.17.0",
            "cve": "CVE-2024-30171",
            "description": "An issue was discovered in Bouncy Castle Java TLS API and JSSE Provider before 1.78. Timing-based leakage may occur in RSA based handshakes because of exception processing."
        },
        {
            "displayName": "aiohttp 2.1.0 (.tar.gz)",
            "cve": "CVE-2021-21330",
            "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. In aiohttp before version 3.7.4 there is an open redirect vulnerability. A maliciously crafted link to an aiohttp-based web-server could redirect the browser to a different website. It is caused by a bug in the `aiohttp.web_middlewares.normalize_path_middleware` middleware. This security problem has been fixed in 3.7.4. Upgrade your dependency using pip as follows \"pip install aiohttp >= 3.7.4\". If upgrading is not an option for you, a workaround can be to avoid using `aiohttp.web_middlewares.normalize_path_middleware` in your applications."
        },
        {
            "displayName": "aiohttp 2.1.0 (.tar.gz)",
            "cve": "CVE-2023-47627",
            "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. The HTTP parser in AIOHTTP has numerous problems with header parsing, which could lead to request smuggling. This parser is only used when AIOHTTP_NO_EXTENSIONS is enabled (or not using a prebuilt wheel). These bugs have been addressed in commit `d5c12ba89` which has been included in release version 3.8.6. Users are advised to upgrade. There are no known workarounds for these issues."
        },
        {
            "displayName": "aiohttp 2.1.0 (.tar.gz)",
            "cve": "CVE-2023-47641",
            "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Affected versions of aiohttp have a security vulnerability regarding the inconsistent interpretation of the http protocol. HTTP/1.1 is a persistent protocol, if both Content-Length(CL) and Transfer-Encoding(TE) header values are present it can lead to incorrect interpretation of two entities that parse the HTTP and we can poison other sockets with this incorrect interpretation. A possible Proof-of-Concept (POC) would be a configuration with a reverse proxy(frontend) that accepts both CL and TE headers and aiohttp as backend. As aiohttp parses anything with chunked, we can pass a chunked123 as TE, the frontend entity will ignore this header and will parse Content-Length. The impact of this vulnerability is that it is possible to bypass any proxy rule, poisoning sockets to other users like passing Authentication Headers, also if it is present an Open Redirect an attacker could combine it to redirect random users to another website and log the request. This vulnerability has been addressed in release 3.8.0 of aiohttp. Users are advised to upgrade. There are no known workarounds for this vulnerability."
        },
        {
            "displayName": "aiohttp 2.1.0 (.tar.gz)",
            "cve": "CVE-2023-49081",
            "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Improper validation made it possible for an attacker to modify the HTTP request (e.g. to insert a new header) or create a new HTTP request if the attacker controls the HTTP version. The vulnerability only occurs if the attacker can control the HTTP version of the request. This issue has been patched in version 3.9.0."
        },
        {
            "displayName": "aiohttp 2.1.0 (.tar.gz)",
            "cve": "CVE-2023-49082",
            "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Improper validation makes it possible for an attacker to modify the HTTP request (e.g. insert a new header) or even create a new HTTP request if the attacker controls the HTTP method. The vulnerability occurs only if the attacker can control the HTTP method (GET, POST etc.) of the request. If the attacker can control the HTTP version of the request it will be able to modify the request (request smuggling). This issue has been patched in version 3.9.0."
        },
        {
            "displayName": "aiohttp 2.1.0 (.tar.gz)",
            "cve": "CVE-2024-23334",
            "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. When using aiohttp as a web server and configuring static routes, it is necessary to specify the root path for static files. Additionally, the option 'follow_symlinks' can be used to determine whether to follow symbolic links outside the static root directory. When 'follow_symlinks' is set to True, there is no validation to check if reading a file is within the root directory. This can lead to directory traversal vulnerabilities, resulting in unauthorized access to arbitrary files on the system, even when symlinks are not present.  Disabling follow_symlinks and using a reverse proxy are encouraged mitigations.  Version 3.9.2 fixes this issue."
        },
        {
            "displayName": "aiohttp 2.1.0 (.tar.gz)",
            "cve": "CVE-2024-27306",
            "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. A XSS vulnerability exists on index pages for static file handling. This vulnerability is fixed in 3.9.4. We have always recommended using a reverse proxy server (e.g. nginx) for serving static files. Users following the recommendation are unaffected. Other users can disable `show_index` if unable to upgrade."
        },
        {
            "displayName": "aiohttp 2.1.0 (.tar.gz)",
            "cve": "CVE-2024-30251",
            "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. In affected versions an attacker can send a specially crafted POST (multipart/form-data) request. When the aiohttp server processes it, the server will enter an infinite loop and be unable to process any further requests. An attacker can stop the application from serving requests after sending a single request. This issue has been addressed in version 3.9.4. Users are advised to upgrade. Users unable to upgrade may manually apply a patch to their systems. Please see the linked GHSA for instructions."
        },
        {
            "displayName": "aiohttp 2.1.0 (.tar.gz)",
            "cve": "CVE-2024-42367",
            "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Prior to version 3.10.2, static routes which contain files with compressed variants (`.gz` or `.br` extension) are vulnerable to path traversal outside the root directory if those variants are symbolic links. The server protects static routes from path traversal outside the root directory when `follow_symlinks=False` (default).  It does this by resolving the requested URL to an absolute path and then checking that path relative to the root. However, these checks are not performed when looking for compressed variants in the `FileResponse` class, and symbolic links are then automatically followed when performing the `Path.stat()` and `Path.open()` to send the file. Version 3.10.2 contains a patch for the issue."
        },
        {
            "displayName": "aiohttp 2.1.0 (.tar.gz)",
            "cve": "CVE-2024-52304",
            "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Prior to version 3.10.11, the Python parser parses newlines in chunk extensions incorrectly which can lead to request smuggling vulnerabilities under certain conditions. If a pure Python version of aiohttp is installed (i.e. without the usual C extensions) or `AIOHTTP_NO_EXTENSIONS` is enabled, then an attacker may be able to execute a request smuggling attack to bypass certain firewalls or proxy protections. Version 3.10.11 fixes the issue."
        },
        {
            "displayName": "org.jetbrains.kotlin : kotlin-stdlib : 1.3.72",
            "cve": "CVE-2022-24329",
            "description": "In JetBrains Kotlin before 1.6.0, it was not possible to lock dependencies for Multiplatform Gradle Projects."
        },
        {
            "displayName": "mathjax 2.7.1",
            "cve": "CVE-2018-1999024",
            "description": "MathJax version prior to version 2.7.4 contains a Cross Site Scripting (XSS) vulnerability in the \\unicode{} macro that can result in Potentially untrusted Javascript running within a web browser. This attack appear to be exploitable via The victim must view a page where untrusted content is processed using Mathjax. This vulnerability appears to have been fixed in 2.7.4 and later."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-io : 9.4.18.v20190429",
            "cve": "CVE-2021-28165",
            "description": "In Eclipse Jetty 7.2.2 to 9.4.38, 10.0.0.alpha0 to 10.0.1, and 11.0.0.alpha0 to 11.0.1, CPU usage can reach 100% upon receiving a large invalid TLS frame."
        },
        {
            "displayName": "com.amazon.ion : ion-java : 1.8.2",
            "cve": "CVE-2024-21634",
            "description": "Amazon Ion is a Java implementation of the Ion data notation. Prior to version 1.10.5, a potential denial-of-service issue exists in\u00a0`ion-java`\u00a0for applications that use\u00a0`ion-java`\u00a0to deserialize Ion text encoded data, or deserialize Ion text or binary encoded data into the\u00a0`IonValue`\u00a0model and then invoke certain\u00a0`IonValue`\u00a0methods on that in-memory representation. An actor could craft Ion data that, when loaded by the affected application and/or processed using the\u00a0`IonValue`\u00a0model, results in a\u00a0`StackOverflowError`\u00a0originating from the\u00a0`ion-java`\u00a0library. The patch is included in `ion-java` 1.10.5. As a workaround, do not load data which originated from an untrusted source or that could have been tampered with."
        },
        {
            "displayName": "jQuery 1.6.4",
            "cve": "CVE-2019-11358",
            "description": "jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution. If an unsanitized source object contained an enumerable __proto__ property, it could extend the native Object.prototype."
        },
        {
            "displayName": "jQuery 1.6.4",
            "cve": "CVE-2020-11023",
            "description": "In jQuery versions greater than or equal to 1.0.3 and before 3.5.0, passing HTML containing <option> elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. This problem is patched in jQuery 3.5.0."
        },
        {
            "displayName": "jQuery 1.6.4",
            "cve": "CVE-2020-7656",
            "description": "jquery prior to 1.9.0 allows Cross-site Scripting attacks via the load method. The load method fails to recognize and remove \"<script>\" HTML tags that contain a whitespace character, i.e: \"</script >\", which results in the enclosed script logic to be executed."
        },
        {
            "displayName": "org.slf4j : slf4j-ext : 1.7.10",
            "cve": "CVE-2018-8088",
            "description": "org.slf4j.ext.EventData in the slf4j-ext module in QOS.CH SLF4J before 1.8.0-beta2 allows remote attackers to bypass intended access restrictions via crafted data. EventData in the slf4j-ext module in QOS.CH SLF4J, has been fixed in SLF4J versions 1.7.26 later and in the 2.0.x series."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-webapp : 9.4.18.v20190429",
            "cve": "CVE-2020-27216",
            "description": "In Eclipse Jetty versions 1.0 thru 9.4.32.v20200930, 10.0.0.alpha1 thru 10.0.0.beta2, and 11.0.0.alpha1 thru 11.0.0.beta2O, on Unix like systems, the system's temporary directory is shared between all users on that system. A collocated user can observe the process of creating a temporary sub directory in the shared temporary directory and race to complete the creation of the temporary subdirectory. If the attacker wins the race then they will have read and write permission to the subdirectory used to unpack web applications, including their WEB-INF/lib jar files and JSP files. If any code is ever executed out of this temporary directory, this can lead to a local privilege escalation vulnerability."
        },
        {
            "displayName": "org.bouncycastle : bcprov-jdk15on : 1.56",
            "cve": "CVE-2018-1000180",
            "description": "Bouncy Castle BC 1.54 - 1.59, BC-FJA 1.0.0, BC-FJA 1.0.1 and earlier have a flaw in the Low-level interface to RSA key pair generator, specifically RSA Key Pairs generated in low-level API with added certainty may have less M-R tests than expected. This appears to be fixed in versions BC 1.60 beta 4 and later, BC-FJA 1.0.2 and later."
        },
        {
            "displayName": "org.bouncycastle : bcprov-jdk15on : 1.56",
            "cve": "CVE-2020-0187",
            "description": "In engineSetMode of BaseBlockCipher.java, there is a possible incorrect cryptographic algorithm chosen due to an incomplete comparison. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10Android ID: A-148517383"
        },
        {
            "displayName": "org.bouncycastle : bcprov-jdk15on : 1.56",
            "cve": "CVE-2020-15522",
            "description": "Bouncy Castle BC Java before 1.66, BC C# .NET before 1.8.7, BC-FJA before 1.0.1.2, 1.0.2.1, and BC-FNA before 1.0.1.1 have a timing issue within the EC math library that can expose information about the private key when an attacker is able to observe timing information for the generation of multiple deterministic ECDSA signatures."
        },
        {
            "displayName": "org.bouncycastle : bcprov-jdk15on : 1.56",
            "cve": "CVE-2020-26939",
            "description": "In Legion of the Bouncy Castle BC before 1.61 and BC-FJA before 1.0.1.2, attackers can obtain sensitive information about a private exponent because of Observable Differences in Behavior to Error Inputs. This occurs in org.bouncycastle.crypto.encodings.OAEPEncoding. Sending invalid ciphertext that decrypts to a short payload in the OAEP Decoder could result in the throwing of an early exception, potentially leaking some information about the private exponent of the RSA private key performing the encryption."
        },
        {
            "displayName": "org.bouncycastle : bcprov-jdk15on : 1.56",
            "cve": "CVE-2023-33201",
            "description": "Bouncy Castle For Java before 1.74 is affected by an LDAP injection vulnerability. The vulnerability only affects applications that use an LDAP CertStore from Bouncy Castle to validate X.509 certificates. During the certificate validation process, Bouncy Castle inserts the certificate's Subject Name into an LDAP search filter without any escaping, which leads to an LDAP injection vulnerability."
        },
        {
            "displayName": "org.bouncycastle : bcprov-jdk15on : 1.56",
            "cve": "CVE-2023-33202",
            "description": "Bouncy Castle for Java before 1.73 contains a potential Denial of Service (DoS) issue within the Bouncy Castle org.bouncycastle.openssl.PEMParser class. This class parses OpenSSL PEM encoded streams containing X.509 certificates, PKCS8 encoded keys, and PKCS7 objects. Parsing a file that has crafted ASN.1 data through the PEMParser causes an OutOfMemoryError, which can enable a denial of service attack. (For users of the FIPS Java API: BC-FJA 1.0.2.3 and earlier are affected; BC-FJA 1.0.2.4 is fixed.)"
        },
        {
            "displayName": "org.bouncycastle : bcprov-jdk15on : 1.56",
            "cve": "CVE-2024-29857",
            "description": "An issue was discovered in ECCurve.java and ECCurve.cs in Bouncy Castle Java (BC Java) before 1.78, BC Java LTS before 2.73.6, BC-FJA before 1.0.2.5, and BC C# .Net before 2.3.1. Importing an EC certificate with crafted F2m parameters can lead to excessive CPU consumption during the evaluation of the curve parameters."
        },
        {
            "displayName": "org.bouncycastle : bcprov-jdk15on : 1.56",
            "cve": "CVE-2024-30171",
            "description": "An issue was discovered in Bouncy Castle Java TLS API and JSSE Provider before 1.78. Timing-based leakage may occur in RSA based handshakes because of exception processing."
        },
        {
            "displayName": "pandas (cp313-cp313-macosx_11_0_arm64) 2.2.3 (.whl)",
            "cve": "CVE-2020-13091",
            "description": "pandas through 1.0.3 can unserialize and execute commands from an untrusted file that is passed to the read_pickle() function, if __reduce__ makes an os.system call. NOTE: third parties dispute this issue because the read_pickle() function is documented as unsafe and it is the user's responsibility to use the function in a secure manner"
        },
        {
            "displayName": "pandas (cp313-cp313-macosx_11_0_arm64) 2.2.3 (.whl)",
            "cve": "CVE-2024-9880",
            "description": "pandas - Code Injection"
        },
        {
            "displayName": "org.eclipse.jetty : jetty-server : 9.4.18.v20190429",
            "cve": "CVE-2020-27218",
            "description": "In Eclipse Jetty version 9.4.0.RC0 to 9.4.34.v20201102, 10.0.0.alpha0 to 10.0.0.beta2, and 11.0.0.alpha0 to 11.0.0.beta2, if GZIP request body inflation is enabled and requests from different clients are multiplexed onto a single connection, and if an attacker can send a request with a body that is received entirely but not consumed by the application, then a subsequent request on the same connection will see that body prepended to its body. The attacker will not see any data but may inject data into the body of the subsequent request."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-server : 9.4.18.v20190429",
            "cve": "CVE-2021-34428",
            "description": "For Eclipse Jetty versions <= 9.4.40, <= 10.0.2, <= 11.0.2, if an exception is thrown from the SessionListener#sessionDestroyed() method, then the session ID is not invalidated in the session ID manager. On deployments with clustered sessions and multiple contexts this can result in a session not being invalidated. This can result in an application used on a shared computer being left logged in."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-server : 9.4.18.v20190429",
            "cve": "CVE-2022-2047",
            "description": "In Eclipse Jetty versions 9.4.0 thru 9.4.46, and 10.0.0 thru 10.0.9, and 11.0.0 thru 11.0.9 versions, the parsing of the authority segment of an http scheme URI, the Jetty HttpURI class improperly detects an invalid input as a hostname. This can lead to failures in a Proxy scenario."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-server : 9.4.18.v20190429",
            "cve": "CVE-2023-26048",
            "description": "Jetty is a java based web server and servlet engine. In affected versions servlets with multipart support (e.g. annotated with `@MultipartConfig`) that call `HttpServletRequest.getParameter()` or `HttpServletRequest.getParts()` may cause `OutOfMemoryError` when the client sends a multipart request with a part that has a name but no filename and very large content. This happens even with the default settings of `fileSizeThreshold=0` which should stream the whole part content to disk. An attacker client may send a large multipart request and cause the server to throw `OutOfMemoryError`. However, the server may be able to recover after the `OutOfMemoryError` and continue its service -- although it may take some time. This issue has been patched in versions 9.4.51, 10.0.14, and 11.0.14. Users are advised to upgrade. Users unable to upgrade may set the multipart parameter `maxRequestSize` which must be set to a non-negative value, so the whole multipart content is limited (although still read into memory)."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-server : 9.4.18.v20190429",
            "cve": "CVE-2023-26049",
            "description": "Jetty is a java based web server and servlet engine. Nonstandard cookie parsing in Jetty may allow an attacker to smuggle cookies within other cookies, or otherwise perform unintended behavior by tampering with the cookie parsing mechanism. If Jetty sees a cookie VALUE that starts with `\"` (double quote), it will continue to read the cookie string until it sees a closing quote -- even if a semicolon is encountered. So, a cookie header such as: `DISPLAY_LANGUAGE=\"b; JSESSIONID=1337; c=d\"` will be parsed as one cookie, with the name DISPLAY_LANGUAGE and a value of b; JSESSIONID=1337; c=d instead of 3 separate cookies. This has security implications because if, say, JSESSIONID is an HttpOnly cookie, and the DISPLAY_LANGUAGE cookie value is rendered on the page, an attacker can smuggle the JSESSIONID cookie into the DISPLAY_LANGUAGE cookie and thereby exfiltrate it. This is significant when an intermediary is enacting some policy based on cookies, so a smuggled cookie can bypass that policy yet still be seen by the Jetty server or its logging system. This issue has been addressed in versions 9.4.51, 10.0.14, 11.0.14, and 12.0.0.beta0 and users are advised to upgrade. There are no known workarounds for this issue."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-server : 9.4.18.v20190429",
            "cve": "CVE-2024-8184",
            "description": "There exists a security vulnerability in Jetty's ThreadLimitHandler.getRemote() which can be exploited by unauthorized users to cause remote denial-of-service (DoS) attack.  By repeatedly sending crafted requests, attackers can trigger OutofMemory errors and exhaust the server's memory."
        },
        {
            "displayName": "org.apache.logging.log4j : log4j-core : 2.15.0",
            "cve": "CVE-2021-44832",
            "description": "Apache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4) are vulnerable to a remote code execution (RCE) attack when a configuration uses a JDBC Appender with a JNDI LDAP data source URI when an attacker has control of the target LDAP server. This issue is fixed by limiting JNDI data source names to the java protocol in Log4j2 versions 2.17.1, 2.12.4, and 2.3.2."
        },
        {
            "displayName": "org.apache.logging.log4j : log4j-core : 2.15.0",
            "cve": "CVE-2021-45046",
            "description": "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default."
        },
        {
            "displayName": "org.apache.logging.log4j : log4j-core : 2.15.0",
            "cve": "CVE-2021-45105",
            "description": "Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3 and 2.3.1) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0, 2.12.3, and 2.3.1."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2014-8090",
            "description": "The REXML parser in Ruby 1.9.x before 1.9.3 patchlevel 551, 2.0.x before 2.0.0 patchlevel 598, and 2.1.x before 2.1.5 allows remote attackers to cause a denial of service (CPU and memory consumption) a crafted XML document containing an empty string in an entity that is used in a large number of nested entity references, aka an XML Entity Expansion (XEE) attack.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-1821 and CVE-2014-8080."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2017-18640",
            "description": "The Alias feature in SnakeYAML before 1.26 allows entity expansion during a load operation, a related issue to CVE-2003-1564."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2018-1000180",
            "description": "Bouncy Castle BC 1.54 - 1.59, BC-FJA 1.0.0, BC-FJA 1.0.1 and earlier have a flaw in the Low-level interface to RSA key pair generator, specifically RSA Key Pairs generated in low-level API with added certainty may have less M-R tests than expected. This appears to be fixed in versions BC 1.60 beta 4 and later, BC-FJA 1.0.2 and later."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2019-11358",
            "description": "jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution. If an unsanitized source object contained an enumerable __proto__ property, it could extend the native Object.prototype."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2019-8321",
            "description": "An issue was discovered in RubyGems 2.6 and later through 3.0.2. Since Gem::UserInteraction#verbose calls say without escaping, escape sequence injection is possible."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2019-8323",
            "description": "An issue was discovered in RubyGems 2.6 and later through 3.0.2. Gem::GemcutterUtilities#with_response may output the API response to stdout as it is. Therefore, if the API side modifies the response, escape sequence injection may occur."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2019-8324",
            "description": "An issue was discovered in RubyGems 2.6 and later through 3.0.2. A crafted gem with a multi-line name is not handled correctly. Therefore, an attacker could inject arbitrary code to the stub line of gemspec, which is eval-ed by code in ensure_loadable_spec during the preinstall check."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2019-8325",
            "description": "An issue was discovered in RubyGems 2.6 and later through 3.0.2. Since Gem::CommandManager#run calls alert_error without escaping, escape sequence injection is possible. (There are many ways to cause an error.)"
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2020-0187",
            "description": "In engineSetMode of BaseBlockCipher.java, there is a possible incorrect cryptographic algorithm chosen due to an incomplete comparison. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10Android ID: A-148517383"
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2020-11023",
            "description": "In jQuery versions greater than or equal to 1.0.3 and before 3.5.0, passing HTML containing <option> elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. This problem is patched in jQuery 3.5.0."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2020-15522",
            "description": "Bouncy Castle BC Java before 1.66, BC C# .NET before 1.8.7, BC-FJA before 1.0.1.2, 1.0.2.1, and BC-FNA before 1.0.1.1 have a timing issue within the EC math library that can expose information about the private key when an attacker is able to observe timing information for the generation of multiple deterministic ECDSA signatures."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2020-26939",
            "description": "In Legion of the Bouncy Castle BC before 1.61 and BC-FJA before 1.0.1.2, attackers can obtain sensitive information about a private exponent because of Observable Differences in Behavior to Error Inputs. This occurs in org.bouncycastle.crypto.encodings.OAEPEncoding. Sending invalid ciphertext that decrypts to a short payload in the OAEP Decoder could result in the throwing of an early exception, potentially leaking some information about the private exponent of the RSA private key performing the encryption."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2020-7656",
            "description": "jquery prior to 1.9.0 allows Cross-site Scripting attacks via the load method. The load method fails to recognize and remove \"<script>\" HTML tags that contain a whitespace character, i.e: \"</script >\", which results in the enclosed script logic to be executed."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2020-8130",
            "description": "There is an OS command injection vulnerability in Ruby Rake < 12.3.3 in Rake::FileList when supplying a filename that begins with the pipe character `|`."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2021-31799",
            "description": "In RDoc 3.11 through 6.x before 6.3.1, as distributed with Ruby through 3.0.1, it is possible to execute arbitrary code via | and tags in a filename."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2022-1471",
            "description": "SnakeYaml's Constructor() class does not restrict types which can be instantiated during deserialization.\u00a0Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml's SafeConsturctor when parsing untrusted content to restrict deserialization. We recommend upgrading to version 2.0 and beyond.\n"
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2022-25857",
            "description": "The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2022-38749",
            "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2022-38750",
            "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2022-38751",
            "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2022-38752",
            "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2022-41854",
            "description": "Those using Snakeyaml to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2023-33201",
            "description": "Bouncy Castle For Java before 1.74 is affected by an LDAP injection vulnerability. The vulnerability only affects applications that use an LDAP CertStore from Bouncy Castle to validate X.509 certificates. During the certificate validation process, Bouncy Castle inserts the certificate's Subject Name into an LDAP search filter without any escaping, which leads to an LDAP injection vulnerability."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2023-33202",
            "description": "Bouncy Castle for Java before 1.73 contains a potential Denial of Service (DoS) issue within the Bouncy Castle org.bouncycastle.openssl.PEMParser class. This class parses OpenSSL PEM encoded streams containing X.509 certificates, PKCS8 encoded keys, and PKCS7 objects. Parsing a file that has crafted ASN.1 data through the PEMParser causes an OutOfMemoryError, which can enable a denial of service attack. (For users of the FIPS Java API: BC-FJA 1.0.2.3 and earlier are affected; BC-FJA 1.0.2.4 is fixed.)"
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2024-27281",
            "description": "An issue was discovered in RDoc 6.3.3 through 6.6.2, as distributed in Ruby 3.x through 3.3.0. When parsing .rdoc_options (used for configuration in RDoc) as a YAML file, object injection and resultant remote code execution are possible because there are no restrictions on the classes that can be restored. (When loading the documentation cache, object injection and resultant remote code execution are also possible if there were a crafted cache.) The main fixed version is 6.6.3.1. For Ruby 3.0 users, a fixed version is rdoc 6.3.4.1. For Ruby 3.1 users, a fixed version is rdoc 6.4.1.1. For Ruby 3.2 users, a fixed version is rdoc 6.5.1.1."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2024-29857",
            "description": "An issue was discovered in ECCurve.java and ECCurve.cs in Bouncy Castle Java (BC Java) before 1.78, BC Java LTS before 2.73.6, BC-FJA before 1.0.2.5, and BC C# .Net before 2.3.1. Importing an EC certificate with crafted F2m parameters can lead to excessive CPU consumption during the evaluation of the curve parameters."
        },
        {
            "displayName": "org.jruby : jruby-stdlib : 9.1.17.0",
            "cve": "CVE-2024-30171",
            "description": "An issue was discovered in Bouncy Castle Java TLS API and JSSE Provider before 1.78. Timing-based leakage may occur in RSA based handshakes because of exception processing."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-http : 9.4.18.v20190429",
            "cve": "CVE-2020-27223",
            "description": "In Eclipse Jetty 9.4.6.v20170531 to 9.4.36.v20210114 (inclusive), 10.0.0, and 11.0.0 when Jetty handles a request containing multiple Accept headers with a large number of \u201cquality\u201d (i.e. q) parameters, the server may enter a denial of service (DoS) state due to high CPU usage processing those quality values, resulting in minutes of CPU time exhausted processing those quality values."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-http : 9.4.18.v20190429",
            "cve": "CVE-2022-2047",
            "description": "In Eclipse Jetty versions 9.4.0 thru 9.4.46, and 10.0.0 thru 10.0.9, and 11.0.0 thru 11.0.9 versions, the parsing of the authority segment of an http scheme URI, the Jetty HttpURI class improperly detects an invalid input as a hostname. This can lead to failures in a Proxy scenario."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-http : 9.4.18.v20190429",
            "cve": "CVE-2023-26048",
            "description": "Jetty is a java based web server and servlet engine. In affected versions servlets with multipart support (e.g. annotated with `@MultipartConfig`) that call `HttpServletRequest.getParameter()` or `HttpServletRequest.getParts()` may cause `OutOfMemoryError` when the client sends a multipart request with a part that has a name but no filename and very large content. This happens even with the default settings of `fileSizeThreshold=0` which should stream the whole part content to disk. An attacker client may send a large multipart request and cause the server to throw `OutOfMemoryError`. However, the server may be able to recover after the `OutOfMemoryError` and continue its service -- although it may take some time. This issue has been patched in versions 9.4.51, 10.0.14, and 11.0.14. Users are advised to upgrade. Users unable to upgrade may set the multipart parameter `maxRequestSize` which must be set to a non-negative value, so the whole multipart content is limited (although still read into memory)."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-http : 9.4.18.v20190429",
            "cve": "CVE-2023-40167",
            "description": "Jetty is a Java based web server and servlet engine. Prior to versions 9.4.52, 10.0.16, 11.0.16, and 12.0.1, Jetty accepts the `+` character proceeding the content-length value in a HTTP/1 header field.  This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses.  There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response. Versions 9.4.52, 10.0.16, 11.0.16, and 12.0.1 contain a patch for this issue. There is no workaround as there is no known exploit scenario."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-http : 9.4.18.v20190429",
            "cve": "CVE-2024-6763",
            "description": "Eclipse Jetty is a lightweight, highly scalable, Java-based web server and Servlet engine . It includes a utility class, HttpURI, for URI/URL parsing.\n\nThe HttpURI class does insufficient validation on the authority segment of a URI.  However the behaviour of HttpURI\n differs from the common browsers in how it handles a URI that would be \nconsidered invalid if fully validated against the RRC.  Specifically HttpURI\n and the browser may differ on the value of the host extracted from an \ninvalid URI and thus a combination of Jetty and a vulnerable browser may\n be vulnerable to a open redirect attack or to a SSRF attack if the URI \nis used after passing validation checks."
        },
        {
            "displayName": "@shore/bootstrap 3.3.5-shore.76",
            "cve": "CVE-2018-14040",
            "description": "In Bootstrap before 4.1.2, XSS is possible in the collapse data-parent attribute."
        },
        {
            "displayName": "@shore/bootstrap 3.3.5-shore.76",
            "cve": "CVE-2018-14042",
            "description": "In Bootstrap before 4.1.2, XSS is possible in the data-container property of tooltip."
        },
        {
            "displayName": "@shore/bootstrap 3.3.5-shore.76",
            "cve": "CVE-2018-20676",
            "description": "In Bootstrap before 3.4.0, XSS is possible in the tooltip data-viewport attribute."
        },
        {
            "displayName": "@shore/bootstrap 3.3.5-shore.76",
            "cve": "CVE-2018-20677",
            "description": "In Bootstrap before 3.4.0, XSS is possible in the affix configuration target property."
        },
        {
            "displayName": "@shore/bootstrap 3.3.5-shore.76",
            "cve": "CVE-2019-8331",
            "description": "In Bootstrap before 3.4.1 and 4.3.x before 4.3.1, XSS is possible in the tooltip or popover data-template attribute."
        },
        {
            "displayName": "@shore/bootstrap 3.3.5-shore.76",
            "cve": "CVE-2024-6484",
            "description": "A vulnerability has been identified in Bootstrap that exposes users to Cross-Site Scripting (XSS) attacks. The issue is present in the carousel component, where the data-slide and data-slide-to attributes can be exploited through the href attribute of an <a> tag due to inadequate sanitization. This vulnerability could potentially enable attackers to execute arbitrary JavaScript within the victim's browser."
        },
        {
            "displayName": "org.richfaces : richfaces-core : 4.5.17.Final",
            "cve": "CVE-2019-11358",
            "description": "jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution. If an unsanitized source object contained an enumerable __proto__ property, it could extend the native Object.prototype."
        },
        {
            "displayName": "org.richfaces : richfaces-core : 4.5.17.Final",
            "cve": "CVE-2020-11023",
            "description": "In jQuery versions greater than or equal to 1.0.3 and before 3.5.0, passing HTML containing <option> elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. This problem is patched in jQuery 3.5.0."
        },
        {
            "displayName": "org.richfaces : richfaces-core : 4.5.17.Final",
            "cve": "CVE-2020-23064",
            "description": "Rejected reason: DO NOT USE THIS CANDIDATE NUMBER. ConsultIDs: CVE-2020-11023. Reason: This candidate is a duplicate of CVE-2020-11023. Notes: All CVE users should reference CVE-2020-11023 instead of this candidate. All references and descriptions in this candidate have been removed to prevent accidental usage."
        },
        {
            "displayName": "jquery 1.12.3",
            "cve": "CVE-2019-11358",
            "description": "jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution. If an unsanitized source object contained an enumerable __proto__ property, it could extend the native Object.prototype."
        },
        {
            "displayName": "jquery 1.12.3",
            "cve": "CVE-2020-11023",
            "description": "In jQuery versions greater than or equal to 1.0.3 and before 3.5.0, passing HTML containing <option> elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. This problem is patched in jQuery 3.5.0."
        },
        {
            "displayName": "jquery 1.12.3",
            "cve": "CVE-2020-23064",
            "description": "Rejected reason: DO NOT USE THIS CANDIDATE NUMBER. ConsultIDs: CVE-2020-11023. Reason: This candidate is a duplicate of CVE-2020-11023. Notes: All CVE users should reference CVE-2020-11023 instead of this candidate. All references and descriptions in this candidate have been removed to prevent accidental usage."
        },
        {
            "displayName": "org.yaml : snakeyaml : 1.18",
            "cve": "CVE-2017-18640",
            "description": "The Alias feature in SnakeYAML before 1.26 allows entity expansion during a load operation, a related issue to CVE-2003-1564."
        },
        {
            "displayName": "org.yaml : snakeyaml : 1.18",
            "cve": "CVE-2022-1471",
            "description": "SnakeYaml's Constructor() class does not restrict types which can be instantiated during deserialization.\u00a0Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml's SafeConsturctor when parsing untrusted content to restrict deserialization. We recommend upgrading to version 2.0 and beyond.\n"
        },
        {
            "displayName": "org.yaml : snakeyaml : 1.18",
            "cve": "CVE-2022-25857",
            "description": "The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections."
        },
        {
            "displayName": "org.yaml : snakeyaml : 1.18",
            "cve": "CVE-2022-38749",
            "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."
        },
        {
            "displayName": "org.yaml : snakeyaml : 1.18",
            "cve": "CVE-2022-38750",
            "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."
        },
        {
            "displayName": "org.yaml : snakeyaml : 1.18",
            "cve": "CVE-2022-38751",
            "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow."
        },
        {
            "displayName": "org.yaml : snakeyaml : 1.18",
            "cve": "CVE-2022-38752",
            "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow."
        },
        {
            "displayName": "org.yaml : snakeyaml : 1.18",
            "cve": "CVE-2022-41854",
            "description": "Those using Snakeyaml to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-servlets : 9.4.18.v20190429",
            "cve": "CVE-2021-28169",
            "description": "For Eclipse Jetty versions <= 9.4.40, <= 10.0.2, <= 11.0.2, it is possible for requests to the ConcatServlet with a doubly encoded path to access protected resources within the WEB-INF directory. For example a request to `/concat?/%2557EB-INF/web.xml` can retrieve the web.xml file. This can reveal sensitive information regarding the implementation of a web application."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-servlets : 9.4.18.v20190429",
            "cve": "CVE-2023-36479",
            "description": "Eclipse Jetty Canonical Repository is the canonical repository for the Jetty project. Users of the CgiServlet with a very specific command structure may have the wrong command executed. If a user sends a request to a org.eclipse.jetty.servlets.CGI Servlet for a binary with a space in its name, the servlet will escape the command by wrapping it in quotation marks. This wrapped command, plus an optional command prefix, will then be executed through a call to Runtime.exec. If the original binary name provided by the user contains a quotation mark followed by a space, the resulting command line will contain multiple tokens instead of one. This issue was patched in version 9.4.52, 10.0.16, 11.0.16 and 12.0.0-beta2.\n"
        },
        {
            "displayName": "org.eclipse.jetty : jetty-servlets : 9.4.18.v20190429",
            "cve": "CVE-2024-6762",
            "description": "Jetty PushSessionCacheFilter can be exploited by unauthenticated users \nto launch remote DoS attacks by exhausting the server\u2019s memory."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-servlets : 9.4.18.v20190429",
            "cve": "CVE-2024-9823",
            "description": "There exists a security vulnerability in Jetty's DosFilter which can be exploited by unauthorized users to cause remote denial-of-service (DoS) attack on the server using DosFilter. By repeatedly sending crafted requests, attackers can trigger OutofMemory errors and exhaust the server's memory finally."
        },
        {
            "displayName": "org.eclipse.jetty : jetty-client : 9.4.18.v20190429",
            "cve": "CVE-2022-2047",
            "description": "In Eclipse Jetty versions 9.4.0 thru 9.4.46, and 10.0.0 thru 10.0.9, and 11.0.0 thru 11.0.9 versions, the parsing of the authority segment of an http scheme URI, the Jetty HttpURI class improperly detects an invalid input as a hostname. This can lead to failures in a Proxy scenario."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2017-5645",
            "description": "In Apache Log4j 2.x before 2.8.2, when using the TCP socket server or UDP socket server to receive serialized log events from another application, a specially crafted binary payload can be sent that, when deserialized, can execute arbitrary code."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2017-7525",
            "description": "A deserialization flaw was discovered in the jackson-databind, versions before 2.6.7.1, 2.7.9.1 and 2.8.9, which could allow an unauthenticated user to perform code execution by sending the maliciously crafted input to the readValue method of the ObjectMapper."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2018-1002202",
            "description": "zip4j before 1.3.3 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in a Zip archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2018-10237",
            "description": "Unbounded memory allocation in Google Guava 11.0 through 24.x before 24.1.1 allows remote attackers to conduct denial of service attacks against servers that depend on this library and deserialize attacker-provided data, because the AtomicDoubleArray class (when serialized with Java serialization) and the CompoundOrdering class (when serialized with GWT serialization) perform eager allocation without appropriate checks on what a client has sent and whether the data size is reasonable."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2018-14040",
            "description": "In Bootstrap before 4.1.2, XSS is possible in the collapse data-parent attribute."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2018-14042",
            "description": "In Bootstrap before 4.1.2, XSS is possible in the data-container property of tooltip."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2018-20676",
            "description": "In Bootstrap before 3.4.0, XSS is possible in the tooltip data-viewport attribute."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2018-20677",
            "description": "In Bootstrap before 3.4.0, XSS is possible in the affix configuration target property."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2019-11358",
            "description": "jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution. If an unsanitized source object contained an enumerable __proto__ property, it could extend the native Object.prototype."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2019-8331",
            "description": "In Bootstrap before 3.4.1 and 4.3.x before 4.3.1, XSS is possible in the tooltip or popover data-template attribute."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2020-11023",
            "description": "In jQuery versions greater than or equal to 1.0.3 and before 3.5.0, passing HTML containing <option> elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. This problem is patched in jQuery 3.5.0."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2020-13936",
            "description": "An attacker that is able to modify Velocity templates may execute arbitrary Java code or run arbitrary system commands with the same privileges as the account running the Servlet container. This applies to applications that allow untrusted users to upload/modify velocity templates running Apache Velocity Engine versions up to 2.2."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2020-23064",
            "description": "Rejected reason: DO NOT USE THIS CANDIDATE NUMBER. ConsultIDs: CVE-2020-11023. Reason: This candidate is a duplicate of CVE-2020-11023. Notes: All CVE users should reference CVE-2020-11023 instead of this candidate. All references and descriptions in this candidate have been removed to prevent accidental usage."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2020-25649",
            "description": "A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2020-36518",
            "description": "jackson-databind before 2.13.0 allows a Java StackOverflow exception and denial of service via a large depth of nested objects."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2020-9488",
            "description": "Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender. Fixed in Apache Log4j 2.12.3 and 2.13.1"
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2021-37714",
            "description": "jsoup is a Java library for working with HTML. Those using jsoup versions prior to 1.14.2 to parse untrusted HTML or XML may be vulnerable to DOS attacks. If the parser is run on user supplied input, an attacker may supply content that causes the parser to get stuck (loop indefinitely until cancelled), to complete more slowly than usual, or to throw an unexpected exception. This effect may support a denial of service attack. The issue is patched in version 1.14.2. There are a few available workarounds. Users may rate limit input parsing, limit the size of inputs based on system resources, and/or implement thread watchdogs to cap and timeout parse runtimes."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2021-42575",
            "description": "The OWASP Java HTML Sanitizer before 20211018.1 does not properly enforce policies associated with the SELECT, STYLE, and OPTION elements."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2021-44228",
            "description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2021-44832",
            "description": "Apache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4) are vulnerable to a remote code execution (RCE) attack when a configuration uses a JDBC Appender with a JNDI LDAP data source URI when an attacker has control of the target LDAP server. This issue is fixed by limiting JNDI data source names to the java protocol in Log4j2 versions 2.17.1, 2.12.4, and 2.3.2."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2021-45046",
            "description": "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2021-45105",
            "description": "Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3 and 2.3.1) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0, 2.12.3, and 2.3.1."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2022-24615",
            "description": "zip4j up to v2.10.0 can throw various uncaught exceptions while parsing a specially crafted ZIP file, which could result in an application crash. This could be used to mount a denial of service attack against services that use zip4j library."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2022-24785",
            "description": "Moment.js is a JavaScript date library for parsing, validating, manipulating, and formatting dates. A path traversal vulnerability impacts npm (server) users of Moment.js between versions 1.0.1 and 2.29.1, especially if a user-provided locale string is directly used to switch moment locale. This problem is patched in 2.29.2, and the patch can be applied to all affected versions. As a workaround, sanitize the user-provided locale name before passing it to Moment.js."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2022-42003",
            "description": "In FasterXML jackson-databind before versions 2.13.4.1 and 2.12.17.1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2022-42004",
            "description": "In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2023-22899",
            "description": "Zip4j through 2.11.2, as used in Threema and other products, does not always check the MAC when decrypting a ZIP archive."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2023-2976",
            "description": "Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class.\n\nEven though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.\n\n"
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2024-47554",
            "description": "Uncontrolled Resource Consumption vulnerability in Apache Commons IO.\n\nThe org.apache.commons.io.input.XmlStreamReader class may excessively consume CPU resources when processing maliciously crafted input.\n\n\nThis issue affects Apache Commons IO: from 2.0 before 2.14.0.\n\nUsers are recommended to upgrade to version 2.14.0 or later, which fixes the issue."
        },
        {
            "displayName": "rigor (py2.py3-none-any) 0.4.4 (.whl)",
            "cve": "CVE-2024-6484",
            "description": "A vulnerability has been identified in Bootstrap that exposes users to Cross-Site Scripting (XSS) attacks. The issue is present in the carousel component, where the data-slide and data-slide-to attributes can be exploited through the href attribute of an <a> tag due to inadequate sanitization. This vulnerability could potentially enable attackers to execute arbitrary JavaScript within the victim's browser."
        },
        {
            "displayName": "io.netty : netty-all : 4.1.48.Final",
            "cve": "CVE-2021-21290",
            "description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty before version 4.1.59.Final there is a vulnerability on Unix-like systems involving an insecure temp file. When netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. On unix-like systems, the temporary directory is shared between all user. As such, writing to this directory using APIs that do not explicitly set the file/directory permissions can lead to information disclosure. Of note, this does not impact modern MacOS Operating Systems. The method \"File.createTempFile\" on unix-like systems creates a random file, but, by default will create this file with the permissions \"-rw-r--r--\". Thus, if sensitive information is written to this file, other local users can read this information. This is the case in netty's \"AbstractDiskHttpData\" is vulnerable. This has been fixed in version 4.1.59.Final. As a workaround, one may specify your own \"java.io.tmpdir\" when you start the JVM or use \"DefaultHttpDataFactory.setBaseDir(...)\" to set the directory to something that is only readable by the current user."
        },
        {
            "displayName": "io.netty : netty-all : 4.1.48.Final",
            "cve": "CVE-2021-21295",
            "description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty (io.netty:netty-codec-http2) before version 4.1.60.Final there is a vulnerability that enables request smuggling. If a Content-Length header is present in the original HTTP/2 request, the field is not validated by `Http2MultiplexHandler` as it is propagated up. This is fine as long as the request is not proxied through as HTTP/1.1. If the request comes in as an HTTP/2 stream, gets converted into the HTTP/1.1 domain objects (`HttpRequest`, `HttpContent`, etc.) via `Http2StreamFrameToHttpObjectCodec `and then sent up to the child channel's pipeline and proxied through a remote peer as HTTP/1.1 this may result in request smuggling. In a proxy case, users may assume the content-length is validated somehow, which is not the case. If the request is forwarded to a backend channel that is a HTTP/1.1 connection, the Content-Length now has meaning and needs to be checked. An attacker can smuggle requests inside the body as it gets downgraded from HTTP/2 to HTTP/1.1. For an example attack refer to the linked GitHub Advisory. Users are only affected if all of this is true: `HTTP2MultiplexCodec` or `Http2FrameCodec` is used, `Http2StreamFrameToHttpObjectCodec` is used to convert to HTTP/1.1 objects, and these HTTP/1.1 objects are forwarded to another remote peer. This has been patched in 4.1.60.Final As a workaround, the user can do the validation by themselves by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`."
        },
        {
            "displayName": "io.netty : netty-all : 4.1.48.Final",
            "cve": "CVE-2021-37136",
            "description": "The Bzip2 decompression decoder function doesn't allow setting size restrictions on the decompressed output data (which affects the allocation size used during decompression). All users of Bzip2Decoder are affected. The malicious input can trigger an OOME and so a DoS attack"
        },
        {
            "displayName": "io.netty : netty-all : 4.1.48.Final",
            "cve": "CVE-2021-37137",
            "description": "The Snappy frame decoder function doesn't restrict the chunk length which may lead to excessive memory usage. Beside this it also may buffer reserved skippable chunks until the whole chunk was received which may lead to excessive memory usage as well. This vulnerability can be triggered by supplying malicious input that decompresses to a very big size (via a network stream or a file) or by sending a huge skippable chunk."
        },
        {
            "displayName": "io.netty : netty-all : 4.1.48.Final",
            "cve": "CVE-2021-43797",
            "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. Netty prior to version 4.1.71.Final skips control chars when they are present at the beginning / end of the header name. It should instead fail fast as these are not allowed by the spec and could lead to HTTP request smuggling. Failing to do the validation might cause netty to \"sanitize\" header names before it forward these to another remote system when used as proxy. This remote system can't see the invalid usage anymore, and therefore does not do the validation itself. Users should upgrade to version 4.1.71.Final."
        },
        {
            "displayName": "io.netty : netty-all : 4.1.48.Final",
            "cve": "CVE-2022-41881",
            "description": "Netty project is an event-driven asynchronous network application framework. In versions prior to 4.1.86.Final, a StackOverflowError can be raised when parsing a malformed crafted message due to an infinite recursion. This issue is patched in version 4.1.86.Final. There is no workaround, except using a custom HaProxyMessageDecoder."
        },
        {
            "displayName": "io.netty : netty-all : 4.1.48.Final",
            "cve": "CVE-2022-41915",
            "description": "Netty project is an event-driven asynchronous network application framework. Starting in version 4.1.83.Final and prior to 4.1.86.Final, when calling `DefaultHttpHeadesr.set` with an _iterator_ of values, header value validation was not performed, allowing malicious header values in the iterator to perform HTTP Response Splitting. This issue has been patched in version 4.1.86.Final. Integrators can work around the issue by changing the `DefaultHttpHeaders.set(CharSequence, Iterator<?>)` call, into a `remove()` call, and call `add()` in a loop over the iterator of values."
        },
        {
            "displayName": "io.netty : netty-all : 4.1.48.Final",
            "cve": "CVE-2023-34462",
            "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. The `SniHandler` can allocate up to 16MB of heap for each channel during the TLS handshake. When the handler or the channel does not have an idle timeout, it can be used to make a TCP server using the `SniHandler` to allocate 16MB of heap. The `SniHandler` class is a handler that waits for the TLS handshake to configure a `SslHandler` according to the indicated server name by the `ClientHello` record. For this matter it allocates a `ByteBuf` using the value defined in the `ClientHello` record. Normally the value of the packet should be smaller than the handshake packet but there are not checks done here and the way the code is written, it is possible to craft a packet that makes the `SslClientHelloHandler`. This vulnerability has been fixed in version 4.1.94.Final."
        },
        {
            "displayName": "io.netty : netty-all : 4.1.48.Final",
            "cve": "CVE-2024-29025",
            "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final."
        },
        {
            "displayName": "io.netty : netty-all : 4.1.48.Final",
            "cve": "CVE-2024-47535",
            "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. An unsafe reading of environment file could potentially cause a denial of service in Netty. When loaded on an Windows application, Netty attempts to load a file that does not exist. If an attacker creates such a large file, the Netty application crashes. This vulnerability is fixed in 4.1.115."
        },
        {
            "displayName": "com.h2database : h2 : 1.4.187",
            "cve": "CVE-2021-42392",
            "description": "The org.h2.util.JdbcUtils.getConnection method of the H2 database takes as parameters the class name of the driver and URL of the database. An attacker may pass a JNDI driver name and a URL leading to a LDAP or RMI servers, causing remote code execution. This can be exploited through various attack vectors, most notably through the H2 Console which leads to unauthenticated remote code execution."
        },
        {
            "displayName": "com.h2database : h2 : 1.4.187",
            "cve": "CVE-2022-23221",
            "description": "H2 Console before 2.1.210 allows remote attackers to execute arbitrary code via a jdbc:h2:mem JDBC URL containing the IGNORE_UNKNOWN_SETTINGS=TRUE;FORBID_CREATION=FALSE;INIT=RUNSCRIPT substring, a different vulnerability than CVE-2021-42392."
        },
        {
            "displayName": "moment 2.17.1",
            "cve": "CVE-2022-24785",
            "description": "Moment.js is a JavaScript date library for parsing, validating, manipulating, and formatting dates. A path traversal vulnerability impacts npm (server) users of Moment.js between versions 1.0.1 and 2.29.1, especially if a user-provided locale string is directly used to switch moment locale. This problem is patched in 2.29.2, and the patch can be applied to all affected versions. As a workaround, sanitize the user-provided locale name before passing it to Moment.js."
        },
        {
            "displayName": "org.apache.logging.log4j : log4j-core : 2.13.0",
            "cve": "CVE-2020-9488",
            "description": "Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender. Fixed in Apache Log4j 2.12.3 and 2.13.1"
        },
        {
            "displayName": "org.apache.logging.log4j : log4j-core : 2.13.0",
            "cve": "CVE-2021-44228",
            "description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects."
        },
        {
            "displayName": "org.apache.logging.log4j : log4j-core : 2.13.0",
            "cve": "CVE-2021-44832",
            "description": "Apache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4) are vulnerable to a remote code execution (RCE) attack when a configuration uses a JDBC Appender with a JNDI LDAP data source URI when an attacker has control of the target LDAP server. This issue is fixed by limiting JNDI data source names to the java protocol in Log4j2 versions 2.17.1, 2.12.4, and 2.3.2."
        },
        {
            "displayName": "org.apache.logging.log4j : log4j-core : 2.13.0",
            "cve": "CVE-2021-45046",
            "description": "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default."
        },
        {
            "displayName": "org.apache.logging.log4j : log4j-core : 2.13.0",
            "cve": "CVE-2021-45105",
            "description": "Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3 and 2.3.1) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0, 2.12.3, and 2.3.1."
        },
        {
            "displayName": "org.apache.logging.log4j : log4j-core : 2.13.3",
            "cve": "CVE-2021-44228",
            "description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects."
        },
        {
            "displayName": "org.apache.logging.log4j : log4j-core : 2.13.3",
            "cve": "CVE-2021-44832",
            "description": "Apache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4) are vulnerable to a remote code execution (RCE) attack when a configuration uses a JDBC Appender with a JNDI LDAP data source URI when an attacker has control of the target LDAP server. This issue is fixed by limiting JNDI data source names to the java protocol in Log4j2 versions 2.17.1, 2.12.4, and 2.3.2."
        },
        {
            "displayName": "org.apache.logging.log4j : log4j-core : 2.13.3",
            "cve": "CVE-2021-45046",
            "description": "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default."
        },
        {
            "displayName": "org.apache.logging.log4j : log4j-core : 2.13.3",
            "cve": "CVE-2021-45105",
            "description": "Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3 and 2.3.1) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0, 2.12.3, and 2.3.1."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2017-5645",
            "description": "In Apache Log4j 2.x before 2.8.2, when using the TCP socket server or UDP socket server to receive serialized log events from another application, a specially crafted binary payload can be sent that, when deserialized, can execute arbitrary code."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2017-7525",
            "description": "A deserialization flaw was discovered in the jackson-databind, versions before 2.6.7.1, 2.7.9.1 and 2.8.9, which could allow an unauthenticated user to perform code execution by sending the maliciously crafted input to the readValue method of the ObjectMapper."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2018-1002202",
            "description": "zip4j before 1.3.3 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in a Zip archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2018-10237",
            "description": "Unbounded memory allocation in Google Guava 11.0 through 24.x before 24.1.1 allows remote attackers to conduct denial of service attacks against servers that depend on this library and deserialize attacker-provided data, because the AtomicDoubleArray class (when serialized with Java serialization) and the CompoundOrdering class (when serialized with GWT serialization) perform eager allocation without appropriate checks on what a client has sent and whether the data size is reasonable."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2018-14040",
            "description": "In Bootstrap before 4.1.2, XSS is possible in the collapse data-parent attribute."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2018-14042",
            "description": "In Bootstrap before 4.1.2, XSS is possible in the data-container property of tooltip."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2018-20676",
            "description": "In Bootstrap before 3.4.0, XSS is possible in the tooltip data-viewport attribute."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2018-20677",
            "description": "In Bootstrap before 3.4.0, XSS is possible in the affix configuration target property."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2019-11358",
            "description": "jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution. If an unsanitized source object contained an enumerable __proto__ property, it could extend the native Object.prototype."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2019-8331",
            "description": "In Bootstrap before 3.4.1 and 4.3.x before 4.3.1, XSS is possible in the tooltip or popover data-template attribute."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2020-11023",
            "description": "In jQuery versions greater than or equal to 1.0.3 and before 3.5.0, passing HTML containing <option> elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. This problem is patched in jQuery 3.5.0."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2020-13936",
            "description": "An attacker that is able to modify Velocity templates may execute arbitrary Java code or run arbitrary system commands with the same privileges as the account running the Servlet container. This applies to applications that allow untrusted users to upload/modify velocity templates running Apache Velocity Engine versions up to 2.2."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2020-23064",
            "description": "Rejected reason: DO NOT USE THIS CANDIDATE NUMBER. ConsultIDs: CVE-2020-11023. Reason: This candidate is a duplicate of CVE-2020-11023. Notes: All CVE users should reference CVE-2020-11023 instead of this candidate. All references and descriptions in this candidate have been removed to prevent accidental usage."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2020-25649",
            "description": "A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2020-36518",
            "description": "jackson-databind before 2.13.0 allows a Java StackOverflow exception and denial of service via a large depth of nested objects."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2020-9488",
            "description": "Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender. Fixed in Apache Log4j 2.12.3 and 2.13.1"
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2021-37714",
            "description": "jsoup is a Java library for working with HTML. Those using jsoup versions prior to 1.14.2 to parse untrusted HTML or XML may be vulnerable to DOS attacks. If the parser is run on user supplied input, an attacker may supply content that causes the parser to get stuck (loop indefinitely until cancelled), to complete more slowly than usual, or to throw an unexpected exception. This effect may support a denial of service attack. The issue is patched in version 1.14.2. There are a few available workarounds. Users may rate limit input parsing, limit the size of inputs based on system resources, and/or implement thread watchdogs to cap and timeout parse runtimes."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2021-42575",
            "description": "The OWASP Java HTML Sanitizer before 20211018.1 does not properly enforce policies associated with the SELECT, STYLE, and OPTION elements."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2021-44228",
            "description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2021-44832",
            "description": "Apache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4) are vulnerable to a remote code execution (RCE) attack when a configuration uses a JDBC Appender with a JNDI LDAP data source URI when an attacker has control of the target LDAP server. This issue is fixed by limiting JNDI data source names to the java protocol in Log4j2 versions 2.17.1, 2.12.4, and 2.3.2."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2021-45046",
            "description": "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2021-45105",
            "description": "Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3 and 2.3.1) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0, 2.12.3, and 2.3.1."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2022-24615",
            "description": "zip4j up to v2.10.0 can throw various uncaught exceptions while parsing a specially crafted ZIP file, which could result in an application crash. This could be used to mount a denial of service attack against services that use zip4j library."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2022-24785",
            "description": "Moment.js is a JavaScript date library for parsing, validating, manipulating, and formatting dates. A path traversal vulnerability impacts npm (server) users of Moment.js between versions 1.0.1 and 2.29.1, especially if a user-provided locale string is directly used to switch moment locale. This problem is patched in 2.29.2, and the patch can be applied to all affected versions. As a workaround, sanitize the user-provided locale name before passing it to Moment.js."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2022-42003",
            "description": "In FasterXML jackson-databind before versions 2.13.4.1 and 2.12.17.1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2022-42004",
            "description": "In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2023-22899",
            "description": "Zip4j through 2.11.2, as used in Threema and other products, does not always check the MAC when decrypting a ZIP archive."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2023-2976",
            "description": "Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class.\n\nEven though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.\n\n"
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2024-47554",
            "description": "Uncontrolled Resource Consumption vulnerability in Apache Commons IO.\n\nThe org.apache.commons.io.input.XmlStreamReader class may excessively consume CPU resources when processing maliciously crafted input.\n\n\nThis issue affects Apache Commons IO: from 2.0 before 2.14.0.\n\nUsers are recommended to upgrade to version 2.14.0 or later, which fixes the issue."
        },
        {
            "displayName": "net.masterthought : cucumber-sandwich : jar : jar-with-dependencies : 3.8.0",
            "cve": "CVE-2024-6484",
            "description": "A vulnerability has been identified in Bootstrap that exposes users to Cross-Site Scripting (XSS) attacks. The issue is present in the carousel component, where the data-slide and data-slide-to attributes can be exploited through the href attribute of an <a> tag due to inadequate sanitization. This vulnerability could potentially enable attackers to execute arbitrary JavaScript within the victim's browser."
        },
        {
            "displayName": "com.fasterxml.jackson.core : jackson-databind : 2.10.5.1",
            "cve": "CVE-2020-36518",
            "description": "jackson-databind before 2.13.0 allows a Java StackOverflow exception and denial of service via a large depth of nested objects."
        },
        {
            "displayName": "com.fasterxml.jackson.core : jackson-databind : 2.10.5.1",
            "cve": "CVE-2022-42003",
            "description": "In FasterXML jackson-databind before versions 2.13.4.1 and 2.12.17.1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled."
        },
        {
            "displayName": "com.fasterxml.jackson.core : jackson-databind : 2.10.5.1",
            "cve": "CVE-2022-42004",
            "description": "In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization."
        },
        {
            "displayName": "com.fizzed : blaze-lite : 0.8.0",
            "cve": "CVE-2022-37865",
            "description": "With Apache Ivy 2.4.0 an optional packaging attribute has been introduced that allows artifacts to be unpacked on the fly if they used pack200 or zip packaging. For artifacts using the \"zip\", \"jar\" or \"war\" packaging Ivy prior to 2.5.1 doesn't verify the target path when extracting the archive. An archive containing absolute paths or paths that try to traverse \"upwards\" using \"..\" sequences can then write files to any location on the local fie system that the user executing Ivy has write access to. Ivy users of version 2.4.0 to 2.5.0 should upgrade to Ivy 2.5.1."
        },
        {
            "displayName": "com.fizzed : blaze-lite : 0.8.0",
            "cve": "CVE-2022-37866",
            "description": "When Apache Ivy downloads artifacts from a repository it stores them in the local file system based on a user-supplied \"pattern\" that may include placeholders for artifacts coordinates like the organisation, module or version. If said coordinates contain \"../\" sequences - which are valid characters for Ivy coordinates in general - it is possible the artifacts are stored outside of Ivy's local cache or repository or can overwrite different artifacts inside of the local cache. In order to exploit this vulnerability an attacker needs collaboration by the remote repository as Ivy will issue http requests containing \"..\" sequences and a \"normal\" repository will not interpret them as part of the artifact coordinates. Users of Apache Ivy 2.0.0 to 2.5.1 should upgrade to Ivy 2.5.1."
        },
        {
            "displayName": "com.fizzed : blaze-lite : 0.8.0",
            "cve": "CVE-2022-46751",
            "description": "Improper Restriction of XML External Entity Reference, XML Injection (aka Blind XPath Injection) vulnerability in Apache Software Foundation Apache Ivy.This issue affects any version of Apache Ivy prior to 2.5.2.\n\nWhen Apache Ivy prior to 2.5.2 parses XML files - either its own configuration, Ivy files or Apache Maven POMs - it will allow downloading external document type definitions and expand any entity references contained therein when used.\n\nThis can be used to exfiltrate data, access resources only the machine running Ivy has access to or disturb the execution of Ivy in different ways.\n\nStarting with Ivy 2.5.2 DTD processing is disabled by default except when parsing Maven POMs where the default is to allow DTD processing but only to include a DTD snippet shipping with Ivy that is needed to deal with existing Maven POMs that are not valid XML files but are nevertheless accepted by Maven. Access can be be made more lenient via newly introduced system properties where needed.\n\nUsers of Ivy prior to version 2.5.2 can use Java system properties to restrict processing of external DTDs, see the section about \"JAXP Properties for External Access restrictions\" inside Oracle's \"Java API for XML Processing (JAXP) Security Guide\".\n\n"
        },
        {
            "displayName": "com.fizzed : blaze-lite : 0.8.0",
            "cve": "CVE-2024-47554",
            "description": "Uncontrolled Resource Consumption vulnerability in Apache Commons IO.\n\nThe org.apache.commons.io.input.XmlStreamReader class may excessively consume CPU resources when processing maliciously crafted input.\n\n\nThis issue affects Apache Commons IO: from 2.0 before 2.14.0.\n\nUsers are recommended to upgrade to version 2.14.0 or later, which fixes the issue."
        },
        {
            "displayName": "ip : 1.1.9",
            "cve": "CVE-2024-29415",
            "description": "The ip package through 2.0.1 for Node.js might allow SSRF because some IP addresses (such as 127.1, 01200034567, 012.1.2.3, 000:0:0000::01, and ::fFFf:127.0.0.1) are improperly categorized as globally routable via isPublic. NOTE: this issue exists because of an incomplete fix for CVE-2023-42282."
        },
        {
            "displayName": "axios : 0.21.4",
            "cve": "CVE-2023-45857",
            "description": "An issue discovered in Axios 1.5.1 inadvertently reveals the confidential XSRF-TOKEN stored in cookies by including it in the HTTP header X-XSRF-TOKEN for every request made to any host allowing attackers to view sensitive information."
        },
        {
            "displayName": "swig : 1.4.2",
            "cve": "CVE-2023-25345",
            "description": "Directory traversal vulnerability in swig-templates thru 2.0.4 and swig thru 1.4.2, allows attackers to read arbitrary files via the include or extends tags."
        },
        {
            "displayName": "axios : 0.24.0",
            "cve": "CVE-2023-45857",
            "description": "An issue discovered in Axios 1.5.1 inadvertently reveals the confidential XSRF-TOKEN stored in cookies by including it in the HTTP header X-XSRF-TOKEN for every request made to any host allowing attackers to view sensitive information."
        },
        {
            "displayName": "tar : 4.4.19",
            "cve": "CVE-2024-28863",
            "description": "node-tar is a Tar for Node.js. node-tar prior to version 6.2.1 has no limit on the number of sub-folders created in the folder creation process. An attacker who generates a large number of sub-folders can consume memory on the system running node-tar and even crash the Node.js client within few seconds of running it using a path with too many sub-folders inside. Version 6.2.1 fixes this issue by preventing extraction in excessively deep sub-folders."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2022-24329",
            "description": "In JetBrains Kotlin before 1.6.0, it was not possible to lock dependencies for Multiplatform Gradle Projects."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2024-21634",
            "description": "Amazon Ion is a Java implementation of the Ion data notation. Prior to version 1.10.5, a potential denial-of-service issue exists in\u00a0`ion-java`\u00a0for applications that use\u00a0`ion-java`\u00a0to deserialize Ion text encoded data, or deserialize Ion text or binary encoded data into the\u00a0`IonValue`\u00a0model and then invoke certain\u00a0`IonValue`\u00a0methods on that in-memory representation. An actor could craft Ion data that, when loaded by the affected application and/or processed using the\u00a0`IonValue`\u00a0model, results in a\u00a0`StackOverflowError`\u00a0originating from the\u00a0`ion-java`\u00a0library. The patch is included in `ion-java` 1.10.5. As a workaround, do not load data which originated from an untrusted source or that could have been tampered with."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2021-21290",
            "description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty before version 4.1.59.Final there is a vulnerability on Unix-like systems involving an insecure temp file. When netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. On unix-like systems, the temporary directory is shared between all user. As such, writing to this directory using APIs that do not explicitly set the file/directory permissions can lead to information disclosure. Of note, this does not impact modern MacOS Operating Systems. The method \"File.createTempFile\" on unix-like systems creates a random file, but, by default will create this file with the permissions \"-rw-r--r--\". Thus, if sensitive information is written to this file, other local users can read this information. This is the case in netty's \"AbstractDiskHttpData\" is vulnerable. This has been fixed in version 4.1.59.Final. As a workaround, one may specify your own \"java.io.tmpdir\" when you start the JVM or use \"DefaultHttpDataFactory.setBaseDir(...)\" to set the directory to something that is only readable by the current user."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2021-21295",
            "description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty (io.netty:netty-codec-http2) before version 4.1.60.Final there is a vulnerability that enables request smuggling. If a Content-Length header is present in the original HTTP/2 request, the field is not validated by `Http2MultiplexHandler` as it is propagated up. This is fine as long as the request is not proxied through as HTTP/1.1. If the request comes in as an HTTP/2 stream, gets converted into the HTTP/1.1 domain objects (`HttpRequest`, `HttpContent`, etc.) via `Http2StreamFrameToHttpObjectCodec `and then sent up to the child channel's pipeline and proxied through a remote peer as HTTP/1.1 this may result in request smuggling. In a proxy case, users may assume the content-length is validated somehow, which is not the case. If the request is forwarded to a backend channel that is a HTTP/1.1 connection, the Content-Length now has meaning and needs to be checked. An attacker can smuggle requests inside the body as it gets downgraded from HTTP/2 to HTTP/1.1. For an example attack refer to the linked GitHub Advisory. Users are only affected if all of this is true: `HTTP2MultiplexCodec` or `Http2FrameCodec` is used, `Http2StreamFrameToHttpObjectCodec` is used to convert to HTTP/1.1 objects, and these HTTP/1.1 objects are forwarded to another remote peer. This has been patched in 4.1.60.Final As a workaround, the user can do the validation by themselves by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2021-37136",
            "description": "The Bzip2 decompression decoder function doesn't allow setting size restrictions on the decompressed output data (which affects the allocation size used during decompression). All users of Bzip2Decoder are affected. The malicious input can trigger an OOME and so a DoS attack"
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2021-37137",
            "description": "The Snappy frame decoder function doesn't restrict the chunk length which may lead to excessive memory usage. Beside this it also may buffer reserved skippable chunks until the whole chunk was received which may lead to excessive memory usage as well. This vulnerability can be triggered by supplying malicious input that decompresses to a very big size (via a network stream or a file) or by sending a huge skippable chunk."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2021-43797",
            "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. Netty prior to version 4.1.71.Final skips control chars when they are present at the beginning / end of the header name. It should instead fail fast as these are not allowed by the spec and could lead to HTTP request smuggling. Failing to do the validation might cause netty to \"sanitize\" header names before it forward these to another remote system when used as proxy. This remote system can't see the invalid usage anymore, and therefore does not do the validation itself. Users should upgrade to version 4.1.71.Final."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2022-41881",
            "description": "Netty project is an event-driven asynchronous network application framework. In versions prior to 4.1.86.Final, a StackOverflowError can be raised when parsing a malformed crafted message due to an infinite recursion. This issue is patched in version 4.1.86.Final. There is no workaround, except using a custom HaProxyMessageDecoder."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2022-41915",
            "description": "Netty project is an event-driven asynchronous network application framework. Starting in version 4.1.83.Final and prior to 4.1.86.Final, when calling `DefaultHttpHeadesr.set` with an _iterator_ of values, header value validation was not performed, allowing malicious header values in the iterator to perform HTTP Response Splitting. This issue has been patched in version 4.1.86.Final. Integrators can work around the issue by changing the `DefaultHttpHeaders.set(CharSequence, Iterator<?>)` call, into a `remove()` call, and call `add()` in a loop over the iterator of values."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2023-34462",
            "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. The `SniHandler` can allocate up to 16MB of heap for each channel during the TLS handshake. When the handler or the channel does not have an idle timeout, it can be used to make a TCP server using the `SniHandler` to allocate 16MB of heap. The `SniHandler` class is a handler that waits for the TLS handshake to configure a `SslHandler` according to the indicated server name by the `ClientHello` record. For this matter it allocates a `ByteBuf` using the value defined in the `ClientHello` record. Normally the value of the packet should be smaller than the handshake packet but there are not checks done here and the way the code is written, it is possible to craft a packet that makes the `SslClientHelloHandler`. This vulnerability has been fixed in version 4.1.94.Final."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2024-29025",
            "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2024-47535",
            "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. An unsafe reading of environment file could potentially cause a denial of service in Netty. When loaded on an Windows application, Netty attempts to load a file that does not exist. If an attacker creates such a large file, the Netty application crashes. This vulnerability is fixed in 4.1.115."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2020-27216",
            "description": "In Eclipse Jetty versions 1.0 thru 9.4.32.v20200930, 10.0.0.alpha1 thru 10.0.0.beta2, and 11.0.0.alpha1 thru 11.0.0.beta2O, on Unix like systems, the system's temporary directory is shared between all users on that system. A collocated user can observe the process of creating a temporary sub directory in the shared temporary directory and race to complete the creation of the temporary subdirectory. If the attacker wins the race then they will have read and write permission to the subdirectory used to unpack web applications, including their WEB-INF/lib jar files and JSP files. If any code is ever executed out of this temporary directory, this can lead to a local privilege escalation vulnerability."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2021-28169",
            "description": "For Eclipse Jetty versions <= 9.4.40, <= 10.0.2, <= 11.0.2, it is possible for requests to the ConcatServlet with a doubly encoded path to access protected resources within the WEB-INF directory. For example a request to `/concat?/%2557EB-INF/web.xml` can retrieve the web.xml file. This can reveal sensitive information regarding the implementation of a web application."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2023-36479",
            "description": "Eclipse Jetty Canonical Repository is the canonical repository for the Jetty project. Users of the CgiServlet with a very specific command structure may have the wrong command executed. If a user sends a request to a org.eclipse.jetty.servlets.CGI Servlet for a binary with a space in its name, the servlet will escape the command by wrapping it in quotation marks. This wrapped command, plus an optional command prefix, will then be executed through a call to Runtime.exec. If the original binary name provided by the user contains a quotation mark followed by a space, the resulting command line will contain multiple tokens instead of one. This issue was patched in version 9.4.52, 10.0.16, 11.0.16 and 12.0.0-beta2.\n"
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2024-6762",
            "description": "Jetty PushSessionCacheFilter can be exploited by unauthenticated users \nto launch remote DoS attacks by exhausting the server\u2019s memory."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2024-9823",
            "description": "There exists a security vulnerability in Jetty's DosFilter which can be exploited by unauthorized users to cause remote denial-of-service (DoS) attack on the server using DosFilter. By repeatedly sending crafted requests, attackers can trigger OutofMemory errors and exhaust the server's memory finally."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2023-26048",
            "description": "Jetty is a java based web server and servlet engine. In affected versions servlets with multipart support (e.g. annotated with `@MultipartConfig`) that call `HttpServletRequest.getParameter()` or `HttpServletRequest.getParts()` may cause `OutOfMemoryError` when the client sends a multipart request with a part that has a name but no filename and very large content. This happens even with the default settings of `fileSizeThreshold=0` which should stream the whole part content to disk. An attacker client may send a large multipart request and cause the server to throw `OutOfMemoryError`. However, the server may be able to recover after the `OutOfMemoryError` and continue its service -- although it may take some time. This issue has been patched in versions 9.4.51, 10.0.14, and 11.0.14. Users are advised to upgrade. Users unable to upgrade may set the multipart parameter `maxRequestSize` which must be set to a non-negative value, so the whole multipart content is limited (although still read into memory)."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2021-28165",
            "description": "In Eclipse Jetty 7.2.2 to 9.4.38, 10.0.0.alpha0 to 10.0.1, and 11.0.0.alpha0 to 11.0.1, CPU usage can reach 100% upon receiving a large invalid TLS frame."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2020-27218",
            "description": "In Eclipse Jetty version 9.4.0.RC0 to 9.4.34.v20201102, 10.0.0.alpha0 to 10.0.0.beta2, and 11.0.0.alpha0 to 11.0.0.beta2, if GZIP request body inflation is enabled and requests from different clients are multiplexed onto a single connection, and if an attacker can send a request with a body that is received entirely but not consumed by the application, then a subsequent request on the same connection will see that body prepended to its body. The attacker will not see any data but may inject data into the body of the subsequent request."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2021-34428",
            "description": "For Eclipse Jetty versions <= 9.4.40, <= 10.0.2, <= 11.0.2, if an exception is thrown from the SessionListener#sessionDestroyed() method, then the session ID is not invalidated in the session ID manager. On deployments with clustered sessions and multiple contexts this can result in a session not being invalidated. This can result in an application used on a shared computer being left logged in."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2022-2047",
            "description": "In Eclipse Jetty versions 9.4.0 thru 9.4.46, and 10.0.0 thru 10.0.9, and 11.0.0 thru 11.0.9 versions, the parsing of the authority segment of an http scheme URI, the Jetty HttpURI class improperly detects an invalid input as a hostname. This can lead to failures in a Proxy scenario."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2023-26049",
            "description": "Jetty is a java based web server and servlet engine. Nonstandard cookie parsing in Jetty may allow an attacker to smuggle cookies within other cookies, or otherwise perform unintended behavior by tampering with the cookie parsing mechanism. If Jetty sees a cookie VALUE that starts with `\"` (double quote), it will continue to read the cookie string until it sees a closing quote -- even if a semicolon is encountered. So, a cookie header such as: `DISPLAY_LANGUAGE=\"b; JSESSIONID=1337; c=d\"` will be parsed as one cookie, with the name DISPLAY_LANGUAGE and a value of b; JSESSIONID=1337; c=d instead of 3 separate cookies. This has security implications because if, say, JSESSIONID is an HttpOnly cookie, and the DISPLAY_LANGUAGE cookie value is rendered on the page, an attacker can smuggle the JSESSIONID cookie into the DISPLAY_LANGUAGE cookie and thereby exfiltrate it. This is significant when an intermediary is enacting some policy based on cookies, so a smuggled cookie can bypass that policy yet still be seen by the Jetty server or its logging system. This issue has been addressed in versions 9.4.51, 10.0.14, 11.0.14, and 12.0.0.beta0 and users are advised to upgrade. There are no known workarounds for this issue."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2024-8184",
            "description": "There exists a security vulnerability in Jetty's ThreadLimitHandler.getRemote() which can be exploited by unauthorized users to cause remote denial-of-service (DoS) attack.  By repeatedly sending crafted requests, attackers can trigger OutofMemory errors and exhaust the server's memory."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2020-27223",
            "description": "In Eclipse Jetty 9.4.6.v20170531 to 9.4.36.v20210114 (inclusive), 10.0.0, and 11.0.0 when Jetty handles a request containing multiple Accept headers with a large number of \u201cquality\u201d (i.e. q) parameters, the server may enter a denial of service (DoS) state due to high CPU usage processing those quality values, resulting in minutes of CPU time exhausted processing those quality values."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2023-40167",
            "description": "Jetty is a Java based web server and servlet engine. Prior to versions 9.4.52, 10.0.16, 11.0.16, and 12.0.1, Jetty accepts the `+` character proceeding the content-length value in a HTTP/1 header field.  This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses.  There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response. Versions 9.4.52, 10.0.16, 11.0.16, and 12.0.1 contain a patch for this issue. There is no workaround as there is no known exploit scenario."
        },
        {
            "displayName": "amplify-dynamodb-simulator : 2.2.9",
            "cve": "CVE-2024-6763",
            "description": "Eclipse Jetty is a lightweight, highly scalable, Java-based web server and Servlet engine . It includes a utility class, HttpURI, for URI/URL parsing.\n\nThe HttpURI class does insufficient validation on the authority segment of a URI.  However the behaviour of HttpURI\n differs from the common browsers in how it handles a URI that would be \nconsidered invalid if fully validated against the RRC.  Specifically HttpURI\n and the browser may differ on the value of the host extracted from an \ninvalid URI and thus a combination of Jetty and a vulnerable browser may\n be vulnerable to a open redirect attack or to a SSRF attack if the URI \nis used after passing validation checks."
        },
        {
            "displayName": "minimist : 0.0.10",
            "cve": "CVE-2020-7598",
            "description": "minimist before 1.2.2 could be tricked into adding or modifying properties of Object.prototype using a \"constructor\" or \"__proto__\" payload."
        }
    ],
    "TotalAdvisories": 97,
    "UniqueAdvisories": 49,
    "Advisories": [
        {
            "cve": "CVE-2023-34149",
            "advisory": "The Apache `struts2-core` package is vulnerable to a Denial of Service (DoS) attack. The `getProperty()` method in the `XWorkListPropertyAccessor` class does not properly check the bounds of the collection index against the collection limit. A remote attacker can exploit this behavior to trigger an out of memory condition, ultimately resulting in a DoS condition.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team discovered that this vulnerability was actually introduced in version `2.5-BETA1` instead of all earlier versions being vulnerable as stated in the advisory."
        },
        {
            "cve": "CVE-2023-24998",
            "advisory": "The Apache Commons FileUpload `commons-fileupload` package and the `tomcat-coyote` package are vulnerable to Denial of Service (DoS) attacks. The `parseRequest` function in the `FileUploadBase.class` file in each package does not enforce a maximum number of files that can be included in a single upload request. An attacker can exploit this flaw to potentially trigger an application crash or slowdowns, resulting in DoS.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team discovered that this vulnerability was actually introduced in version 7.0.0 of `tomcat-coyote` instead of 8.5.0 as stated in the advisory. In addition, it was found that this vulnerability affected the 10.x branch of `tomcat-coyote` from 10.0.0-M1 and not 10.1.0-M1 as stated in the advisory."
        },
        {
            "cve": "CVE-2019-11358",
            "advisory": "The `jquery` package is vulnerable to Prototype Pollution. The `jQuery.extend` and `jQuery.fn.extend` functions defined in many files allow an untrusted object to extend `Object.prototype`. An attacker can modify and add prototype properties to JavaScript objects and can potentially leverage those changes to crash the application or execute remote code.\n\n*Advisory Deviation Notice:* The Sonatype security research team has assessed the CVSS score for this vulnerability to be 7.5 given the nature of prototype pollution and the high impact to data integrity, as opposed to a score of 6.1 reported by [NVD](https://nvd.nist.gov/vuln/detail/CVE-2019-11358)."
        },
        {
            "cve": "CVE-2020-23064",
            "advisory": "The `jQuery` package is vulnerable to Cross-site Scripting (XSS). The `htmlPrefilter` function in the `manipulation.js` file improperly handles edge cases when closing HTML tags to ensure they are XHTML-compliant. A remote attacker can exploit this vulnerability by sending an XSS payload prefixed by a specially crafted HTML tag. The `htmlPrefliter` function will close the input tag excluding the XSS payload. This allows the XSS payload to be injected into the DOM of the webpage, resulting in its execution.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version `1.4.1` and not `2.2.0` as stated in the advisory."
        },
        {
            "cve": "CVE-2018-10237",
            "advisory": "Guava is vulnerable to Denial of Service (DoS). When untrusted input is supplied to the `AtomicDoubleArray` and `CompoundOrdering` classes, it is possible for an attacker to specify a large integer number as part of that untrusted input.  This untrusted integer `n` is used to allocate an array of length `n`.  Thus with large values of `n`, it is possible to cause an application to run out of memory.\n\nAdvisory Deviation Notice: The Sonatype security research team discovered that the fix for this vulnerability was actually introduced in version 23.6.1 for 23.6.x instead of 24.1.1 as stated in https://nvd.nist.gov/vuln/detail/CVE-2018-10237"
        },
        {
            "cve": "CVE-2018-18074",
            "advisory": "The `requests` package is vulnerable to Information Disclosure. The `resolve_redirects()` function in the `session.py` file fails to strip the `Authorization` header from requests that redirect from https to http on the same host. A remote attacker can exploit this vulnerability by performing a Man-in-the-Middle (MitM) attack to capture this redirect request and exfiltrate plaintext credential information from an unsuspecting victim.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability was introduced in version 1.0.0 and is not present in all versions prior to 2.20.0 as stated in the advisory."
        },
        {
            "cve": "CVE-2018-20060",
            "advisory": "The urllib3 package is vulnerable to Information Exposure. The `urlopen` function in `poolmanager.py` redirects a request from the current host to another host if necessary. The function does not remove the Authorization HTTP header before redirecting the request. The Authorization header may contain credentials that should not be exposed to an untrusted host. The redirect may also be unencrypted, exposing a user's credentials to an attacker listening for the request.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present in version 1.5 until 1.23, not all versions before 1.23 as the advisory states."
        },
        {
            "cve": "CVE-2019-11236",
            "advisory": "The `urllib3` package is vulnerable to CRLF Injection. The `parse_url()` function in the `url.py` file does not properly escape Carriage Return and Line Feed (CRLF) characters when parsing URLs. A remote attacker with control of the requesting address parameter (`request`) can exploit this vulnerability with a maliciously crafted request containing CRLF characters within the query string. This will effectively give the attacker control of the response body, which may then be used to perform various other attacks.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that [a comprehensive and proper fix](https://github.com/urllib3/urllib3/commit/0aa3e24fcd75f1bb59ab159e9f8adb44055b2271#diff-c289049c6f3c9d7397378a8be7e700c6R168) for this vulnerability has been implemented in `urllib3` versions 1.25 and above, as present in PyPI downloads. This fix implements the requirements for URLs as imposed by RFC 8936.\n\nA separate [fix](https://github.com/urllib3/urllib3/pull/1593) pushed into version 1.24.3 and mentioned in the GitHub advisory, is mainly intended to resolve CVE-2019-9740 and according to the developer may, also in effect, resolve CVE-2019-11236. Such a suggestion however, should only be accepted at your discretion."
        },
        {
            "cve": "CVE-2019-8324",
            "advisory": "The `rubygems-update` package is vulnerable to Remote Code Execution (RCE). The `pre_install_checks()` function in the `installer.rb` file fails to properly validate gem names before performing `ensure_loadable_spec` which, consequently, executes any arbitrary code within a given malicious multiline gem name during the preinstall check. A remote attacker can exploit this vulnerability by crafting and publishing a gem using a multiline gem name containing malicious code. The attacker can then entice a victim into installing the malicious gem, resulting in RCE when the preinstall check is performed.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version 2.0.0.rc.1 and not 2.6 as stated in the advisory."
        },
        {
            "cve": "CVE-2024-27281",
            "advisory": "The `rdoc` Ruby gem is vulnerable due to the Deserialization of Untrusted Data leading to Remote Code Execution (RCE). Several functions from the `store.rb` file, as listed below, fail to restrict insecure classes from being loaded and consequently allow for object injection. An attacker can exploit this vulnerability by supplying a maliciously crafted YAML configuration file to one of the affected functions. This will result in insecure deserialization and ultimately RCE. \n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version 2.5 instead of 6.3.0 as stated in the advisory.\n\n***Vulnerable File(s) and Function(s)***:\n\n- **gem : rdoc**\n  - data.tar.gz!lib/rdoc/store.rb\n    - `load_cache()`\n    - `klass_name()`\n    - `method_name()`\n    - `page_name()`"
        },
        {
            "cve": "CVE-2021-21330",
            "advisory": "The `aiohttp` package is vulnerable to Open Redirect attacks. The `impl()` function in the `web_middlewares.py` file fails to sanitize user-supplied URLs of certain `//` character sequences before redirecting requests. A remote attacker can exploit this vulnerability to redirect users to malicious domains by enticing them to submit a request that leverages the aforementioned characters.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version 1.3.0 and therefore does not affect all versions before 3.7.4 as stated in the advisory."
        },
        {
            "cve": "CVE-2023-47627",
            "advisory": "The `aiohttp` package is vulnerable to HTTP Request/Response Smuggling attacks. The `parse_headers()`, `get_content_length()`, `parse_message()`, and `feed_data()` functions in the `http_parser.py` file do not:\n1. enforce that `Content-Length` values consist only of ASCII characters per the RFC 9110 standard. \n2. reject messages with the NULL, Carriage Return (CR), and Line Feed (LF) characters in the header value per the RFC 9110 standard. \n3. reject all messages with whitespace before a colon in a header field per the RFC 9112 standard.\n\nA remote attacker can exploit this vulnerability by supplying specially crafted header values that leverage the aforementioned behaviors, causing the HTTP parser to misinterpret HTTP requests sent to an affected application using `aiohttp` as its client/server framework.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team discovered that this vulnerability also exists in the 4.x branch and has not been fixed in this range yet."
        },
        {
            "cve": "CVE-2023-49081",
            "advisory": "The `aiohttp` package is vulnerable to request smuggling due to a CRLF Injection. The `send()` function in the `client_reqrep.py` file does not properly validate the user-supplied HTTP `version` parameter before using it to create a request. A remote attacker who is able to control the HTTP version and type of the request can leverage this vulnerability to inject arbitrary sequence types into the header via the `version` parameter. This would allow the attacker to modify or potentially create a new HTTP request.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team discovered that this vulnerability was actually introduced in version `2.0.0rc1` instead of affecting all earlier versions as stated in the advisory. The fix for it has been introduced in version `3.9.0rc0` instead of `3.9.0`. Additionally, the vulnerability also affects the 4.x range and is yet to be fixed in this range."
        },
        {
            "cve": "CVE-2023-49082",
            "advisory": "The `aiohttp` package is vulnerable to HTTP Request Splitting attacks. The `parse_headers()` and `parse_message()` functions in the `http_parser.py` file and the ` __init__()` function in the `client_reqrep.py` do not properly check for CRLF characters ('\\n', '\\r') or special characters used to separate the lines within request methods or headers. A remote attacker can exploit this vulnerability by crafting a request with a `method` or `content` containing CRLF characters, which may be leveraged to inject multiple requests at the same time.\n\n*Advisory Deviation Notice:*\nThe Sonatype Security Research team discovered that the fix for this vulnerability was actually introduced in version 3.9.0b1 instead of 3.9.0 as stated in the advisory."
        },
        {
            "cve": "CVE-2024-23334",
            "advisory": "The `aiohttp` package is vulnerable to Path Traversal attacks. The `url_for()` and `_handle()` methods of the `StaticResource` class in `web_urldispatcher.py` unsafely skip path validations on static routes configured with `follow_symlinks` set to `True`. This allows malicious actors to request non-symlink files located outside the intended folder. A remote attacker can exploit this vulnerability by sending specially crafted requests using traversal character sequences, such as `../`, to read arbitrary files on the system.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was actually introduced in version 1.1.0, by adding support to follow symlinks, instead of 1.0.5 as stated in the advisory."
        },
        {
            "cve": "CVE-2024-27306",
            "advisory": "The `aiohttp` package contains a Cross-Site-Scripting (XSS) vulnerability. The `_directory_as_html()` function of the `StaticResource` class in the `web_urldispatcher.py` file does not properly escape special characters in the filenames during the index renderization of static pages. A remote attacker can exploit this vulnerability by uploading a file containing JavaScript code in its filename to cause the `web_static` function to incorrectly interpret the filename as a valid JavaScript payload, leading to the arbitrary execution of code in the context of the user's browser when the index page is rendered.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was actually introduced in version `1.0.0` and does not affect all versions before `3.9.4` as stated in the advisory."
        },
        {
            "cve": "CVE-2024-30251",
            "advisory": "The `aiohttp` package is vulnerable to Denial of Service (DoS) attacks due to the presence of an Infinite Loop. The methods in the `multipart.py` file listed below fail to properly handle the boundaries between different parts of multipart content and the encoding of these parts. A remote attacker can exploit this vulnerability by sending a specially crafted POST request with malformed multipart content. When an affected server attempts to parse this request, it may enter an infinite loop that prevents it from processing further requests, ultimately causing a DoS condition.\n\n***Vulnerable File(s) and Function(s)***:\n - `BodyPartReader::__init__()`\n- `BodyPartReader::_read_chunk_from_length()`\n- `BodyPartReader::decode()`\n- `BodyPartReader::get_charset()`\n- `MultipartReader::__init__()`\n- `MultipartReader::next()`\n- `MultipartReader::_get_part_reader()`\n- `MultipartReader::_get_boundary():`\n- `MultipartWriter::__init__():`\n- `MultipartWriter::append_payload():`\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was actually introduced in version `0.15.0` and therefore does not affect all versions prior to `3.9.4` as stated in the advisory."
        },
        {
            "cve": "CVE-2024-52304",
            "advisory": "The `aiohttp` package is vulnerable to CRLF Injection attacks. The `feed_data()` function in the `http_parser.py` file fails to account for line feed (`\\n`) characters in headers of requests with chunked payloads. A remote attacker can exploit this vulnerability to smuggle additional requests by submitting requests containing crafted `Transfer-Encoding` header values. Such requests may be leveraged to poison the web cache, bypass firewall protections, or induce other unexpected behavior in affected applications.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version `2.0.0rc1` and does not affect all versions before `3.10.11` as stated in the advisory. Additionally, the team discovered that this vulnerability affects 3.11.x versions before `3.11.0` and all 4.0.x versions."
        },
        {
            "cve": "CVE-2021-28165",
            "advisory": "The `jetty-io` package is vulnerable to Denial of Service (DoS) attacks. The `fill()` method in the `SslConnection$DecryptedEndPoint` class mishandles the buffer used to read TLS frame data. A remote attacker can exploit this vulnerability by submitting an overlarge message (>17408 bytes) over TLS which, when processed, may cause the application to enter an infinite loop resulting in a DoS condition.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version 7.6.0.M0 and not 7.2.2 as stated in the advisory."
        },
        {
            "cve": "CVE-2018-8088",
            "advisory": "The `slf4j` package is vulnerable to Remote Code Execution.  By supplying a serializable Java object to the application, the attacker can gain code execution on the server.  This allows the attacker to execute further code or operating system commands in the context of the Java process.\n\n*Advisory Deviation Notice:* Contrary to what the NVD advisory implies, the Sonatype security research team discovered that the vulnerable class `EventData` is not present in versions 1.7.26 to 1.7.30 (inclusive) of Maven Central component `org.slf4j:slf4j-ext`. As such,  these versions of the component should not be considered vulnerable."
        },
        {
            "cve": "CVE-2020-27216",
            "advisory": "The `jetty-webapp` package is vulnerable to Creation of Temporary File With Insecure Permissions. The `cloneConfigure` and `makeTempDirectory` methods in `WebInfConfiguration.class` create temporary files that may be visible to other users on a system. An attacker with access to the filesystem could potentially access the shared locations to tamper with the files, escalate privileges, or execute arbitrary code.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in 7.0.0.M3, not in 1.0 as the [NVD advisory](https://nvd.nist.gov/vuln/detail/CVE-2020-27216) states."
        },
        {
            "cve": "CVE-2020-13091",
            "advisory": "The `pandas` package contains a vector for the deserialization of untrusted data. The `read_pickle()` function in `pickle.py` will deserialize any arbitrary data in a way that will be executed during the deserialization process. Consequently, an attacker who is able to supply a pickle file to an application using this library could execute arbitrary code utilizing the applications privileges.\n\n***Advisory Deviation Notice:***\nThe unsafe deserialization functionality is considered a legitimate use case for pandas. As such, this attack vector is viable for all versions of pandas and not just version 1.0.3 and earlier, as implied by this CVE's associated advisories."
        },
        {
            "cve": "CVE-2024-9880",
            "advisory": "The `pandas` package is vulnerable to Code Injection. The `query()` function in the `frame.py` file allows for querying columns of a DataFrame via a boolean expression. An attacker can, however, exploit this feature by constructing a malicious query, to potentially bypass validation mechanisms and achieve arbitrary command execution on a system running `pandas`.\n\nBoth the proof-of-concept (PoC) exploit and the subsequent discussion in the [vulnerability report](https://huntr.com/bounties/a49baae1-4652-4d6c-a179-313c21c41a8d) describe real world scenario(s) applicable to and the impact of the vulnerability.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version 0.13.0rc1 (for GitHub) and in v0.13.0 (for PyPI and golang registries), and does not affect prior versions, contrary to what the [advisory](https://huntr.com/bounties/a49baae1-4652-4d6c-a179-313c21c41a8d) implies (i.e. \"Affected Version <=v2.2.2\"). Additionally, at the time of Deep Dive research a fixed version is not available and versions >2.2.2 remain affected."
        },
        {
            "cve": "CVE-2020-27218",
            "advisory": "The `jetty-server` package contains a Sensitive Information in Resource Not Removed Before Reuse vulnerability. Various functions in several files, as mentioned below, fail to add a `Connection: close` header to any response where the request content is completely received but not fully consumed. An attacker can exploit this with a malformed request that is not fully consumed, after which the subsequent request on the same connection will have the body of the previous request prepended to its body, thus altering the request and potentially leading to a Denial of Service (DoS).\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability was introduced in version 9.4.0.RC1 and not 9.4.0.RC0 as the advisory states. Additionally, the fix for this vulnerability was actually introduced in versions 9.4.35.v20201120, 10.0.0, and 11.0.0 instead of 9.4.35.v20201120, 10.0.0.beta3, and 11.0.0.beta3 as also stated in the advisory.\n\n*Vulnerable File(s) and Function(s)*:\n\norg/eclipse/jetty/server/HttpChannel.class\n* handle()\n\norg/eclipse/jetty/server/HttpChannel.class\n* handle()\n\norg/eclipse/jetty/server/HttpChannel.class\n* handle()\n\norg/eclipse/jetty/server/HttpConnection.class\n* onCompleted()\n\norg/eclipse/jetty/server/HttpConnection.class\n* onCompleted()\n\norg/eclipse/jetty/server/HttpConnection.class\n* onCompleted()\n\norg/eclipse/jetty/server/HttpInput.class\n* recycle()\n\norg/eclipse/jetty/server/HttpInput.class\n* recycle()\n\norg/eclipse/jetty/server/HttpInput.class\n* recycle()\n\norg/eclipse/jetty/server/handler/gzip/GzipHttpInputInterceptor.class\n* readFrom()\n\norg/eclipse/jetty/server/handler/gzip/GzipHttpInputInterceptor.class\n* readFrom()\n\norg/eclipse/jetty/server/handler/gzip/GzipHttpInputInterceptor.class\n* readFrom()\n\norg/eclipse/jetty/server/Response.class\n* sendRedirect()\n\norg/eclipse/jetty/server/Response.class\n* sendRedirect()\n\norg/eclipse/jetty/server/Response.class\n* sendRedirect()"
        },
        {
            "cve": "CVE-2021-34428",
            "advisory": "The `jetty-server` package is vulnerable to Insufficient Session Expiration. The `invalidate` and `getLastAccessedTime` methods in `Session.class` do not properly handle thrown exceptions, preventing sessions from being invalidated and failing to log out. An attacker can exploit this in the context of a larger attack where the application throws such exceptions and keeping the session from being invalidated is beneficial to the attack.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version 9.4.15.v20190215 and therefore does not affect all versions before 9.4.40 as stated in the advisory."
        },
        {
            "cve": "CVE-2023-26049",
            "advisory": "The `jetty-server` and `jetty-http` packages are vulnerable to Information Disclosure. The `parseFields()` method in the `CookieCutter` class in both packages mishandles cookies that contain an unterminated double quote. An attacker who is able to assign a cookie to another user can exploit this vulnerability by injecting a cookie with a value beginning with a double quote that is never closed. When the victim's cookies are processed by the `jetty` server, the cookies can be incorrectly concatenated, potentially resulting in one cookie being smuggled inside another. Depending on how the application utilizes the values of the affected cookies, this could allow an attacker exfiltrate sensitive cookie values, even in cases where the `HttpOnly` flag is set, or to cause other unintended application behavior resulting from cookie malformation.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team discovered that this vulnerability was introduced into the `jetty-server` package in version 7.0.0.M0 and was resolved in version 9.4.51.v20230217, and that the vulnerable code was relocated to the `jetty-http` package in the 10.x, 11.x, and 12.x branches. As such, the 10.x, 11.x, and 12.x of the `jetty-server` package are not affected, contrary to what is stated in the advisory. In addition, the team has created a CVSS score that differs from the publicly available score that, based on our research, more accurately reflects the severity of the vulnerability."
        },
        {
            "cve": "CVE-2023-40167",
            "advisory": "The `org.eclipse.jetty:jetty-http` package is vulnerable to Improper Handling of Length Parameter Inconsistency. The `convertContentLength()` function within `HttpParser.class` does not enforce that each character of the `Content-Length` HTTP header value be strictly numeric. This can allow an attacker to provide invalid HTTP header values (e.g. `+16` for `Content-Length`) that may be accepted by Jetty unchecked but possibly be rejected by any other servers being used in combination with Jetty. A potential Denial of Service (DoS) scenario could occur if this causes connections to remain open in between servers despite an HTTP 400 (Bad Request) response having been thrown.\n\n*Advisory Deviation Notice:* Contrary to what the [advisory](https://github.com/advisories/GHSA-hmr7-m48g-48f6) implies, Jetty versions prior to 9.0.0 do not enforce `Content-Length` HTTP header values to be strictly numeric either. The Sonatype Security Research team therefore deems these earlier versions also vulnerable and recommends upgrading to one or more fixed versions (or higher)."
        },
        {
            "cve": "CVE-2018-20676",
            "advisory": "The `bootstrap` package is vulnerable to Cross-Site Scripting (XSS). The `Tooltip.prototype.init()` function in the `tooltip.js' file does not properly sanitize values for the `data-viewport` attribute, allowing for scripts/HTML. A remote attacker can exploit this by injecting malicious HTML/JavaScript in the `data-viewport` attribute of a tooltip that would then be executed upon hovering the mouse over the tooltip.\n\n*Advisory Deviation Notice:* The Sonatype security research team has discovered that the vulnerability is present beginning from version 3.2.0 and not all versions before 3.4.0 as the advisory states."
        },
        {
            "cve": "CVE-2018-20677",
            "advisory": "The `bootstrap` package is vulnerable to Cross-Site Scripting (XSS). The `Affix()` function in the `affix.js` file allows scripts/HTML data via the `target` attribute that is stored in DOM elements without properly being sanitized. A remote attacker can exploit this by injecting malicious HTML/JavaScript code in the `target` attribute of `affix` and entice a victim to click on it, triggering the XSS.\n\n*Advisory Deviation Notice:* The Sonatype security research team has discovered that the vulnerability is present from version 3.2.0 until 3.4.0, and not all versions before 3.4.0 as the advisory states."
        },
        {
            "cve": "CVE-2019-8331",
            "advisory": "The `bootstrap` package is vulnerable to Cross-Site Scripting (XSS). The `setElementContent` method in the `tooltip.js` file accepts JavaScript within the input parameters without properly sanitizing the data in the elements that are being rendered on the webpage. This could lead to Cross-Site Scripting (XSS).\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in 4.0.0-alpha.2, not in 4.3.0 as the advisory states.\n"
        },
        {
            "cve": "CVE-2024-6484",
            "advisory": "The `bootstrap` package is vulnerable to Cross-Site Scripting (XSS) attacks. The `_dataApiClickHandler()` function in the `carousel.js` file mishandles Carousel controls defined by anchor (`<a>`) elements that link to invalid or missing targets. In such cases, the function returns before `event.preventDefault()` is invoked, leaving the `href` attribute to be evaluated without sanitization. A remote attacker who can define or influence the ID or `data-slide` attributes of affected Carousel components can exploit this vulnerability to inject malicious JavaScript. Interacting with the affected Carousel's navigation controls will result in script execution in victims' browsers.\n\n**Note:** The Sonatype Security Research team **disputes** this vulnerability and is providing data on it for informational purposes. We anticipate most users will waive this vulnerability given that the `carousel` component of `bootstrap` is not actually vulnerable.\n\nOur basis is that, the proof of concept (PoC) provided in the advisory is not proof of a vulnerability in Bootstrap.  The PoC contains `<a>` tags with javascript in the `href` attribute.  Upon clicking the link, the script will execute whether Bootstrap is involved or not. Upon removing the <script> tag that loads Bootstrap, the scripts will still execute.  The PoC's own code contains the vulnerability.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability affects all 4.x and 5.x versions and not only those leading up to and including `3.4.1`."
        },
        {
            "cve": "sonatype-2016-0133",
            "advisory": "The `jquery` package is vulnerable to Denial of Service (DoS). The `jQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g )` function in the `attr.js` file lacks the logic to convert the attribute name into lowercase. Any attribute getter using a mixed-cased name for the boolean attributes goes into infinite recursion, exceeding the stack call limit. This causes Denial of Service (DoS). \n\nNote: This vulnerability has been assigned CVE-2016-10707.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version `1.11.0-beta3` and not `3.0.0-rc1` as stated in the advisory. This finding coincides with [issues](https://github.com/jquery/jquery/issues/3371) reported against versions `2.2.4` and `1.12.14` and [confirmed by jQuery maintainers](https://github.com/jquery/jquery/issues/3371#issuecomment-255441041) several months after this vulnerability's initial publication."
        },
        {
            "cve": "CVE-2023-36479",
            "advisory": "The `jetty-servlets`, `jetty-ee9-servlets`, and `jetty-ee10-servlets` packages are vulnerable to Argument Injection due to Improper Neutralization of Quoting Syntax. The `exec()` method of the `CGI` class mishandles the quoting of user-supplied filenames of binaries that are subsequently launched by Java's `Runtime.exec()`. A remote attacker can exploit this vulnerability with requests to binary locations on servers whose `cgi-bin` directory includes subdirectories with names that are suffixed by double-quotation characters. This may result in existing binaries executing with additional arguments that may induce unexpected behavior in affected applications.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was first addressed in version `12.0.0.beta1` of 12.x and not `12.0.0-beta2` as stated in the advisory."
        },
        {
            "cve": "CVE-2024-6762",
            "advisory": "The `jetty-servlets`, `jetty-ee10-servlets`, `jetty-ee9-servlets`, and `jetty-ee8-servlets` packages are vulnerable to Denial of Service (DoS) attacks. The `doFilter()` methods of the `PushSessionCacheFilter` and `PushCacheFilter` classes mishandle the timely disposal of unauthenticated sessions associated with incoming requests. A remote attacker can exploit this vulnerability by initiating many unauthenticated sessions with requests to endpoints configured to be filtered. This may crash affected applications with `OutOfMemory` exceptions as the session objects persist and eventually consume all available resources.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version `9.3.0.M0` and not `10.0.0` as stated in the advisory. Additionally, the team found that this vulnerability was first addressed in version `12.0.3` of 12.0.x, not `12.0.4`."
        },
        {
            "cve": "CVE-2024-9823",
            "advisory": "The `jetty-servlets`, `jetty-ee10-servlets`, `jetty-ee9-servlets`, and `jetty-ee8-servlets` packages are vulnerable to Denial of Service (DoS) attacks. The `getRateTracker()` method of the `DoSFilter` class fails to schedule the removal of `RateTracker` entries associated with types other than `USER_IP` and `USER_SESSION`, such as `USER_AUTH`. Consequently, `RateTracker` instances created to collect and track metrics from requesting clients may persist in memory throughout the application's lifetime. A remote attacker can exploit this vulnerability by submitting many crafted requests to create new `RateTracker` entries that may eventually crash affected applications with `OutOfMemory` exceptions.\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was introduced in version `7.0.0.M3` and not `9.0.0` as stated in the advisory."
        },
        {
            "cve": "CVE-2017-7525",
            "advisory": "`jackson-databind` is vulnerable to Remote Code Execution (RCE). The `createBeanDeserializer()` function in the `BeanDeserializerFactory` class allows untrusted Java objects to be deserialized. A remote attacker can exploit this by uploading a malicious serialized object that will result in RCE if the application attempts to deserialize it.\n\nNOTE: This vulnerability is also tracked by the Apache Struts team as [S2-055](https://cwiki.apache.org/confluence/display/WW/S2-055).\n\nNOTE: This CVE is a part of the series of CVEs (e.g. CVE-2017-15095, CVE-2017-17485, CVE-2018-5968, ... [full list](https://www.sonatype.com/blog/jackson-databind-the-end-of-the-blacklist)) that have been, and continue to be released by the Jackson Databind project, for the exact same deserialization vulnerability. To reduce unnecessary noise arising from duplicates and false positives, we have strategically implicated components so that they show the minimal number of CVEs necessary to represent the same vulnerability.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team has created a CVSS score that differs from the publicly available score that, based on our research, more accurately reflects the severity of the vulnerability."
        },
        {
            "cve": "CVE-2020-36518",
            "advisory": "The `jackson-databind` package is vulnerable to a Denial of Service (DoS) attack. The `deserialize()` method in the `UntypedObjectDeserializer` and `UntypedObjectDeserializer$Vanilla` classes fails to restrict recursion when deserializing nested untyped or generic objects. A remote attacker who can supply data to be deserialized by an affected application can exploit this vulnerability to cause the JVM to consume all available memory, resulting in a `StackOverflow` exception and ultimately a DoS condition.\n\n*Advisory Deviation Notice*: The Sonatype security research team has discovered that this vulnerability was fixed in versions 2.13.2.1 and 2.12.6.1 and not 2.13.0 as stated in the advisory."
        },
        {
            "cve": "CVE-2021-37714",
            "advisory": "The `jsoup` is vulnerable due to Uncaught Exception. The `appendTagName` function in the `Token.class` incorrectly processes user input that contains unexpected characters in variable amounts. An attacker could leverage this behavior to crash the application by sending malformed input to the application, which may include multiple null characters.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the vulnerability is present from version 1.6.0 before 1.14.2, not all prior versions to 1.14.2 as the advisory states."
        },
        {
            "cve": "CVE-2021-44228",
            "advisory": "The `log4j-core` package is vulnerable to Deserialization of Untrusted data. The vulnerable methods allow the `JNDI` Java interface to be used to request resources from arbitrary URIs using the `LDAP` and `LDAPS` protocols. This leads to Java objects contained within the resource to be deserialized and processed. Applications that use the `log4j-core` library to log events and utilize application data in log messages may inadvertently allow user input to be included inside their log messages. Remote attackers can leverage this behavior to fetch a malicious resource under their control. This would lead to malicious Java code being deserialized and executed in the context of the vulnerable application and may lead to Remote Code Execution (RCE).\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in `org.apache.logging.log4j:log4j-core`, and is not in `org.apache.logging.log4j:log4j-api` as the GitHub advisory states. The research team has also discovered that the vulnerable code was introduced in version 2.0-beta9 and not all versions before 2.15.0 are vulnerable as the GitHub advisory states. The 1.x branch is not affected by this vulnerability.\n\n*Vulnerable File(s) and Function(s)*:\n\norg/apache/logging/log4j/core/net/JndiManager.class\n* lookup()\n\norg/apache/logging/log4j/core/appender/mom/JmsAppender$Builder.class\n* build()"
        },
        {
            "cve": "CVE-2022-24615",
            "advisory": "The `zip4j` package is vulnerable to a Denial of Service (DoS) attack due to Improper Handling of Exceptional Conditions. The methods in the files listed below fail to handle various exceptions thrown when parsing malformed data. A remote attacker can exploit this vulnerability by supplying an archive to an affected application. Processing this archive will cause the application to crash, resulting in a DoS condition.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability has not yet been patched and therefore all versions are vulnerable.\n\n*Vulnerable File(s) and Function(s)*:\n\nnet/lingala/zip4j/headers/HeaderReader.class\n* readAesExtraDataRecord()\n\nnet/lingala/zip4j/util/RawIO.class\n* readLongLittleEndian()\n* readShortLittleEndian()\n\nnet/lingala/zip4j/model/enums/AesVersion.class\n* getFromVersionNumber()\n\nnet/lingala/zip4j/io/inputstream/AesCipherInputStream.class\n* getSalt()\n\nnet/lingala/zip4j/io/inputstream/ZipEntryInputStream.class\n* readUntilBufferIsFull()\n\nnet/lingala/zip4j/util/Zip4jUtil.class\n* getCompressionMethod()\n* readUntilBufferIsFull()\n\nnet/lingala/zip4j/io/inputstream/ZipInputStream.class\n* isEntryDirectory()\n* getEncryptionHeaderSize()"
        },
        {
            "cve": "CVE-2022-24785",
            "advisory": "The `moment` package is vulnerable to Path Traversal. The `loadLocale()` function in the `locales.js` file fails to sanitize traversal characters from user-supplied locale names before using them to load modules from the file system. A remote attacker who can influence locale names loaded by the affected function can exploit this vulnerability to traverse beyond the intended directory in order to exfiltrate information or cause other unexpected behavior.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version 2.8.0 and not 1.0.1 as stated in the advisory."
        },
        {
            "cve": "CVE-2023-22899",
            "advisory": "The `zip4j` package is vulnerable due to the Missing Support for Integrity Check. The `decryptData()` method in the `AESDecrypter` class and the `update()` method in the `MacBasedPRF` class decrypt and extract ZIP file contents without verifying the Message Authentication Code (MAC). An attacker with read and write permissions to an encrypted ZIP file can overwrite specific bytes to modify the extracted data, jeopardizing the integrity of the information obtained by the victim upon decrypting and extracting the encrypted ZIP archive.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team has created a CVSS score that differs from the publicly available score that, based on our research, more accurately reflects the severity of the vulnerability."
        },
        {
            "cve": "CVE-2022-41881",
            "advisory": "The `netty-codec-haproxy` package is vulnerable to a Denial of Service (DoS) attack. The `readTlvs()` and `readNextTLV()` methods in the `HAProxyMessage` class fail to limit recursion when parsing `PROXY` headers with `PP2_TYPE_SSL` typed Type-Length-Value (TLV) fields. A remote attacker can exploit this vulnerability by submitting a `PROXY` protocol header containing nested `PP2_TYPE_SSL` TLV field values. This will result in a `StackOverflowError` as the server parses the header's fields.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in versions `4.1.12.Final` of 4.1.x and `4.0.48.Final` of 4.0.x and therefore does not affect all versions prior to `4.1.86.Final` as stated in the advisory."
        },
        {
            "cve": "CVE-2022-41915",
            "advisory": "The `netty-codec` package is vulnerable to HTTP Response Splitting attacks. The `setObject()` methods in the `DefaultHeaders` class do not properly validate header values supplied via iterator arguments. A remote attacker can exploit this behavior by injecting arbitrary characters, such as Carriage Return (`\\r`) and Line Feed (`\\n`) (CRLF) into the header value of a request, allowing the attacker to control the body of a HTTP response.\n\n*Advisory Deviation Notice:*\n                        The Sonatype Security Research team discovered that the package affected by this vulnerability is `io.netty:netty-codec` instead of `io.netty.codec:codec-http` as stated in the advisory."
        },
        {
            "cve": "CVE-2023-34462",
            "advisory": "The `netty-handler` package is vulnerable to Denial of Service (DoS) attacks. The `decode()` method of the `SslClientHelloHandler` class fails to restrict the length of `ClientHello` records created by the `SniHandler` during TLS handshakes. Because fragmented handshakes are accepted without proper validations, a single TLS connection may cause TCP servers lacking idle timeouts to allocate 16MB of heap memory. A remote attacker can exploit this behavior by issuing a large number of `ClientHello` packets in order to cause the server to consume all available memory.\n\n*Advisory Deviation Notice*:\nThe Sonatype security research team discovered that this vulnerability was introduced in version `4.1.44.Final` and therefore does not affect all versions prior to `4.1.94.Final` as stated in the advisory."
        },
        {
            "cve": "CVE-2024-29025",
            "advisory": "The `netty-codec-http` package is vulnerable to Denial of Service (DoS) attacks due to Allocation of Resources Without Limits or Throttling. The methods and classes listed below fail to adequately limit the number of fields in the `InterfaceHttpPostRequestDecoder` form implementation. Additionally, the volume of data within the `undecodedChunk` buffer is not restricted, enabling unbounded accumulation of input data. A remote attacker can exploit this vulnerability by crafting and sending a chunked HTTP POST request composed of numerous small fields. This would result in the accumulation of excessive data in the `bodyListHttpData` list and the `undecodedChunk` buffer, potentially leading to resource exhaustion and ultimately a DoS condition.\n\n***Vulnerable File(s) and Function(s)***:\n\n  - io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.class\n    - `offer()`\n    - `addHttpData()`\n  - io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.class\n    - `HttpPostRequestDecoder()`\n  - io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.class\n    - ` offer()`\n    - `addHttpData()`\n\n\n***Advisory Deviation Notice***:\nThe Sonatype Security Research team discovered that this vulnerability was actually introduced in version `4.0.0.Alpha7` and therefore does not affect all versions prior to `4.1.108.Final` as stated in the advisory."
        },
        {
            "cve": "CVE-2021-42392",
            "advisory": "The `h2` package is vulnerable to Remote Code Execution (RCE). The `getConnection` method in the `JdbcUtils` class performs a context lookup of an unfiltered user supplied url. An attacker with the ability to influence the parameters sent to the aforementioned function can exploit this vulnerability to load a remote malicious class ultimately resulting in Remote Code Execution. \n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that this vulnerability was introduced in version 1.0.57 instead of 1.1.100 as stated in the advisory."
        },
        {
            "cve": "CVE-2022-37866",
            "advisory": "The Apache `ivy` package contains a Path Traversal vulnerability. The methods in the files listed below fail to account for ivy module coordinates containing traversal characters when downloading artifacts from remote repositories. A remote attacker with control of a remote repository from which the application retrieves artifacts can exploit this vulnerability to write to arbitrary locations or to overwrite artifacts in the application's local cache.\n\n*Advisory Deviation Notice*: The Sonatype security research team discovered that this vulnerability was introduced in version 2.0.0-beta1 and not 2.0.0 as stated in the advisory.\n\n*Vulnerable File(s) and Function(s)*:\n\norg/apache/ivy/core/IvyPatternHelper.class\n- substitute()\n\norg/apache/ivy/core/cache/DefaultRepositoryCacheManager.class\n- getCachedDataFile()\n- download()\n\norg/apache/ivy/core/cache/DefaultResolutionCacheManager.class\n- saveResolvedModuleDescriptor()\n- saveLocalParents()\n\norg/apache/ivy/core/resolve/ResolveEngine.class\n- resolve()\n\norg/apache/ivy/core/retrieve/RetrieveEngine.class\n- determineArtifactsToCopy()\n\norg/apache/ivy/plugins/report/XmlReportOutputter.class\n- output()\n\norg/apache/ivy/plugins/repository/file/FileRepository.class\n- getFile()"
        },
        {
            "cve": "CVE-2020-7598",
            "advisory": "The `minimist` package is vulnerable to Prototype Pollution. The `setKey` function in `index.js` modifies JavaScript objects based on user input. An attacker can exploit this behavior to modify the behavior of `Object.prototype`, causing all other objects in the code to behave in unexpected and malicious ways.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the fix for this vulnerability was backported to 0.2.1 for the 0.X versions."
        }
    ],
    "TotalWorkarounds": 67,
    "Workarounds": [
        {
            "cve": "CVE-2017-12611",
            "remediation": "> Do not use such constructions in your code or use read-only properties to initialise the value attribute (property with getter only). You can upgrade to Apache Struts version 2.5.12 or 2.3.34 which contain more restricted Freemarker configuration but removing vulnerable constructions is preferable.\n\nReference: [https://struts.apache.org/docs/s2-053.html](https://struts.apache.org/docs/s2-053.html)"
        },
        {
            "cve": "CVE-2017-5638",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. \n\nWorkarounds:\n> * Change Strut's Multipart parser to something other than Jakarta. Other implementations can be found here: https://cwiki.apache.org/confluence/display/WW/File+Upload#FileUpload-AlternateLibraries \n> * Filter the `Content-Type` header for unexpected values that do match `multipart/form-data` before it is received by the Struts application.\n> * Remove the File Upload Interceptor from the stack, just define your own custom stack and set it as a default - please read How do we configure an Interceptor to be used with every Action. This will work only for Struts 2.5.8 - 2.5.10.\n>\n> ```\n> <interceptors>\n>  <interceptor-stack name=\"defaultWithoutUpload\">\n>  <interceptor-ref name=\"exception\"/>\n>  <interceptor-ref name=\"alias\"/>\n>  <interceptor-ref name=\"servletConfig\"/>\n>  <interceptor-ref name=\"i18n\"/>\n>  <interceptor-ref name=\"prepare\"/>\n>  <interceptor-ref name=\"chain\"/>\n>  <interceptor-ref name=\"scopedModelDriven\"/>\n>  <interceptor-ref name=\"modelDriven\"/>\n>  <interceptor-ref name=\"checkbox\"/>\n>  <interceptor-ref name=\"datetime\"/>\n>  <interceptor-ref name=\"multiselect\"/>\n>  <interceptor-ref name=\"staticParams\"/>\n>  <interceptor-ref name=\"actionMappingParams\"/>\n>  <interceptor-ref name=\"params\"/>\n>  <interceptor-ref name=\"conversionError\"/>\n>  <interceptor-ref name=\"validation\">\n>  <param name=\"excludeMethods\">input,back,cancel,browse</param>\n>  </interceptor-ref>\n>  <interceptor-ref name=\"workflow\">\n>  <param name=\"excludeMethods\">input,back,cancel,browse</param>\n>  </interceptor-ref>\n>  <interceptor-ref name=\"debugging\"/>\n>  </interceptor-stack>\n> </interceptors>\n> <default-interceptor-ref name=\"defaultWithoutUpload\"/>\n> ```\n\nReference: [https://cwiki.apache.org/confluence/display/WW/S2-045](https://cwiki.apache.org/confluence/display/WW/S2-045)"
        },
        {
            "cve": "CVE-2018-11776",
            "remediation": "\nNote: In cases where an upgrade is not possible, Apache has provided a workaround. However, the workaround is acknowledged as temporal and weak, and therefore we do not recommend applying it to the application.\n\nReference: [https://cwiki.apache.org/confluence/display/WW/S2-057](https://cwiki.apache.org/confluence/display/WW/S2-057)"
        },
        {
            "cve": "CVE-2023-34149",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, you may apply the [workaround](https://cwiki.apache.org/confluence/display/WW/S2-063) provided by the project.\n\n> Set CreateIfNull to false for Collection type fields (it's by default false if it's not set).\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2023-34396",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by setting [`struts.multipart.maxSize`](https://struts.apache.org/core-developers/file-upload.html) to a value much smaller than the host's available memory.\n\nReference: <https://cwiki.apache.org/confluence/display/WW/S2-064>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "sonatype-2017-0173",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue.  Alternatively, adding `<constant name=\"struts.additional.excludedPatterns\" value=\".\\.accessDecisionManager\\..\" />` to your Struts2 configuration file will mitigate the DoS vulnerability.\n\nReference: [https://issues.apache.org/jira/browse/WW-4805?focusedCommentId=16053124&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16053124](https://issues.apache.org/jira/browse/WW-4805?focusedCommentId=16053124&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16053124)"
        },
        {
            "cve": "CVE-2023-26048",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by setting the `maxRequestSize` parameter of affected `@MultipartConfig` configurations which, while still read into memory, will limit the entirety of multipart request content.\n\nReference: <https://github.com/eclipse/jetty.project/security/advisories/GHSA-qw69-rqj8-6qw8>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2013-0248",
            "remediation": "\nChange the configuration of `javax.servlet.context.tempdir` to use a protected directory. Only the application should be able to read/write the temporary files.\nNote: There was no code change in the provided fix. Only the documentation was updated to make users aware of the implications of keeping the default setting using a non-protected directory."
        },
        {
            "cve": "CVE-2016-3092",
            "remediation": "\n**Workaround:**\n\n> 1\\. All users of Apache Struts should replace the copy of Commons\n>\n> 2\\. System administrators should restrict the permitted maximum size of HTTP request header values (For example, Apache Httpd provides a LimitRequestFieldSize directive and Apache Tomcat provides a maxHttpHeaderSize attribute in their respective configuration files). A maximum header value size of 2048 bytes would block all dangerous request.\n>\n> Example:\n> File upload requests contain a so-called boundary in the Content-Type header:\n>\n> ```\n> Content-Type: multipart/mixed;\n> boundary=gc0p4Jq0M2Yt08jU534c0p\n> ```\n>\n> The boundary may be chosen by the request sender. In the case of previous versions of Apache Commons Fileupload the boundary becomes dangerous if its size is close to 4096 bytes.\n\nReference: [http://mail-archives.apache.org/mod_mbox/www-announce/201606.mbox/%3C45A20804-ABFF-4FED-A297-69AC95AB9A3F@apache.org%3E](http://mail-archives.apache.org/mod_mbox/www-announce/201606.mbox/%3C45A20804-ABFF-4FED-A297-69AC95AB9A3F@apache.org%3E)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2020-11023",
            "remediation": "\nAlternatively, a workaround is provided by [jQuery](https://github.com/jquery/jquery/security/advisories/GHSA-jpcq-cgw6-v4j6):\n>To workaround this issue without upgrading, use DOMPurify with its `SAFE_FOR_JQUERY` option to sanitize the HTML string before passing it to a jQuery method.\n\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "sonatype-2015-0002",
            "remediation": "\nA potential workaround is to remove `commons-collections` from the classpath or to remove the `InvokerTransformer` class from the `common-collections` jar file.\n\nNote: This is not specifically a `commons-collections` issue. Any serializable object that allows reflection (dynamic method invocation) or execution of dangerous functionality will be subject to the same exploit."
        },
        {
            "cve": "CVE-2020-11023",
            "remediation": "\nAlternatively, a workaround is provided by [jQuery](https://github.com/jquery/jquery/security/advisories/GHSA-jpcq-cgw6-v4j6):\n>To workaround this issue without upgrading, use DOMPurify with its `SAFE_FOR_JQUERY` option to sanitize the HTML string before passing it to a jQuery method.\n\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2022-38752",
            "remediation": "We recommend ensuring that `AllowRecursiveKeys` is never set to `true` and upgrading to a version of this component that is not vulnerable to this specific issue, as the application will still be vulnerable after the upgrade if `AllowRecursiveKeys` is not set to `false`, which is the default configuration since version 1.27.\n\nFor more information on setting `AllowRecursiveKeys`, please see this documentation: [https://www.javadoc.io/doc/org.yaml/snakeyaml/latest/org/yaml/snakeyaml/LoaderOptions.html#setAllowRecursiveKeys-boolean-](https://www.javadoc.io/doc/org.yaml/snakeyaml/latest/org/yaml/snakeyaml/LoaderOptions.html#setAllowRecursiveKeys-boolean-)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2023-33202",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided users with the following workaround:\n\n>The attack can be avoided by either updating or filtering PEM requests containing EXTERNAL tagged encodings.\n\nReference: <https://github.com/bcgit/bc-java/wiki/CVE-2023-33202>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-21330",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability can be mitigated by removing usages of the `aiohttp.web_middlewares.normalize_path_middleware` middleware.\n\nReference: [https://github.com/aio-libs/aiohttp/security/advisories/GHSA-v6wp-4m6f-gcjg](https://github.com/aio-libs/aiohttp/security/advisories/GHSA-v6wp-4m6f-gcjg)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-28165",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by following the [workaround procedure](https://github.com/eclipse/jetty.project/security/advisories/GHSA-26vr-8j45-3r4w) provided by the project. \n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2020-11023",
            "remediation": "\nAlternatively, a workaround is provided by [jQuery](https://github.com/jquery/jquery/security/advisories/GHSA-jpcq-cgw6-v4j6):\n>To workaround this issue without upgrading, use DOMPurify with its `SAFE_FOR_JQUERY` option to sanitize the HTML string before passing it to a jQuery method.\n\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "sonatype-2024-011918",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. ***At the time of Deep Dive research, a 1.14.1 (fixed) version containing the fix is not available on Maven or PyPI repositories.***\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2020-27216",
            "remediation": "Alternatively, [workarounds](https://github.com/eclipse/jetty.project/security/advisories/GHSA-g3wg-6mcf-8jj6) are also available.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2023-33202",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided users with the following workaround:\n\n>The attack can be avoided by either updating or filtering PEM requests containing EXTERNAL tagged encodings.\n\nReference: <https://github.com/bcgit/bc-java/wiki/CVE-2023-33202>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2020-27218",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, we recommend following the workarounds provided by the project:\n\n>The problem can be worked around by either:\n>* Disabling compressed request body inflation by GzipHandler.\n>* By always fully consuming the request content before sending a response.\n>* By adding a Connection: close to any response where the servlet does not fully consume request content.  \n\nReference: [https://github.com/eclipse/jetty.project/security/advisories/GHSA-86wm-rrjm-8wh8](https://github.com/eclipse/jetty.project/security/advisories/GHSA-86wm-rrjm-8wh8)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-34428",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. If this is not possible, the vendor recommends having the application configured to catch all Throwables from `SessionListener#sessionDestroyed() `. \n\nReference: [https://github.com/eclipse/jetty.project/security/advisories/GHSA-m6cp-vxjx-65j6](https://github.com/eclipse/jetty.project/security/advisories/GHSA-m6cp-vxjx-65j6)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2023-26048",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by setting the `maxRequestSize` parameter of affected `@MultipartConfig` configurations which, while still read into memory, will limit the entirety of multipart request content.\n\nReference: <https://github.com/eclipse/jetty.project/security/advisories/GHSA-qw69-rqj8-6qw8>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-44832",
            "remediation": "\n*Mitigating controls from project advisory:*\n\n```\n* Upgrade to Log4j 2.3.2 (for Java 6), 2.12.4 (for Java 7), or 2.17.1 (for Java 8 and later).\n\n* In prior releases confirm that if the JDBC Appender is being used it is not configured to use any protocol other than Java.\n\n* Note that only the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted by this vulnerability.\n\n* Also note that Apache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net and Log4cxx are not impacted by this.\n```\n\nReference: [https://logging.apache.org/log4j/2.x/security.html](https://logging.apache.org/log4j/2.x/security.html)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-45105",
            "remediation": "\nMitigating controls from the project advisory:\n```\nUpgrade to Log4j 2.3.1 (for Java 6), 2.12.3 (for Java 7), or 2.17.0 (for Java 8 and later).\n\nAlternatively, this infinite recursion issue can be mitigated in configuration:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like ${ctx:loginId} or $${ctx:loginId} with Thread Context Map patterns (%X, %mdc, or %MDC).\n* Otherwise, in the configuration, remove references to Context Lookups like ${ctx:loginId} or $${ctx:loginId} where they originate from sources external to the application such as HTTP headers or user input.\n```\n\nReference: [https://logging.apache.org/log4j/2.x/security.html](https://logging.apache.org/log4j/2.x/security.html)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2020-11023",
            "remediation": "\nAlternatively, a workaround is provided by [jQuery](https://github.com/jquery/jquery/security/advisories/GHSA-jpcq-cgw6-v4j6):\n>To workaround this issue without upgrading, use DOMPurify with its `SAFE_FOR_JQUERY` option to sanitize the HTML string before passing it to a jQuery method.\n\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2022-38752",
            "remediation": "We recommend ensuring that `AllowRecursiveKeys` is never set to `true` and upgrading to a version of this component that is not vulnerable to this specific issue, as the application will still be vulnerable after the upgrade if `AllowRecursiveKeys` is not set to `false`, which is the default configuration since version 1.27.\n\nFor more information on setting `AllowRecursiveKeys`, please see this documentation: [https://www.javadoc.io/doc/org.yaml/snakeyaml/latest/org/yaml/snakeyaml/LoaderOptions.html#setAllowRecursiveKeys-boolean-](https://www.javadoc.io/doc/org.yaml/snakeyaml/latest/org/yaml/snakeyaml/LoaderOptions.html#setAllowRecursiveKeys-boolean-)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2023-33202",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided users with the following workaround:\n\n>The attack can be avoided by either updating or filtering PEM requests containing EXTERNAL tagged encodings.\n\nReference: <https://github.com/bcgit/bc-java/wiki/CVE-2023-33202>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2020-27223",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, we recommend applying the following workarounds provided by the project:\n\n>Quality ordered values are used infrequently by jetty so they can be avoided by:\n>* Do not use the default error page/handler.\n>* Do not deploy the StatisticsServlet exposed to the network\n>* Do not call getLocale API\n>* Do not enable precompressed static content in the DefaultServlet\n\nReference: [https://github.com/eclipse/jetty.project/security/advisories/GHSA-m394-8rww-3jr7](https://github.com/eclipse/jetty.project/security/advisories/GHSA-m394-8rww-3jr7)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2023-26048",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by setting the `maxRequestSize` parameter of affected `@MultipartConfig` configurations which, while still read into memory, will limit the entirety of multipart request content.\n\nReference: <https://github.com/eclipse/jetty.project/security/advisories/GHSA-qw69-rqj8-6qw8>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2020-11023",
            "remediation": "\nAlternatively, a workaround is provided by [jQuery](https://github.com/jquery/jquery/security/advisories/GHSA-jpcq-cgw6-v4j6):\n>To workaround this issue without upgrading, use DOMPurify with its `SAFE_FOR_JQUERY` option to sanitize the HTML string before passing it to a jQuery method.\n\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "sonatype-2024-011918",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. ***At the time of Deep Dive research, a 1.14.1 (fixed) version containing the fix is not available on Maven or PyPI repositories.***\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "sonatype-2023-3025",
            "remediation": "If upgrading is not a viable option, the project has provided a potential [workaround](https://github.com/eclipse/jetty.project/security/advisories/GHSA-58qw-p7qm-5rvh).\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2020-11023",
            "remediation": "\nAlternatively, a workaround is provided by [jQuery](https://github.com/jquery/jquery/security/advisories/GHSA-jpcq-cgw6-v4j6):\n>To workaround this issue without upgrading, use DOMPurify with its `SAFE_FOR_JQUERY` option to sanitize the HTML string before passing it to a jQuery method.\n\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2022-38752",
            "remediation": "We recommend ensuring that `AllowRecursiveKeys` is never set to `true` and upgrading to a version of this component that is not vulnerable to this specific issue, as the application will still be vulnerable after the upgrade if `AllowRecursiveKeys` is not set to `false`, which is the default configuration since version 1.27.\n\nFor more information on setting `AllowRecursiveKeys`, please see this documentation: [https://www.javadoc.io/doc/org.yaml/snakeyaml/latest/org/yaml/snakeyaml/LoaderOptions.html#setAllowRecursiveKeys-boolean-](https://www.javadoc.io/doc/org.yaml/snakeyaml/latest/org/yaml/snakeyaml/LoaderOptions.html#setAllowRecursiveKeys-boolean-)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2024-6762",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided users with the following mitigation guidance:\n\n>The session usage is intrinsic to the design of the `PushCacheFilter`. The issue can be avoided by:\n>\n>* not using the `PushCacheFilter`. Push has been deprecated by the various IETF specs and early hints responses should be used instead.\n>* reducing the idle timeout on unauthenticated sessions will reduce the time such session stay in memory.\n>* configuring a session cache to use [session passivation](https://jetty.org/docs/jetty/12/programming-guide/server/session.html), so that sessions are not stored in memory, but rather in a database or file system that may have significantly more capacity than memory.\n\nReference: <https://github.com/jetty/jetty.project/security/advisories/GHSA-r7m4-f9h5-gr79>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2024-9823",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided users with the following mitigation guidance:\n\n>The `DoSFilter` can be configured to not use sessions for tracking usage by setting the `trackSessions` init parameter to `false`. This will then use only the IP tracking mechanism, which is not vulnerable. Sessions can also be configured to have aggressive passivation or inactivation limits.\n\nReference: <https://github.com/jetty/jetty.project/security/advisories/GHSA-7hcf-ppf8-5w5h>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2017-7525",
            "remediation": "*Update*: As of version 2.10.0, Jackson now provides a safe default typing solution that fully mitigates this vulnerability.\n\nReference: [https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2](https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2)\n\nIn order to mitigate this vulnerability, we recommend upgrading to at least version 2.10.0 and changing any usages of `enableDefaultTyping()` to `activateDefaultTyping()`.\n\nAlternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling default typing. Instead, you will need to implement your own:\n\n>It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers.\n\nReference: [https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n\nExamples of implementing your own typing can be found by looking at [Spring Security's fix](https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439) or [this Stack Overflow article](https://stackoverflow.com/questions/12353774/how-to-customize-jackson-type-information-mechanism)."
        },
        {
            "cve": "CVE-2020-11023",
            "remediation": "\nAlternatively, a workaround is provided by [jQuery](https://github.com/jquery/jquery/security/advisories/GHSA-jpcq-cgw6-v4j6):\n>To workaround this issue without upgrading, use DOMPurify with its `SAFE_FOR_JQUERY` option to sanitize the HTML string before passing it to a jQuery method.\n\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-44832",
            "remediation": "\n*Mitigating controls from project advisory:*\n\n```\n* Upgrade to Log4j 2.3.2 (for Java 6), 2.12.4 (for Java 7), or 2.17.1 (for Java 8 and later).\n\n* In prior releases confirm that if the JDBC Appender is being used it is not configured to use any protocol other than Java.\n\n* Note that only the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted by this vulnerability.\n\n* Also note that Apache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net and Log4cxx are not impacted by this.\n```\n\nReference: [https://logging.apache.org/log4j/2.x/security.html](https://logging.apache.org/log4j/2.x/security.html)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-45105",
            "remediation": "\nMitigating controls from the project advisory:\n```\nUpgrade to Log4j 2.3.1 (for Java 6), 2.12.3 (for Java 7), or 2.17.0 (for Java 8 and later).\n\nAlternatively, this infinite recursion issue can be mitigated in configuration:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like ${ctx:loginId} or $${ctx:loginId} with Thread Context Map patterns (%X, %mdc, or %MDC).\n* Otherwise, in the configuration, remove references to Context Lookups like ${ctx:loginId} or $${ctx:loginId} where they originate from sources external to the application such as HTTP headers or user input.\n```\n\nReference: [https://logging.apache.org/log4j/2.x/security.html](https://logging.apache.org/log4j/2.x/security.html)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "sonatype-2015-0002",
            "remediation": "\nA potential workaround is to remove `commons-collections` from the classpath or to remove the `InvokerTransformer` class from the `common-collections` jar file.\n\nNote: This is not specifically a `commons-collections` issue. Any serializable object that allows reflection (dynamic method invocation) or execution of dangerous functionality will be subject to the same exploit."
        },
        {
            "cve": "CVE-2021-21290",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by following the workarounds provided by the project:\n\n>Specify your own java.io.tmpdir when you start the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.\n\nReference: [https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2](https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "sonatype-2020-0026",
            "remediation": "There is no non-vulnerable upgrade path for this component/package. We recommend investigating alternative components or a potential mitigating control. \n\nPer the vendor documentation, \"if you create SslHandler for the client side and want proper security, we advice that you configure the SSLEngine (see SSLParameters.setEndpointIdentificationAlgorithm(String)):\"\n\n ```\nSSLEngine sslEngine = sslHandler.engine();\n SSLParameters sslParameters = sslEngine.getSSLParameters();\n // only available since Java 7\n sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n sslEngine.setSSLParameters(sslParameters);\n```\nReference: [https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-](https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-)\n\n\n**Amazon Web Services (AWS) SDK components**\nUsers of `software.amazon.awssdk:netty-nio-client` can upgrade to version 2.5.23 or higher. Although multiple versions of `software.amazon.awssdk:netty-nio-client` borrow functionality from the dependency `io.netty:netty-handler`, Amazon Web Services released a [custom fix](https://github.com/aws/aws-sdk-java-v2/discussions/3901) for the issue in versions 2.5.23 of their `netty-nio-client` effectively squashing the flaw. Our products may continue to flag these fixed versions should your development build (`pom.xml` file) be pulling in vulnerable versions of `io.netty:netty-handler` but the alert does not apply when running `software.amazon.awssdk:netty-nio-client` version >= 2.5.23.\n\nAdditional reference: [https://github.com/aws/aws-sdk-java-v2/issues/1171](https://github.com/aws/aws-sdk-java-v2/issues/1171)"
        },
        {
            "cve": "sonatype-2023-4380",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided the following workaround:\n\n>A user can limit the amount of RST frames that are accepted per connection over a timeframe manually using either an own `Http2FrameListener` implementation or an `ChannelInboundHandler` implementation (depending which http2 API is used).\n\nReference: <https://github.com/advisories/GHSA-xpw8-rcwv-8f8p>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-42392",
            "remediation": "If upgrading is not a viable solution, the project has provided a workaround to help prevent the exploitation of this vulnerability. \nReference:[https://github.com/h2database/h2database/security/advisories/GHSA-h376-j262-vhq6](https://github.com/h2database/h2database/security/advisories/GHSA-h376-j262-vhq6)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-44832",
            "remediation": "\n*Mitigating controls from project advisory:*\n\n```\n* Upgrade to Log4j 2.3.2 (for Java 6), 2.12.4 (for Java 7), or 2.17.1 (for Java 8 and later).\n\n* In prior releases confirm that if the JDBC Appender is being used it is not configured to use any protocol other than Java.\n\n* Note that only the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted by this vulnerability.\n\n* Also note that Apache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net and Log4cxx are not impacted by this.\n```\n\nReference: [https://logging.apache.org/log4j/2.x/security.html](https://logging.apache.org/log4j/2.x/security.html)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-45105",
            "remediation": "\nMitigating controls from the project advisory:\n```\nUpgrade to Log4j 2.3.1 (for Java 6), 2.12.3 (for Java 7), or 2.17.0 (for Java 8 and later).\n\nAlternatively, this infinite recursion issue can be mitigated in configuration:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like ${ctx:loginId} or $${ctx:loginId} with Thread Context Map patterns (%X, %mdc, or %MDC).\n* Otherwise, in the configuration, remove references to Context Lookups like ${ctx:loginId} or $${ctx:loginId} where they originate from sources external to the application such as HTTP headers or user input.\n```\n\nReference: [https://logging.apache.org/log4j/2.x/security.html](https://logging.apache.org/log4j/2.x/security.html)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-44832",
            "remediation": "\n*Mitigating controls from project advisory:*\n\n```\n* Upgrade to Log4j 2.3.2 (for Java 6), 2.12.4 (for Java 7), or 2.17.1 (for Java 8 and later).\n\n* In prior releases confirm that if the JDBC Appender is being used it is not configured to use any protocol other than Java.\n\n* Note that only the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted by this vulnerability.\n\n* Also note that Apache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net and Log4cxx are not impacted by this.\n```\n\nReference: [https://logging.apache.org/log4j/2.x/security.html](https://logging.apache.org/log4j/2.x/security.html)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-45105",
            "remediation": "\nMitigating controls from the project advisory:\n```\nUpgrade to Log4j 2.3.1 (for Java 6), 2.12.3 (for Java 7), or 2.17.0 (for Java 8 and later).\n\nAlternatively, this infinite recursion issue can be mitigated in configuration:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like ${ctx:loginId} or $${ctx:loginId} with Thread Context Map patterns (%X, %mdc, or %MDC).\n* Otherwise, in the configuration, remove references to Context Lookups like ${ctx:loginId} or $${ctx:loginId} where they originate from sources external to the application such as HTTP headers or user input.\n```\n\nReference: [https://logging.apache.org/log4j/2.x/security.html](https://logging.apache.org/log4j/2.x/security.html)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2017-7525",
            "remediation": "*Update*: As of version 2.10.0, Jackson now provides a safe default typing solution that fully mitigates this vulnerability.\n\nReference: [https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2](https://medium.com/@cowtowncoder/jackson-2-10-features-cd880674d8a2)\n\nIn order to mitigate this vulnerability, we recommend upgrading to at least version 2.10.0 and changing any usages of `enableDefaultTyping()` to `activateDefaultTyping()`.\n\nAlternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling default typing. Instead, you will need to implement your own:\n\n>It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers.\n\nReference: [https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n\nExamples of implementing your own typing can be found by looking at [Spring Security's fix](https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439) or [this Stack Overflow article](https://stackoverflow.com/questions/12353774/how-to-customize-jackson-type-information-mechanism)."
        },
        {
            "cve": "CVE-2020-11023",
            "remediation": "\nAlternatively, a workaround is provided by [jQuery](https://github.com/jquery/jquery/security/advisories/GHSA-jpcq-cgw6-v4j6):\n>To workaround this issue without upgrading, use DOMPurify with its `SAFE_FOR_JQUERY` option to sanitize the HTML string before passing it to a jQuery method.\n\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-44832",
            "remediation": "\n*Mitigating controls from project advisory:*\n\n```\n* Upgrade to Log4j 2.3.2 (for Java 6), 2.12.4 (for Java 7), or 2.17.1 (for Java 8 and later).\n\n* In prior releases confirm that if the JDBC Appender is being used it is not configured to use any protocol other than Java.\n\n* Note that only the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted by this vulnerability.\n\n* Also note that Apache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net and Log4cxx are not impacted by this.\n```\n\nReference: [https://logging.apache.org/log4j/2.x/security.html](https://logging.apache.org/log4j/2.x/security.html)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-45105",
            "remediation": "\nMitigating controls from the project advisory:\n```\nUpgrade to Log4j 2.3.1 (for Java 6), 2.12.3 (for Java 7), or 2.17.0 (for Java 8 and later).\n\nAlternatively, this infinite recursion issue can be mitigated in configuration:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like ${ctx:loginId} or $${ctx:loginId} with Thread Context Map patterns (%X, %mdc, or %MDC).\n* Otherwise, in the configuration, remove references to Context Lookups like ${ctx:loginId} or $${ctx:loginId} where they originate from sources external to the application such as HTTP headers or user input.\n```\n\nReference: [https://logging.apache.org/log4j/2.x/security.html](https://logging.apache.org/log4j/2.x/security.html)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "sonatype-2015-0002",
            "remediation": "\nA potential workaround is to remove `commons-collections` from the classpath or to remove the `InvokerTransformer` class from the `common-collections` jar file.\n\nNote: This is not specifically a `commons-collections` issue. Any serializable object that allows reflection (dynamic method invocation) or execution of dangerous functionality will be subject to the same exploit."
        },
        {
            "cve": "sonatype-2023-3025",
            "remediation": "If upgrading is not a viable option, the project has provided a potential [workaround](https://github.com/eclipse/jetty.project/security/advisories/GHSA-58qw-p7qm-5rvh).\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-21290",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by following the workarounds provided by the project:\n\n>Specify your own java.io.tmpdir when you start the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.\n\nReference: [https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2](https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "sonatype-2020-0026",
            "remediation": "There is no non-vulnerable upgrade path for this component/package. We recommend investigating alternative components or a potential mitigating control. \n\nPer the vendor documentation, \"if you create SslHandler for the client side and want proper security, we advice that you configure the SSLEngine (see SSLParameters.setEndpointIdentificationAlgorithm(String)):\"\n\n ```\nSSLEngine sslEngine = sslHandler.engine();\n SSLParameters sslParameters = sslEngine.getSSLParameters();\n // only available since Java 7\n sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n sslEngine.setSSLParameters(sslParameters);\n```\nReference: [https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-](https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html#newHandler-io.netty.buffer.ByteBufAllocator-java.util.concurrent.Executor-)\n\n\n**Amazon Web Services (AWS) SDK components**\nUsers of `software.amazon.awssdk:netty-nio-client` can upgrade to version 2.5.23 or higher. Although multiple versions of `software.amazon.awssdk:netty-nio-client` borrow functionality from the dependency `io.netty:netty-handler`, Amazon Web Services released a [custom fix](https://github.com/aws/aws-sdk-java-v2/discussions/3901) for the issue in versions 2.5.23 of their `netty-nio-client` effectively squashing the flaw. Our products may continue to flag these fixed versions should your development build (`pom.xml` file) be pulling in vulnerable versions of `io.netty:netty-handler` but the alert does not apply when running `software.amazon.awssdk:netty-nio-client` version >= 2.5.23.\n\nAdditional reference: [https://github.com/aws/aws-sdk-java-v2/issues/1171](https://github.com/aws/aws-sdk-java-v2/issues/1171)"
        },
        {
            "cve": "sonatype-2023-4380",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided the following workaround:\n\n>A user can limit the amount of RST frames that are accepted per connection over a timeframe manually using either an own `Http2FrameListener` implementation or an `ChannelInboundHandler` implementation (depending which http2 API is used).\n\nReference: <https://github.com/advisories/GHSA-xpw8-rcwv-8f8p>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2020-27216",
            "remediation": "Alternatively, [workarounds](https://github.com/eclipse/jetty.project/security/advisories/GHSA-g3wg-6mcf-8jj6) are also available.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2024-6762",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided users with the following mitigation guidance:\n\n>The session usage is intrinsic to the design of the `PushCacheFilter`. The issue can be avoided by:\n>\n>* not using the `PushCacheFilter`. Push has been deprecated by the various IETF specs and early hints responses should be used instead.\n>* reducing the idle timeout on unauthenticated sessions will reduce the time such session stay in memory.\n>* configuring a session cache to use [session passivation](https://jetty.org/docs/jetty/12/programming-guide/server/session.html), so that sessions are not stored in memory, but rather in a database or file system that may have significantly more capacity than memory.\n\nReference: <https://github.com/jetty/jetty.project/security/advisories/GHSA-r7m4-f9h5-gr79>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2024-9823",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, the project has provided users with the following mitigation guidance:\n\n>The `DoSFilter` can be configured to not use sessions for tracking usage by setting the `trackSessions` init parameter to `false`. This will then use only the IP tracking mechanism, which is not vulnerable. Sessions can also be configured to have aggressive passivation or inactivation limits.\n\nReference: <https://github.com/jetty/jetty.project/security/advisories/GHSA-7hcf-ppf8-5w5h>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2023-26048",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by setting the `maxRequestSize` parameter of affected `@MultipartConfig` configurations which, while still read into memory, will limit the entirety of multipart request content.\n\nReference: <https://github.com/eclipse/jetty.project/security/advisories/GHSA-qw69-rqj8-6qw8>\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-28165",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, this vulnerability may be mitigated by following the [workaround procedure](https://github.com/eclipse/jetty.project/security/advisories/GHSA-26vr-8j45-3r4w) provided by the project. \n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2020-27218",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, we recommend following the workarounds provided by the project:\n\n>The problem can be worked around by either:\n>* Disabling compressed request body inflation by GzipHandler.\n>* By always fully consuming the request content before sending a response.\n>* By adding a Connection: close to any response where the servlet does not fully consume request content.  \n\nReference: [https://github.com/eclipse/jetty.project/security/advisories/GHSA-86wm-rrjm-8wh8](https://github.com/eclipse/jetty.project/security/advisories/GHSA-86wm-rrjm-8wh8)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2021-34428",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. If this is not possible, the vendor recommends having the application configured to catch all Throwables from `SessionListener#sessionDestroyed() `. \n\nReference: [https://github.com/eclipse/jetty.project/security/advisories/GHSA-m6cp-vxjx-65j6](https://github.com/eclipse/jetty.project/security/advisories/GHSA-m6cp-vxjx-65j6)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        },
        {
            "cve": "CVE-2020-27223",
            "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Alternatively, if upgrading is not a viable option, we recommend applying the following workarounds provided by the project:\n\n>Quality ordered values are used infrequently by jetty so they can be avoided by:\n>* Do not use the default error page/handler.\n>* Do not deploy the StatisticsServlet exposed to the network\n>* Do not call getLocale API\n>* Do not enable precompressed static content in the DefaultServlet\n\nReference: [https://github.com/eclipse/jetty.project/security/advisories/GHSA-m394-8rww-3jr7](https://github.com/eclipse/jetty.project/security/advisories/GHSA-m394-8rww-3jr7)\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
        }
    ],
    "DeepDiveResearch": 375,
    "SonatypeCVECount": 100,
    "TotalCVEs": 411
}